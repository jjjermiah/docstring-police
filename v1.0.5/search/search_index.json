{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Pixi is a package management tool for developers. It allows the developer to install libraries and applications in a reproducible way. Use pixi cross-platform, on Windows, Mac and Linux.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>pixi</code> you can run the following command in your terminal:</p> Linux &amp; macOSWindows <pre><code>curl -fsSL https://pixi.sh/install.sh | bash\n</code></pre> <p>The above invocation will automatically download the latest version of <code>pixi</code>, extract it, and move the <code>pixi</code> binary to <code>~/.pixi/bin</code>. If this directory does not already exist, the script will create it.</p> <p>The script will also update your <code>~/.bash_profile</code> to include <code>~/.pixi/bin</code> in your PATH, allowing you to invoke the <code>pixi</code> command from anywhere.</p> <p><code>PowerShell</code>: <pre><code>iwr -useb https://pixi.sh/install.ps1 | iex\n</code></pre> <code>winget</code>: <pre><code>winget install prefix-dev.pixi\n</code></pre> The above invocation will automatically download the latest version of <code>pixi</code>, extract it, and move the <code>pixi</code> binary to <code>LocalAppData/pixi/bin</code>. If this directory does not already exist, the script will create it.</p> <p>The command will also automatically add <code>LocalAppData/pixi/bin</code> to your path allowing you to invoke <code>pixi</code> from anywhere.</p> <p>Tip</p> <p>You might need to restart your terminal or source your shell for the changes to take effect.</p> <p>You can find more options for the installation script here.</p>"},{"location":"#autocompletion","title":"Autocompletion","text":"<p>To get autocompletion follow the instructions for your shell. Afterwards, restart the shell or source the shell config file.</p>"},{"location":"#bash-default-on-most-linux-systems","title":"Bash (default on most Linux systems)","text":"<pre><code>echo 'eval \"$(pixi completion --shell bash)\"' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"#zsh-default-on-macos","title":"Zsh (default on macOS)","text":"<pre><code>echo 'eval \"$(pixi completion --shell zsh)\"' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"#powershell-pre-installed-on-all-windows-systems","title":"PowerShell (pre-installed on all Windows systems)","text":"<pre><code>Add-Content -Path $PROFILE -Value '(&amp; pixi completion --shell powershell) | Out-String | Invoke-Expression'\n</code></pre> <p>Failure because no profile file exists</p> <p>Make sure your profile file exists, otherwise create it with: <pre><code>New-Item -Path $PROFILE -ItemType File -Force\n</code></pre></p>"},{"location":"#fish","title":"Fish","text":"<pre><code>echo 'pixi completion --shell fish | source' &gt; ~/.config/fish/completions/pixi.fish\n</code></pre>"},{"location":"#nushell","title":"Nushell","text":"<p>Add the following to the end of your Nushell env file (find it by running <code>$nu.env-path</code> in Nushell):</p> <pre><code>mkdir ~/.cache/pixi\npixi completion --shell nushell | save -f ~/.cache/pixi/completions.nu\n</code></pre> <p>And add the following to the end of your Nushell configuration (find it by running <code>$nu.config-path</code>):</p> <pre><code>use ~/.cache/pixi/completions.nu *\n</code></pre>"},{"location":"#elvish","title":"Elvish","text":"<pre><code>echo 'eval (pixi completion --shell elvish | slurp)' &gt;&gt; ~/.elvish/rc.elv\n</code></pre>"},{"location":"#alternative-installation-methods","title":"Alternative installation methods","text":"<p>Although we recommend installing pixi through the above method we also provide additional installation methods.</p>"},{"location":"#homebrew","title":"Homebrew","text":"<p>Pixi is available via homebrew. To install pixi via homebrew simply run:</p> <pre><code>brew install pixi\n</code></pre>"},{"location":"#windows-installer","title":"Windows installer","text":"<p>We provide an <code>msi</code> installer on our GitHub releases page. The installer will download pixi and add it to the path.</p>"},{"location":"#install-from-source","title":"Install from source","text":"<p>pixi is 100% written in Rust, and therefore it can be installed, built and tested with cargo. To start using pixi from a source build run:</p> <pre><code>cargo install --locked --git https://github.com/prefix-dev/pixi.git pixi\n</code></pre> <p>We don't publish to <code>crates.io</code> anymore, so you need to install it from the repository. The reason for this is that we depend on some unpublished crates which disallows us to publish to <code>crates.io</code>.</p> <p>or when you want to make changes use:</p> <pre><code>cargo build\ncargo test\n</code></pre> <p>If you have any issues building because of the dependency on <code>rattler</code> checkout its compile steps.</p>"},{"location":"#installer-script-options","title":"Installer script options","text":"Linux &amp; macOSWindows <p>The installation script has several options that can be manipulated through environment variables.</p> Variable Description Default Value <code>PIXI_VERSION</code> The version of pixi getting installed, can be used to up- or down-grade. <code>latest</code> <code>PIXI_HOME</code> The location of the binary folder. <code>$HOME/.pixi</code> <code>PIXI_ARCH</code> The architecture the pixi version was built for. <code>uname -m</code> <code>PIXI_NO_PATH_UPDATE</code> If set the <code>$PATH</code> will not be updated to add <code>pixi</code> to it. <code>TMP_DIR</code> The temporary directory the script uses to download to and unpack the binary from. <code>/tmp</code> <p>For example, on Apple Silicon, you can force the installation of the x86 version: <pre><code>curl -fsSL https://pixi.sh/install.sh | PIXI_ARCH=x86_64 bash\n</code></pre> Or set the version <pre><code>curl -fsSL https://pixi.sh/install.sh | PIXI_VERSION=v0.18.0 bash\n</code></pre></p> <p>The installation script has several options that can be manipulated through environment variables.</p> Variable Environment variable Description Default Value <code>PixiVersion</code> <code>PIXI_VERSION</code> The version of pixi getting installed, can be used to up- or down-grade. <code>latest</code> <code>PixiHome</code> <code>PIXI_HOME</code> The location of the installation. <code>$Env:USERPROFILE\\.pixi</code> <code>NoPathUpdate</code> If set, the <code>$PATH</code> will not be updated to add <code>pixi</code> to it. <p>For example, set the version using:</p> <pre><code>iwr -useb https://pixi.sh/install.ps1 | iex -Args \"-PixiVersion v0.18.0\"\n</code></pre>"},{"location":"#update","title":"Update","text":"<p>Updating is as simple as installing, rerunning the installation script gets you the latest version.</p> <p><pre><code>pixi self-update\n</code></pre> Or get a specific pixi version using: <pre><code>pixi self-update --version x.y.z\n</code></pre></p> <p>Note</p> <p>If you've used a package manager like <code>brew</code>, <code>mamba</code>, <code>conda</code>, <code>paru</code> etc. to install <code>pixi</code> you must use the built-in update mechanism. e.g. <code>brew upgrade pixi</code>.</p>"},{"location":"#uninstall","title":"Uninstall","text":"<p>To uninstall pixi from your system, simply remove the binary.</p> Linux &amp; macOSWindows <pre><code>rm ~/.pixi/bin/pixi\n</code></pre> <pre><code>$PIXI_BIN = \"$Env:LocalAppData\\pixi\\bin\\pixi\"; Remove-Item -Path $PIXI_BIN\n</code></pre> <p>After this command, you can still use the tools you installed with pixi. To remove these as well, just remove the whole <code>~/.pixi</code> directory and remove the directory from your path.</p>"},{"location":"Community/","title":"Community","text":"<p>When you want to show your users and contributors that they can use pixi in your repo, you can use the following badge:</p> <p></p> <pre><code>[![Pixi Badge](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/prefix-dev/pixi/main/assets/badge/v0.json)](https://pixi.sh)\n</code></pre> <p>Customize your badge</p> <p>To further customize the look and feel of your badge, you can add <code>&amp;style=&lt;custom-style&gt;</code> at the end of the URL. See the documentation on shields.io for more info.</p>"},{"location":"Community/#built-using-pixi","title":"Built using Pixi","text":"<ul> <li>Deltares:<ul> <li>Ribasim: Water resources model</li> <li>Ribasim-NL: Ribasim water resources modeling in the Netherlands</li> <li>iMOD Python: Make massive MODFLOW models</li> <li>iMOD Coupler: Application for coupling hydrological kernels</li> <li>iMOD Documentation: Documentation of the iMOD suite.</li> <li>Xugrid: Xarray and unstructured grids</li> <li>Numba celltree: Celltree data structure for searching for points, lines, boxes, and cells (convex polygons) in a two dimensional unstructured mesh.</li> <li>QGIS-Tim: QGIS plugin and utilities for TimML multi-layer analytic element model</li> <li>Pandamesh: From geodataframe to mesh</li> <li>Wflow: Hydrological modeling framework</li> <li>HydroMT: Automated and reproducible model building and analysis</li> <li>HydroMT SFINCS: SFINCS plugin for HydroMT</li> <li>PyFlwDir: Fast methods to work with hydro- and topography data in pure Python.</li> </ul> </li> <li>USGS:<ul> <li>MODFLOW 6: USGS modular hydrological model</li> </ul> </li> <li>QuantCo:<ul> <li>glum: High performance Python GLMs with all the features!</li> <li>tabmat: Efficient matrix representations for working with tabular data</li> <li>pixi-pack: A tool to pack and unpack conda environments created with pixi</li> <li>polarify: Simplifying conditional Polars Expressions with Python \ud83d\udc0d \ud83d\udc3b\u200d\u2744\ufe0f</li> <li>copier-template-python-open-source: Copier template for python projects using pixi</li> <li>datajudge: Assessing whether data from database complies with reference information</li> <li>ndonnx: ONNX-backed array library that is compliant with the Array API standard</li> <li>multiregex: Quickly match many regexes against a string</li> <li>slim-trees: Pickle your ML models more efficiently for deployment \ud83d\ude80</li> <li>sqlcompyre: Compare SQL tables and databases</li> <li>metalearners: MetaLearners for CATE estimation</li> <li>ndonnx: ONNX-backed array library that is compliant with the Array API standard</li> <li>tabulardelta: Simplify table comparisons</li> <li>pydiverse.pipedag: A library for data pipeline orchestration optimizing high development iteration speed</li> <li>pydiverse.transform: Pipe based dataframe manipulation library that can also transform data on SQL databases</li> </ul> </li> </ul> <ul> <li>pixi-pycharm: Conda shim for PyCharm that proxies pixi</li> <li>pixi-diff-to-markdown: Generate markdown summaries from pixi update</li> <li>jiaxiyang/cpp_project_guideline: Guide the way beginners make their c++ projects.</li> <li>karelze/tclf: A python library for trade classification\u26a1</li> <li>hex-inc/vegafusion: Serverside scaling of Vega and Altair visualizations in Rust, Python, WASM, and Java</li> <li>pablovela5620/arxiv-researcher: Summarize PDF's and Arixv papers with Langchain and Nougat \ud83e\udd89</li> <li>HaoZeke/xtsci-dist: Incremental <code>scipy</code> port using <code>xtensor</code></li> <li>jslorrma/keyrings.artifacts: Keyring backend that provides authentication for publishing or consuming Python packages to or from Azure Artifacts feeds within Azure DevOps</li> <li>LFortran: A modern cross-platform Fortran compiler</li> <li>Rerun: Rerun is an SDK for building time aware visualizations of multimodal data.</li> <li>conda-auth: a conda plugin providing more secure authentication support to conda.</li> <li>py-rattler: Build your own conda environment manager using the python wrapper of our Rattler backend.</li> <li>array-api-extra: Extra array functions built on top of the Python array API standard.</li> </ul>"},{"location":"FAQ/","title":"Frequently asked questions","text":""},{"location":"FAQ/#what-is-the-difference-with-conda-mamba-poetry-pip","title":"What is the difference with <code>conda</code>, <code>mamba</code>, <code>poetry</code>, <code>pip</code>","text":"Tool Installs python Builds packages Runs predefined tasks Has lock files builtin Fast Use without python Conda \u2705 \u274c \u274c \u274c \u274c \u274c Mamba \u2705 \u274c \u274c \u274c \u2705 \u2705 Pip \u274c \u2705 \u274c \u274c \u274c \u274c Pixi \u2705 \ud83d\udea7 \u2705 \u2705 \u2705 \u2705 Poetry \u274c \u2705 \u274c \u2705 \u274c \u274c"},{"location":"FAQ/#why-the-name-pixi","title":"Why the name <code>pixi</code>","text":"<p>Starting with the name <code>prefix</code> we iterated until we had a name that was easy to pronounce, spell and remember. There also wasn't a cli tool yet using that name. Unlike <code>px</code>, <code>pex</code>, <code>pax</code>, etc. We think it sparks curiosity and fun, if you don't agree, I'm sorry, but you can always alias it to whatever you like.</p> Linux &amp; macOSWindows <pre><code>alias not_pixi=\"pixi\"\n</code></pre> <p>PowerShell: <pre><code>New-Alias -Name not_pixi -Value pixi\n</code></pre></p>"},{"location":"FAQ/#where-is-pixi-build","title":"Where is <code>pixi build</code>","text":"<p>TL;DR: It's coming we promise!</p> <p><code>pixi build</code> is going to be the subcommand that can generate a conda package out of a pixi project. This requires a solid build tool which we're creating with <code>rattler-build</code> which will be used as a library in pixi.</p>"},{"location":"basic_usage/","title":"Basic usage","text":"<p>Ensure you've got <code>pixi</code> set up. If running <code>pixi</code> doesn't show the help, see the getting started if it doesn't.</p> <pre><code>pixi\n</code></pre> <p>Initialize a new project and navigate to the project directory.</p> <pre><code>pixi init pixi-hello-world\ncd pixi-hello-world\n</code></pre> <p>Add the dependencies you would like to use.</p> <pre><code>pixi add python\n</code></pre> <p>Create a file named <code>hello_world.py</code> in the directory and paste the following code into the file.</p> hello_world.py<pre><code>def hello():\n    print(\"Hello World, to the new revolution in package management.\")\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>Run the code inside the environment.</p> <pre><code>pixi run python hello_world.py\n</code></pre> <p>You can also put this run command in a task.</p> <pre><code>pixi task add hello python hello_world.py\n</code></pre> <p>After adding the task, you can run the task using its name.</p> <pre><code>pixi run hello\n</code></pre> <p>Use the <code>shell</code> command to activate the environment and start a new shell in there.</p> <pre><code>pixi shell\npython\nexit()\n</code></pre> <p>You've just learned the basic features of pixi:</p> <ol> <li>initializing a project</li> <li>adding a dependency.</li> <li>adding a task, and executing it.</li> <li>running a program.</li> </ol> <p>Feel free to play around with what you just learned like adding more tasks, dependencies or code.</p> <p>Happy coding!</p>"},{"location":"basic_usage/#use-pixi-as-a-global-installation-tool","title":"Use pixi as a global installation tool","text":"<p>Use pixi to install tools on your machine.</p> <p>Some notable examples:</p> <pre><code># Awesome cross shell prompt, huge tip when using pixi!\npixi global install starship\n\n# Want to try a different shell?\npixi global install fish\n\n# Install other prefix.dev tools\npixi global install rattler-build\n\n# Install a multi package environment\npixi global install --environment data-science-env --expose python --expose jupyter python jupyter numpy pandas\n</code></pre>"},{"location":"basic_usage/#use-pixi-in-github-actions","title":"Use pixi in GitHub Actions","text":"<p>You can use pixi in GitHub Actions to install dependencies and run commands. It supports automatic caching of your environments.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.5.1\n- run: pixi run cowpy \"Thanks for using pixi\"\n</code></pre> <p>See the GitHub Actions for more details.</p>"},{"location":"packaging/","title":"Packaging pixi","text":"<p>This is a guide for distribution maintainers wanting to package pixi for a different package manager. Users of pixi can ignore this page.</p>"},{"location":"packaging/#building","title":"Building","text":"<p>Pixi is written in Rust and compiled using Cargo, which are needed as compile-time dependencies. At runtime pixi needs no dependencies in other than the runtime it was compiled against (<code>libc</code>, ...).</p> <p>To build pixi run <pre><code>cargo build --locked --profile dist\n</code></pre> Instead of using the predefined <code>dist</code> profile, which is optimized for binary size, you can also pass other options to let cargo optimize the binary for other metrics.</p>"},{"location":"packaging/#build-time-options","title":"Build-time Options","text":"<p>Pixi provides some compile-time options, which can influence the build</p>"},{"location":"packaging/#tls","title":"TLS","text":"<p>By default, pixi is built with Rustls TLS implementation. You can compile pixi using the platform native TLS implementation using by adding <code>--no-default-features --feature native-tls</code> to the build command. Note that this might add additional runtime dependencies, such as OpenSSL on Linux.</p>"},{"location":"packaging/#self-update","title":"Self-Update","text":"<p>Pixi has a self-update functionality. When pixi is installed using another package manager one usually doesn't want pixi to try to update itself and instead let it be updated by the package manager. For this reason the self-update feature is disabled by default. It can be enabled by adding <code>--feature self_update</code> to the build command.</p> <p>When the self-update feature is disabled and a user tries to run <code>pixi self-update</code> an error message is displayed. This message can be customized by setting the <code>PIXI_SELF_UPDATE_DISABLED_MESSAGE</code> environment variable at build time to point the user to the package manager they should be using to update pixi. <pre><code>PIXI_SELF_UPDATE_DISABLED_MESSAGE=\"`self-update` has been disabled for this build. Run `brew upgrade pixi` instead\" cargo build --locked --profile dist\n</code></pre></p>"},{"location":"packaging/#custom-version","title":"Custom version","text":"<p>You can specify a custom version string to be used in the <code>--version</code> output by setting the <code>PIXI_VERSION</code> environment variable during the build.</p> <pre><code>PIXI_VERSION=\"HEAD-123456\" cargo build --locked --profile dist\n</code></pre>"},{"location":"packaging/#shell-completion","title":"Shell completion","text":"<p>After building pixi you can generate shell autocompletion scripts by running <pre><code>pixi completion --shell &lt;SHELL&gt;\n</code></pre> and saving the output to a file. Currently supported shells are <code>bash</code>, <code>elvish</code>, <code>fish</code>, <code>nushell</code>, <code>powershell</code> and <code>zsh</code>.</p>"},{"location":"vision/","title":"Vision","text":"<p>We created <code>pixi</code> because we want to have a cargo/npm/yarn like package management experience for conda. We really love what the conda packaging ecosystem achieves, but we think that the user experience can be improved a lot. Modern package managers like <code>cargo</code> have shown us, how great a package manager can be. We want to bring that experience to the conda ecosystem.</p>"},{"location":"vision/#pixi-values","title":"Pixi values","text":"<p>We want to make pixi a great experience for everyone, so we have a few values that we want to uphold:</p> <ol> <li>Fast. We want to have a fast package manager, that is able to solve the environment in a few seconds.</li> <li>User Friendly. We want to have a package manager that puts user friendliness on the front-line. Providing easy, accessible and intuitive commands. That have the element of least surprise.</li> <li>Isolated Environment. We want to have isolated environments, that are reproducible and easy to share. Ideally, it should run on all common platforms. The Conda packaging system provides an excellent base for this.</li> <li>Single Tool. We want to integrate most common uses when working on a development project with Pixi, so it should support at least dependency management, command management, building and uploading packages. You should not need to reach to another external tool for this.</li> <li>Fun. It should be fun to use pixi and not cause frustrations, you should not need to think about it a lot and it should generally just get out of your way.</li> </ol>"},{"location":"vision/#conda","title":"Conda","text":"<p>We are building on top of the conda packaging ecosystem, this means that we have a huge number of packages available for different platforms on conda-forge. We believe the conda packaging ecosystem provides a solid base to manage your dependencies. Conda-forge is community maintained and very open to contributions. It is widely used in data science and scientific computing, robotics and other fields. And has a proven track record.</p>"},{"location":"vision/#target-languages","title":"Target languages","text":"<p>Essentially, we are language agnostics, we are targeting any language that can be installed with conda. Including: C++, Python, Rust, Zig etc. But we do believe the python ecosystem can benefit from a good package manager that is based on conda. So we are trying to provide an alternative to existing solutions there. We also think we can provide a good solution for C++ projects, as there are a lot of libraries available on conda-forge today. Pixi also truly shines when using it for multi-language projects e.g. a mix of C++ and Python, because we provide a nice way to build everything up to and including system level packages.</p>"},{"location":"advanced/authentication/","title":"Authenticate pixi with a server","text":"<p>You can authenticate pixi with a server like prefix.dev, a private quetz instance or anaconda.org. Different servers use different authentication methods. In this documentation page, we detail how you can authenticate against the different servers and where the authentication information is stored.</p> <pre><code>Usage: pixi auth login [OPTIONS] &lt;HOST&gt;\n\nArguments:\n  &lt;HOST&gt;  The host to authenticate with (e.g. repo.prefix.dev)\n\nOptions:\n      --token &lt;TOKEN&gt;              The token to use (for authentication with prefix.dev)\n      --username &lt;USERNAME&gt;        The username to use (for basic HTTP authentication)\n      --password &lt;PASSWORD&gt;        The password to use (for basic HTTP authentication)\n      --conda-token &lt;CONDA_TOKEN&gt;  The token to use on anaconda.org / quetz authentication\n  -v, --verbose...                 More output per occurrence\n  -q, --quiet...                   Less output per occurrence\n  -h, --help                       Print help\n</code></pre> <p>The different options are \"token\", \"conda-token\" and \"username + password\".</p> <p>The token variant implements a standard \"Bearer Token\" authentication as is used on the prefix.dev platform. A Bearer Token is sent with every request as an additional header of the form <code>Authentication: Bearer &lt;TOKEN&gt;</code>.</p> <p>The conda-token option is used on anaconda.org and can be used with a quetz server. With this option, the token is sent as part of the URL following this scheme: <code>conda.anaconda.org/t/&lt;TOKEN&gt;/conda-forge/linux-64/...</code>.</p> <p>The last option, username &amp; password, are used for \"Basic HTTP Authentication\". This is the equivalent of adding <code>http://user:password@myserver.com/...</code>. This authentication method can be configured quite easily with a reverse NGinx or Apache server and is thus commonly used in self-hosted systems.</p>"},{"location":"advanced/authentication/#examples","title":"Examples","text":"<p>Login to prefix.dev:</p> <pre><code>pixi auth login prefix.dev --token pfx_jj8WDzvnuTHEGdAhwRZMC1Ag8gSto8\n</code></pre> <p>Login to anaconda.org:</p> <pre><code>pixi auth login anaconda.org --conda-token xy-72b914cc-c105-4ec7-a969-ab21d23480ed\n</code></pre> <p>Login to a basic HTTP secured server:</p> <pre><code>pixi auth login myserver.com --username user --password password\n</code></pre>"},{"location":"advanced/authentication/#where-does-pixi-store-the-authentication-information","title":"Where does pixi store the authentication information?","text":"<p>The storage location for the authentication information is system-dependent. By default, pixi tries to use the keychain to store this sensitive information securely on your machine.</p> <p>On Windows, the credentials are stored in the \"credentials manager\". Searching for <code>rattler</code> (the underlying library pixi uses) you should find any credentials stored by pixi (or other rattler-based programs).</p> <p>On macOS, the passwords are stored in the keychain. To access the password, you can use the <code>Keychain Access</code> program that comes pre-installed on macOS. Searching for <code>rattler</code> (the underlying library pixi uses) you should find any credentials stored by pixi (or other rattler-based programs).</p> <p>On Linux, one can use <code>GNOME Keyring</code> (or just Keyring) to access credentials that are securely stored by <code>libsecret</code>. Searching for <code>rattler</code> should list all the credentials stored by pixi and other rattler-based programs.</p>"},{"location":"advanced/authentication/#fallback-storage","title":"Fallback storage","text":"<p>If you run on a server with none of the aforementioned keychains available, then pixi falls back to store the credentials in an insecure JSON file. This JSON file is located at <code>~/.rattler/credentials.json</code> and contains the credentials.</p>"},{"location":"advanced/authentication/#override-the-authentication-storage","title":"Override the authentication storage","text":"<p>You can use the <code>RATTLER_AUTH_FILE</code> environment variable to override the default location of the credentials file. When this environment variable is set, it provides the only source of authentication data that is used by pixi.</p> <p>E.g.</p> <pre><code>export RATTLER_AUTH_FILE=$HOME/credentials.json\n# You can also specify the file in the command line\npixi global install --auth-file $HOME/credentials.json ...\n</code></pre> <p>The JSON should follow the following format:</p> <pre><code>{\n    \"*.prefix.dev\": {\n        \"BearerToken\": \"your_token\"\n    },\n    \"otherhost.com\": {\n        \"BasicHTTP\": {\n            \"username\": \"your_username\",\n            \"password\": \"your_password\"\n        }\n    },\n    \"conda.anaconda.org\": {\n        \"CondaToken\": \"your_token\"\n    }\n}\n</code></pre> <p>Note: if you use a wildcard in the host, any subdomain will match (e.g. <code>*.prefix.dev</code> also matches <code>repo.prefix.dev</code>).</p> <p>Lastly you can set the authentication override file in the global configuration file.</p>"},{"location":"advanced/authentication/#pypi-authentication","title":"PyPI authentication","text":"<p>Currently, we support the following methods for authenticating against PyPI:</p> <ol> <li>keyring authentication.</li> <li><code>.netrc</code> file authentication.</li> </ol> <p>We want to add more methods in the future, so if you have a specific method you would like to see, please let us know.</p>"},{"location":"advanced/authentication/#keyring-authentication","title":"Keyring authentication","text":"<p>Currently, pixi supports the uv method of authentication through the python keyring library.</p>"},{"location":"advanced/authentication/#installing-keyring","title":"Installing keyring","text":"<p>To install keyring you can use pixi global install:</p> Basic AuthGoogle Artifact RegistryAzure DevOps Artifacts <pre><code>pixi global install keyring\n</code></pre> <pre><code>pixi global install keyring --with keyrings.google-artifactregistry-auth\n</code></pre> <pre><code>pixi global install keyring --with keyring.artifacts\n</code></pre> <p>For other registries, you will need to adapt these instructions to add the right keyring backend.</p>"},{"location":"advanced/authentication/#configuring-your-project-to-use-keyring","title":"Configuring your project to use keyring","text":"Basic AuthGoogle Artifact RegistryAzure DevOps Artifacts <p>Use keyring to store your credentials e.g:</p> <pre><code>keyring set https://my-index/simple your_username\n# prompt will appear for your password\n</code></pre> <p>Add the following configuration to your pixi manifest, making sure to include <code>your_username@</code> in the URL of the registry:</p> <pre><code>[pypi-options]\nindex-url = \"https://your_username@custom-registry.com/simple\"\n</code></pre> <p>After making sure you are logged in, for instance by running <code>gcloud auth login</code>, add the following configuration to your pixi manifest:</p> <pre><code>[pypi-options]\nextra-index-urls = [\"https://oauth2accesstoken@&lt;location&gt;-python.pkg.dev/&lt;project&gt;/&lt;repository&gt;/simple\"]\n</code></pre> <p>Note</p> <p>To find this URL more easily, you can use the <code>gcloud</code> command:</p> <pre><code>gcloud artifacts print-settings python --project=&lt;project&gt; --repository=&lt;repository&gt; --location=&lt;location&gt;\n</code></pre> <p>After following the <code>keyring.artifacts</code> instructions and making sure that keyring works correctly, add the following configuration to your pixi manifest:</p> <pre><code>[pypi-options]\nextra-index-urls = [\"https://VssSessionToken@pkgs.dev.azure.com/{organization}/{project}/_packaging/{feed}/pypi/simple/\"]\n</code></pre>"},{"location":"advanced/authentication/#installing-your-environment","title":"Installing your environment","text":"<p>Either configure your Global Config, or use the flag <code>--pypi-keyring-provider</code> which can either be set to <code>subprocess</code> (activated) or <code>disabled</code>:</p> <pre><code># From an existing pixi project\npixi install --pypi-keyring-provider subprocess\n</code></pre>"},{"location":"advanced/authentication/#netrc-file","title":"<code>.netrc</code> file","text":"<p><code>pixi</code> allows you to access private registries securely by authenticating with credentials stored in a <code>.netrc</code> file.</p> <ul> <li>The <code>.netrc</code> file can be stored in your home directory (<code>$HOME/.netrc</code> for Unix-like systems)</li> <li>or in the user profile directory on Windows (<code>%HOME%\\_netrc</code>).</li> <li>You can also set up a different location for it using the <code>NETRC</code> variable (<code>export NETRC=/my/custom/location/.netrc</code>).   e.g <code>export NETRC=/my/custom/location/.netrc pixi install</code></li> </ul> <p>In the <code>.netrc</code> file, you store authentication details like this:</p> <p><pre><code>machine registry-name\nlogin admin\npassword admin\n</code></pre> For more details, you can access the .netrc docs.</p>"},{"location":"advanced/channel_priority/","title":"Channel Logic","text":"<p>All logic regarding the decision which dependencies can be installed from which channel is done by the instruction we give the solver.</p> <p>The actual code regarding this is in the <code>rattler_solve</code> crate. This might however be hard to read. Therefore, this document will continue with simplified flow charts.</p>"},{"location":"advanced/channel_priority/#channel-specific-dependencies","title":"Channel specific dependencies","text":"<p>When a user defines a channel per dependency, the solver needs to know the other channels are unusable for this dependency. <pre><code>[project]\nchannels = [\"conda-forge\", \"my-channel\"]\n\n[dependencies]\npackgex = { version = \"*\", channel = \"my-channel\" }\n</code></pre> In the <code>packagex</code> example, the solver will understand that the package is only available in <code>my-channel</code> and will not look for it in <code>conda-forge</code>.</p> <p>The flowchart of the logic that excludes all other channels:</p> <pre><code>flowchart TD\n    A[Start] --&gt; B[Given a Dependency]\n    B --&gt; C{Channel Specific Dependency?}\n    C --&gt;|Yes| D[Exclude All Other Channels for This Package]\n    C --&gt;|No| E{Any Other Dependencies?}\n    E --&gt;|Yes| B\n    E --&gt;|No| F[End]\n    D --&gt; E</code></pre>"},{"location":"advanced/channel_priority/#channel-priority","title":"Channel priority","text":"<p>Channel priority is dictated by the order in the <code>project.channels</code> array, where the first channel is the highest priority. For instance: <pre><code>[project]\nchannels = [\"conda-forge\", \"my-channel\", \"your-channel\"]\n</code></pre> If the package is found in <code>conda-forge</code> the solver will not look for it in <code>my-channel</code> and <code>your-channel</code>, because it tells the solver they are excluded. If the package is not found in <code>conda-forge</code> the solver will look for it in <code>my-channel</code> and if it is found there it will tell the solver to exclude <code>your-channel</code> for this package. This diagram explains the logic: <pre><code>flowchart TD\n    A[Start] --&gt; B[Given a Dependency]\n    B --&gt; C{Loop Over Channels}\n    C --&gt; D{Package in This Channel?}\n    D --&gt;|No| C\n    D --&gt;|Yes| E{\"This the first channel\n     for this package?\"}\n    E --&gt;|Yes| F[Include Package in Candidates]\n    E --&gt;|No| G[Exclude Package from Candidates]\n    F --&gt; H{Any Other Channels?}\n    G --&gt; H\n    H --&gt;|Yes| C\n    H --&gt;|No| I{Any Other Dependencies?}\n    I --&gt;|No| J[End]\n    I --&gt;|Yes| B</code></pre></p> <p>This method ensures the solver only adds a package to the candidates if it's found in the highest priority channel available. If you have 10 channels and the package is found in the 5th channel it will exclude the next 5 channels from the candidates if they also contain the package.</p>"},{"location":"advanced/channel_priority/#use-case-pytorch-and-nvidia-with-conda-forge","title":"Use case: pytorch and nvidia with conda-forge","text":"<p>A common use case is to use <code>pytorch</code> with <code>nvidia</code> drivers, while also needing the <code>conda-forge</code> channel for the main dependencies. <pre><code>[project]\nchannels = [\"nvidia/label/cuda-11.8.0\", \"nvidia\", \"conda-forge\", \"pytorch\"]\nplatforms = [\"linux-64\"]\n\n[dependencies]\ncuda = {version = \"*\", channel=\"nvidia/label/cuda-11.8.0\"}\npytorch = {version = \"2.0.1.*\", channel=\"pytorch\"}\ntorchvision = {version = \"0.15.2.*\", channel=\"pytorch\"}\npytorch-cuda = {version = \"11.8.*\", channel=\"pytorch\"}\npython = \"3.10.*\"\n</code></pre> What this will do is get as much as possible from the <code>nvidia/label/cuda-11.8.0</code> channel, which is actually only the <code>cuda</code> package.</p> <p>Then it will get all packages from the <code>nvidia</code> channel, which is a little more and some packages overlap the <code>nvidia</code> and <code>conda-forge</code> channel. Like the <code>cuda-cudart</code> package, which will now only be retrieved from the <code>nvidia</code> channel because of the priority logic.</p> <p>Then it will get the packages from the <code>conda-forge</code> channel, which is the main channel for the dependencies.</p> <p>But the user only wants the pytorch packages from the <code>pytorch</code> channel, which is why <code>pytorch</code> is added last and the dependencies are added as channel specific dependencies.</p> <p>We don't define the <code>pytorch</code> channel before <code>conda-forge</code> because we want to get as much as possible from the <code>conda-forge</code> as the pytorch channel is not always shipping the best versions of all packages.</p> <p>For example, it also ships the <code>ffmpeg</code> package, but only an old version which doesn't work with the newer pytorch versions. Thus breaking the installation if we would skip the <code>conda-forge</code> channel for <code>ffmpeg</code> with the priority logic.</p>"},{"location":"advanced/channel_priority/#force-a-specific-channel-priority","title":"Force a specific channel priority","text":"<p>If you want to force a specific priority for a channel, you can use the <code>priority</code> (int) key in the channel definition. The higher the number, the higher the priority. Non specified priorities are set to 0 but the index in the array still counts as a priority, where the first in the list has the highest priority.</p> <p>This priority definition is mostly important for multiple environments with different channel priorities, as by default feature channels are prepended to the project channels.</p> <p><pre><code>[project]\nname = \"test_channel_priority\"\nplatforms = [\"linux-64\", \"osx-64\", \"win-64\", \"osx-arm64\"]\nchannels = [\"conda-forge\"]\n\n[feature.a]\nchannels = [\"nvidia\"]\n\n[feature.b]\nchannels = [ \"pytorch\", {channel = \"nvidia\", priority = 1}]\n\n[feature.c]\nchannels = [ \"pytorch\", {channel = \"nvidia\", priority = -1}]\n\n[environments]\na = [\"a\"]\nb = [\"b\"]\nc = [\"c\"]\n</code></pre> This example creates 4 environments, <code>a</code>, <code>b</code>, <code>c</code>, and the default environment. Which will have the following channel order:</p> Environment Resulting Channels order default <code>conda-forge</code> a <code>nvidia</code>, <code>conda-forge</code> b <code>nvidia</code>, <code>pytorch</code>, <code>conda-forge</code> c <code>pytorch</code>, <code>conda-forge</code>, <code>nvidia</code> Check priority result with <code>pixi info</code> <p>Using <code>pixi info</code> you can check the priority of the channels in the environment. <pre><code>pixi info\nEnvironments\n------------\n       Environment: default\n          Features: default\n          Channels: conda-forge\nDependency count: 0\nTarget platforms: linux-64\n\n       Environment: a\n          Features: a, default\n          Channels: nvidia, conda-forge\nDependency count: 0\nTarget platforms: linux-64\n\n       Environment: b\n          Features: b, default\n          Channels: nvidia, pytorch, conda-forge\nDependency count: 0\nTarget platforms: linux-64\n\n       Environment: c\n          Features: c, default\n          Channels: pytorch, conda-forge, nvidia\nDependency count: 0\nTarget platforms: linux-64\n</code></pre></p>"},{"location":"advanced/explain_info_command/","title":"Info command","text":"<p><code>pixi info</code> prints out useful information to debug a situation or to get an overview of your machine/project. This information can also be retrieved in <code>json</code> format using the <code>--json</code> flag, which can be useful for programmatically reading it.</p> Running pixi info in the pixi repo<pre><code>\u279c pixi info\n      Pixi version: 0.13.0\n          Platform: linux-64\n  Virtual packages: __unix=0=0\n                  : __linux=6.5.12=0\n                  : __glibc=2.36=0\n                  : __cuda=12.3=0\n                  : __archspec=1=x86_64\n         Cache dir: /home/user/.cache/rattler/cache\n      Auth storage: /home/user/.rattler/credentials.json\n\nProject\n------------\n           Version: 0.13.0\n     Manifest file: /home/user/development/pixi/pixi.toml\n      Last updated: 25-01-2024 10:29:08\n\nEnvironments\n------------\ndefault\n          Features: default\n          Channels: conda-forge\n  Dependency count: 10\n      Dependencies: pre-commit, rust, openssl, pkg-config, git, mkdocs, mkdocs-material, pillow, cairosvg, compilers\n  Target platforms: linux-64, osx-arm64, win-64, osx-64\n             Tasks: docs, test-all, test, build, lint, install, build-docs\n</code></pre>"},{"location":"advanced/explain_info_command/#global-info","title":"Global info","text":"<p>The first part of the info output is information that is always available and tells you what pixi can read on your machine.</p>"},{"location":"advanced/explain_info_command/#platform","title":"Platform","text":"<p>This defines the platform you're currently on according to pixi. If this is incorrect, please file an issue on the pixi repo.</p>"},{"location":"advanced/explain_info_command/#virtual-packages","title":"Virtual packages","text":"<p>The virtual packages that pixi can find on your machine.</p> <p>In the Conda ecosystem, you can depend on virtual packages. These packages aren't real dependencies that are going to be installed, but rather are being used in the solve step to find if a package can be installed on the machine. A simple example: When a package depends on Cuda drivers being present on the host machine it can do that by depending on the <code>__cuda</code> virtual package. In that case, if pixi cannot find the <code>__cuda</code> virtual package on your machine the installation will fail.</p>"},{"location":"advanced/explain_info_command/#cache-dir","title":"Cache dir","text":"<p>The directory where pixi stores its cache. Checkout the cache documentation for more information.</p>"},{"location":"advanced/explain_info_command/#auth-storage","title":"Auth storage","text":"<p>Check the authentication documentation</p>"},{"location":"advanced/explain_info_command/#cache-size","title":"Cache size","text":"<p>[requires <code>--extended</code>]</p> <p>The size of the previously mentioned \"Cache dir\" in Mebibytes.</p>"},{"location":"advanced/explain_info_command/#project-info","title":"Project info","text":"<p>Everything below <code>Project</code> is info about the project you're currently in. This info is only available if your path has a manifest file.</p>"},{"location":"advanced/explain_info_command/#manifest-file","title":"Manifest file","text":"<p>The path to the manifest file that describes the project.</p>"},{"location":"advanced/explain_info_command/#last-updated","title":"Last updated","text":"<p>The last time the lock file was updated, either manually or by pixi itself.</p>"},{"location":"advanced/explain_info_command/#environment-info","title":"Environment info","text":"<p>The environment info defined per environment. If you don't have any environments defined, this will only show the <code>default</code> environment.</p>"},{"location":"advanced/explain_info_command/#features","title":"Features","text":"<p>This lists which features are enabled in the environment. For the default this is only <code>default</code></p>"},{"location":"advanced/explain_info_command/#channels","title":"Channels","text":"<p>The list of channels used in this environment.</p>"},{"location":"advanced/explain_info_command/#dependency-count","title":"Dependency count","text":"<p>The amount of dependencies defined that are defined for this environment (not the amount of installed dependencies).</p>"},{"location":"advanced/explain_info_command/#dependencies","title":"Dependencies","text":"<p>The list of dependencies defined for this environment.</p>"},{"location":"advanced/explain_info_command/#target-platforms","title":"Target platforms","text":"<p>The platforms the project has defined.</p>"},{"location":"advanced/github_actions/","title":"GitHub Action","text":"<p>We created prefix-dev/setup-pixi to facilitate using pixi in CI.</p>"},{"location":"advanced/github_actions/#usage","title":"Usage","text":"<pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    pixi-version: v0.34.0\n    cache: true\n    auth-host: prefix.dev\n    auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}\n- run: pixi run test\n</code></pre> <p>Pin your action versions</p> <p>Since pixi is not yet stable, the API of this action may change between minor versions. Please pin the versions of this action to a specific version (i.e., <code>prefix-dev/setup-pixi@v0.8.0</code>) to avoid breaking changes. You can automatically update the version of this action by using Dependabot.</p> <p>Put the following in your <code>.github/dependabot.yml</code> file to enable Dependabot for your GitHub Actions:</p> .github/dependabot.yml<pre><code>version: 2\nupdates:\n  - package-ecosystem: github-actions\n    directory: /\n    schedule:\n      interval: monthly # (1)!\n    groups:\n      dependencies:\n        patterns:\n          - \"*\"\n</code></pre> <ol> <li>or <code>daily</code>, <code>weekly</code></li> </ol>"},{"location":"advanced/github_actions/#features","title":"Features","text":"<p>To see all available input arguments, see the <code>action.yml</code> file in <code>setup-pixi</code>. The most important features are described below.</p>"},{"location":"advanced/github_actions/#caching","title":"Caching","text":"<p>The action supports caching of the pixi environment. By default, caching is enabled if a <code>pixi.lock</code> file is present. It will then use the <code>pixi.lock</code> file to generate a hash of the environment and cache it. If the cache is hit, the action will skip the installation and use the cached environment. You can specify the behavior by setting the <code>cache</code> input argument.</p> <p>Customize your cache key</p> <p>If you need to customize your cache-key, you can use the <code>cache-key</code> input argument. This will be the prefix of the cache key. The full cache key will be <code>&lt;cache-key&gt;&lt;conda-arch&gt;-&lt;hash&gt;</code>.</p> <p>Only save caches on <code>main</code></p> <p>In order to not exceed the 10 GB cache size limit as fast, you might want to restrict when the cache is saved. This can be done by setting the <code>cache-write</code> argument.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    cache: true\n    cache-write: ${{ github.event_name == 'push' &amp;&amp; github.ref_name == 'main' }}\n</code></pre>"},{"location":"advanced/github_actions/#multiple-environments","title":"Multiple environments","text":"<p>With pixi, you can create multiple environments for different requirements. You can also specify which environment(s) you want to install by setting the <code>environments</code> input argument. This will install all environments that are specified and cache them.</p> <pre><code>[project]\nname = \"my-package\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"]\n\n[dependencies]\npython = \"&gt;=3.11\"\npip = \"*\"\npolars = \"&gt;=0.14.24,&lt;0.21\"\n\n[feature.py311.dependencies]\npython = \"3.11.*\"\n[feature.py312.dependencies]\npython = \"3.12.*\"\n\n[environments]\npy311 = [\"py311\"]\npy312 = [\"py312\"]\n</code></pre>"},{"location":"advanced/github_actions/#multiple-environments-using-a-matrix","title":"Multiple environments using a matrix","text":"<p>The following example will install the <code>py311</code> and <code>py312</code> environments in different jobs.</p> <pre><code>test:\n  runs-on: ubuntu-latest\n  strategy:\n    matrix:\n      environment: [py311, py312]\n  steps:\n  - uses: actions/checkout@v4\n  - uses: prefix-dev/setup-pixi@v0.8.0\n    with:\n      environments: ${{ matrix.environment }}\n</code></pre>"},{"location":"advanced/github_actions/#install-multiple-environments-in-one-job","title":"Install multiple environments in one job","text":"<p>The following example will install both the <code>py311</code> and the <code>py312</code> environment on the runner.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    environments: &gt;- # (1)!\n      py311\n      py312\n- run: |\n  pixi run -e py311 test\n  pixi run -e py312 test\n</code></pre> <ol> <li> <p>separated by spaces, equivalent to</p> <pre><code>environments: py311 py312\n</code></pre> </li> </ol> <p>Caching behavior if you don't specify environments</p> <p>If you don't specify any environment, the <code>default</code> environment will be installed and cached, even if you use other environments.</p>"},{"location":"advanced/github_actions/#authentication","title":"Authentication","text":"<p>There are currently three ways to authenticate with pixi:</p> <ul> <li>using a token</li> <li>using a username and password</li> <li>using a conda-token</li> </ul> <p>For more information, see Authentication.</p> <p>Handle secrets with care</p> <p>Please only store sensitive information using GitHub secrets. Do not store them in your repository. When your sensitive information is stored in a GitHub secret, you can access it using the <code>${{ secrets.SECRET_NAME }}</code> syntax. These secrets will always be masked in the logs.</p>"},{"location":"advanced/github_actions/#token","title":"Token","text":"<p>Specify the token using the <code>auth-token</code> input argument. This form of authentication (bearer token in the request headers) is mainly used at prefix.dev.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    auth-host: prefix.dev\n    auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}\n</code></pre>"},{"location":"advanced/github_actions/#username-and-password","title":"Username and password","text":"<p>Specify the username and password using the <code>auth-username</code> and <code>auth-password</code> input arguments. This form of authentication (HTTP Basic Auth) is used in some enterprise environments with artifactory for example.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    auth-host: custom-artifactory.com\n    auth-username: ${{ secrets.PIXI_USERNAME }}\n    auth-password: ${{ secrets.PIXI_PASSWORD }}\n</code></pre>"},{"location":"advanced/github_actions/#conda-token","title":"Conda-token","text":"<p>Specify the conda-token using the <code>conda-token</code> input argument. This form of authentication (token is encoded in URL: <code>https://my-quetz-instance.com/t/&lt;token&gt;/get/custom-channel</code>) is used at anaconda.org or with quetz instances.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    auth-host: anaconda.org # (1)!\n    conda-token: ${{ secrets.CONDA_TOKEN }}\n</code></pre> <ol> <li>or my-quetz-instance.com</li> </ol>"},{"location":"advanced/github_actions/#custom-shell-wrapper","title":"Custom shell wrapper","text":"<p><code>setup-pixi</code> allows you to run command inside of the pixi environment by specifying a custom shell wrapper with <code>shell: pixi run bash -e {0}</code>. This can be useful if you want to run commands inside of the pixi environment, but don't want to use the <code>pixi run</code> command for each command.</p> <pre><code>- run: | # (1)!\n    python --version\n    pip install --no-deps -e .\n  shell: pixi run bash -e {0}\n</code></pre> <ol> <li>everything here will be run inside of the pixi environment</li> </ol> <p>You can even run Python scripts like this:</p> <pre><code>- run: | # (1)!\n    import my_package\n    print(\"Hello world!\")\n  shell: pixi run python {0}\n</code></pre> <ol> <li>everything here will be run inside of the pixi environment</li> </ol> <p>If you want to use PowerShell, you need to specify <code>-Command</code> as well.</p> <pre><code>- run: | # (1)!\n    python --version | Select-String \"3.11\"\n  shell: pixi run pwsh -Command {0} # pwsh works on all platforms\n</code></pre> <ol> <li>everything here will be run inside of the pixi environment</li> </ol> <p>How does it work under the hood?</p> <p>Under the hood, the <code>shell: xyz {0}</code> option is implemented by creating a temporary script file and calling <code>xyz</code> with that script file as an argument. This file does not have the executable bit set, so you cannot use <code>shell: pixi run {0}</code> directly but instead have to use <code>shell: pixi run bash {0}</code>. There are some custom shells provided by GitHub that have slightly different behavior, see <code>jobs.&lt;job_id&gt;.steps[*].shell</code> in the documentation. See the official documentation and ADR 0277 for more information about how the <code>shell:</code> input works in GitHub Actions.</p>"},{"location":"advanced/github_actions/#one-off-shell-wrapper-using-pixi-exec","title":"One-off shell wrapper using <code>pixi exec</code>","text":"<p>With <code>pixi exec</code>, you can also run a one-off command inside a temporary pixi environment.</p> <pre><code>- run: | # (1)!\n    zstd --version\n  shell: pixi exec --spec zstd -- bash -e {0}\n</code></pre> <ol> <li>everything here will be run inside of the temporary pixi environment</li> </ol> <pre><code>- run: | # (1)!\n    import ruamel.yaml\n    # ...\n  shell: pixi exec --spec python=3.11.* --spec ruamel.yaml -- python {0}\n</code></pre> <ol> <li>everything here will be run inside of the temporary pixi environment</li> </ol> <p>See here for more information about <code>pixi exec</code>.</p>"},{"location":"advanced/github_actions/#environment-activation","title":"Environment activation","text":"<p>Instead of using a custom shell wrapper, you can also make all pixi-installed binaries available to subsequent steps by \"activating\" the installed environment in the currently running job. To this end, <code>setup-pixi</code> adds all environment variables set when executing <code>pixi run</code> to <code>$GITHUB_ENV</code> and, similarly, adds all path modifications to <code>$GITHUB_PATH</code>. As a result, all installed binaries can be accessed without having to call <code>pixi run</code>.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    activate-environment: true\n</code></pre> <p>If you are installing multiple environments, you will need to specify the name of the environment that you want to be activated.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    environments: &gt;-\n      py311\n      py312\n    activate-environment: py311\n</code></pre> <p>Activating an environment may be more useful than using a custom shell wrapper as it allows non-shell based steps to access binaries on the path. However, be aware that this option augments the environment of your job.</p>"},{"location":"advanced/github_actions/#-frozen-and-locked","title":"<code>--frozen</code> and <code>--locked</code>","text":"<p>You can specify whether <code>setup-pixi</code> should run <code>pixi install --frozen</code> or <code>pixi install --locked</code> depending on the <code>frozen</code> or the <code>locked</code> input argument. See the official documentation for more information about the <code>--frozen</code> and <code>--locked</code> flags.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    locked: true\n    # or\n    frozen: true\n</code></pre> <p>If you don't specify anything, the default behavior is to run <code>pixi install --locked</code> if a <code>pixi.lock</code> file is present and <code>pixi install</code> otherwise.</p>"},{"location":"advanced/github_actions/#debugging","title":"Debugging","text":"<p>There are two types of debug logging that you can enable.</p>"},{"location":"advanced/github_actions/#debug-logging-of-the-action","title":"Debug logging of the action","text":"<p>The first one is the debug logging of the action itself. This can be enabled by for the action by re-running the action in debug mode:</p> <p> </p> <p>Debug logging documentation</p> <p>For more information about debug logging in GitHub Actions, see the official documentation.</p>"},{"location":"advanced/github_actions/#debug-logging-of-pixi","title":"Debug logging of pixi","text":"<p>The second type is the debug logging of the pixi executable. This can be specified by setting the <code>log-level</code> input.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    log-level: vvv # (1)!\n</code></pre> <ol> <li>One of <code>q</code>, <code>default</code>, <code>v</code>, <code>vv</code>, or <code>vvv</code>.</li> </ol> <p>If nothing is specified, <code>log-level</code> will default to <code>default</code> or <code>vv</code> depending on if debug logging is enabled for the action.</p>"},{"location":"advanced/github_actions/#self-hosted-runners","title":"Self-hosted runners","text":"<p>On self-hosted runners, it may happen that some files are persisted between jobs. This can lead to problems or secrets getting leaked between job runs. To avoid this, you can use the <code>post-cleanup</code> input to specify the post cleanup behavior of the action (i.e., what happens after all your commands have been executed).</p> <p>If you set <code>post-cleanup</code> to <code>true</code>, the action will delete the following files:</p> <ul> <li><code>.pixi</code> environment</li> <li>the pixi binary</li> <li>the rattler cache</li> <li>other rattler files in <code>~/.rattler</code></li> </ul> <p>If nothing is specified, <code>post-cleanup</code> will default to <code>true</code>.</p> <p>On self-hosted runners, you also might want to alter the default pixi install location to a temporary location. You can use <code>pixi-bin-path: ${{ runner.temp }}/bin/pixi</code> to do this.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    post-cleanup: true\n    pixi-bin-path: ${{ runner.temp }}/bin/pixi # (1)!\n</code></pre> <ol> <li><code>${{ runner.temp }}\\Scripts\\pixi.exe</code> on Windows</li> </ol> <p>You can also use a preinstalled local version of pixi on the runner by not setting any of the <code>pixi-version</code>, <code>pixi-url</code> or <code>pixi-bin-path</code> inputs. This action will then try to find a local version of pixi in the runner's PATH.</p>"},{"location":"advanced/github_actions/#using-the-pyprojecttoml-as-a-manifest-file-for-pixi","title":"Using the <code>pyproject.toml</code> as a manifest file for pixi.","text":"<p><code>setup-pixi</code> will automatically pick up the <code>pyproject.toml</code> if it contains a <code>[tool.pixi.project]</code> section and no <code>pixi.toml</code>. This can be overwritten by setting the <code>manifest-path</code> input argument.</p> <pre><code>- uses: prefix-dev/setup-pixi@v0.8.0\n  with:\n    manifest-path: pyproject.toml\n</code></pre>"},{"location":"advanced/github_actions/#more-examples","title":"More examples","text":"<p>If you want to see more examples, you can take a look at the GitHub Workflows of the <code>setup-pixi</code> repository.</p>"},{"location":"advanced/production_deployment/","title":"Bringing pixi to production","text":"<p>You can bring pixi projects into production by either containerizing it using tools like Docker or by using <code>quantco/pixi-pack</code>.</p> <p>@pavelzw from QuantCo wrote a blog post about bringing pixi to production. You can read it here.</p>"},{"location":"advanced/production_deployment/#docker","title":"Docker","text":"<p>We provide a simple docker image at <code>pixi-docker</code> that contains the pixi executable on top of different base images.</p> <p>The images are available on ghcr.io/prefix-dev/pixi.</p> <p>There are different tags for different base images available:</p> <ul> <li><code>latest</code> - based on <code>ubuntu:jammy</code></li> <li><code>focal</code> - based on <code>ubuntu:focal</code></li> <li><code>bullseye</code> - based on <code>debian:bullseye</code></li> <li><code>jammy-cuda-12.2.2</code> - based on <code>nvidia/cuda:12.2.2-jammy</code></li> <li>... and more</li> </ul> <p>All tags</p> <p>For all tags, take a look at the build script.</p>"},{"location":"advanced/production_deployment/#example-usage","title":"Example usage","text":"<p>The following example uses the pixi docker image as a base image for a multi-stage build. It also makes use of <code>pixi shell-hook</code> to not rely on pixi being installed in the production container.</p> <p>More examples</p> <p>For more examples, take a look at pavelzw/pixi-docker-example.</p> <pre><code>FROM ghcr.io/prefix-dev/pixi:0.34.0 AS build\n\n# copy source code, pixi.toml and pixi.lock to the container\nWORKDIR /app\nCOPY . .\n# install dependencies to `/app/.pixi/envs/prod`\n# use `--locked` to ensure the lockfile is up to date with pixi.toml\nRUN pixi install --locked -e prod\n# create the shell-hook bash script to activate the environment\nRUN pixi shell-hook -e prod -s bash &gt; /shell-hook\nRUN echo \"#!/bin/bash\" &gt; /app/entrypoint.sh\nRUN cat /shell-hook &gt;&gt; /app/entrypoint.sh\n# extend the shell-hook script to run the command passed to the container\nRUN echo 'exec \"$@\"' &gt;&gt; /app/entrypoint.sh\n\nFROM ubuntu:24.04 AS production\nWORKDIR /app\n# only copy the production environment into prod container\n# please note that the \"prefix\" (path) needs to stay the same as in the build container\nCOPY --from=build /app/.pixi/envs/prod /app/.pixi/envs/prod\nCOPY --from=build --chmod=0755 /app/entrypoint.sh /app/entrypoint.sh\n# copy your project code into the container as well\nCOPY ./my_project /app/my_project\n\nEXPOSE 8000\nENTRYPOINT [ \"/app/entrypoint.sh\" ]\n# run your app inside the pixi environment\nCMD [ \"uvicorn\", \"my_project:app\", \"--host\", \"0.0.0.0\" ]\n</code></pre>"},{"location":"advanced/production_deployment/#pixi-pack","title":"pixi-pack","text":"<p><code>pixi-pack</code> is a simple tool that takes a pixi environment and packs it into a compressed archive that can be shipped to the target machine.</p> <p>It can be installed via</p> <pre><code>pixi global install pixi-pack\n</code></pre> <p>Or by downloading our pre-built binaries from the releases page.</p> <p>Instead of installing pixi-pack globally, you can also use pixi exec to run <code>pixi-pack</code> in a temporary environment:</p> <pre><code>pixi exec pixi-pack pack\npixi exec pixi-pack unpack environment.tar\n</code></pre> <p> </p> <p>You can pack an environment with</p> <pre><code>pixi-pack pack --manifest-file pixi.toml --environment prod --platform linux-64\n</code></pre> <p>This will create a <code>environment.tar</code> file that contains all conda packages required to create the environment.</p> <pre><code># environment.tar\n| pixi-pack.json\n| environment.yml\n| channel\n|    \u251c\u2500\u2500 noarch\n|    |    \u251c\u2500\u2500 tzdata-2024a-h0c530f3_0.conda\n|    |    \u251c\u2500\u2500 ...\n|    |    \u2514\u2500\u2500 repodata.json\n|    \u2514\u2500\u2500 linux-64\n|         \u251c\u2500\u2500 ca-certificates-2024.2.2-hbcca054_0.conda\n|         \u251c\u2500\u2500 ...\n|         \u2514\u2500\u2500 repodata.json\n</code></pre>"},{"location":"advanced/production_deployment/#unpacking-an-environment","title":"Unpacking an environment","text":"<p>With <code>pixi-pack unpack environment.tar</code>, you can unpack the environment on your target system. This will create a new conda environment in <code>./env</code> that contains all packages specified in your <code>pixi.toml</code>. It also creates an <code>activate.sh</code> (or <code>activate.bat</code> on Windows) file that lets you activate the environment without needing to have <code>conda</code> or <code>micromamba</code> installed.</p>"},{"location":"advanced/production_deployment/#cross-platform-packs","title":"Cross-platform packs","text":"<p>Since <code>pixi-pack</code> just downloads the <code>.conda</code> and <code>.tar.bz2</code> files from the conda repositories, you can trivially create packs for different platforms.</p> <pre><code>pixi-pack pack --platform win-64\n</code></pre> <p>You can only unpack a pack on a system that has the same platform as the pack was created for.</p>"},{"location":"advanced/production_deployment/#inject-additional-packages","title":"Inject additional packages","text":"<p>You can inject additional packages into the environment that are not specified in <code>pixi.lock</code> by using the <code>--inject</code> flag:</p> <pre><code>pixi-pack pack --inject local-package-1.0.0-hbefa133_0.conda --manifest-pack pixi.toml\n</code></pre> <p>This can be particularly useful if you build the project itself and want to include the built package in the environment but still want to use <code>pixi.lock</code> from the project.</p>"},{"location":"advanced/production_deployment/#unpacking-without-pixi-pack","title":"Unpacking without pixi-pack","text":"<p>If you don't have <code>pixi-pack</code> available on your target system, you can still install the environment if you have <code>conda</code> or <code>micromamba</code> available. Just unarchive the <code>environment.tar</code>, then you have a local channel on your system where all necessary packages are available. Next to this local channel, you will find an <code>environment.yml</code> file that contains the environment specification. You can then install the environment using <code>conda</code> or <code>micromamba</code>:</p> <pre><code>tar -xvf environment.tar\nmicromamba create -p ./env --file environment.yml\n# or\nconda env create -p ./env --file environment.yml\n</code></pre> <p>The <code>environment.yml</code> and <code>repodata.json</code> files are only for this use case, <code>pixi-pack unpack</code> does not use them.</p>"},{"location":"advanced/pyproject_toml/","title":"<code>pyproject.toml</code> in pixi","text":"<p>We support the use of the <code>pyproject.toml</code> as our manifest file in pixi. This allows the user to keep one file with all configuration. The <code>pyproject.toml</code> file is a standard for Python projects. We don't advise to use the <code>pyproject.toml</code> file for anything else than python projects, the <code>pixi.toml</code> is better suited for other types of projects.</p>"},{"location":"advanced/pyproject_toml/#initial-setup-of-the-pyprojecttoml-file","title":"Initial setup of the <code>pyproject.toml</code> file","text":"<p>When you already have a <code>pyproject.toml</code> file in your project, you can run <code>pixi init</code> in a that folder. Pixi will automatically</p> <ul> <li>Add a <code>[tool.pixi.project]</code> section to the file, with the platform and channel information required by pixi;</li> <li>Add the current project as an editable pypi dependency;</li> <li>Add some defaults to the <code>.gitignore</code> and <code>.gitattributes</code> files.</li> </ul> <p>If you do not have an existing <code>pyproject.toml</code> file , you can run <code>pixi init --format pyproject</code> in your project folder. In that case, pixi will create a <code>pyproject.toml</code> manifest from scratch with some sane defaults.</p>"},{"location":"advanced/pyproject_toml/#python-dependency","title":"Python dependency","text":"<p>The <code>pyproject.toml</code> file supports the <code>requires_python</code> field. Pixi understands that field and automatically adds the version to the dependencies.</p> <p>This is an example of a <code>pyproject.toml</code> file with the <code>requires_python</code> field, which will be used as the python dependency:</p> pyproject.toml<pre><code>[project]\nname = \"my_project\"\nrequires-python = \"&gt;=3.9\"\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n</code></pre> <p>Which is equivalent to:</p> equivalent pixi.toml<pre><code>[project]\nname = \"my_project\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[dependencies]\npython = \"&gt;=3.9\"\n</code></pre>"},{"location":"advanced/pyproject_toml/#dependency-section","title":"Dependency section","text":"<p>The <code>pyproject.toml</code> file supports the <code>dependencies</code> field. Pixi understands that field and automatically adds the dependencies to the project as <code>[pypi-dependencies]</code>.</p> <p>This is an example of a <code>pyproject.toml</code> file with the <code>dependencies</code> field:</p> pyproject.toml<pre><code>[project]\nname = \"my_project\"\nrequires-python = \"&gt;=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n]\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n</code></pre> <p>Which is equivalent to:</p> equivalent pixi.toml<pre><code>[project]\nname = \"my_project\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[pypi-dependencies]\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\n\n[dependencies]\npython = \"&gt;=3.9\"\n</code></pre> <p>You can overwrite these with conda dependencies by adding them to the <code>dependencies</code> field:</p> pyproject.toml<pre><code>[project]\nname = \"my_project\"\nrequires-python = \"&gt;=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n]\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tool.pixi.dependencies]\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\n</code></pre> <p>This would result in the conda dependencies being installed and the pypi dependencies being ignored. As pixi takes the conda dependencies over the pypi dependencies.</p>"},{"location":"advanced/pyproject_toml/#optional-dependencies","title":"Optional dependencies","text":"<p>If your python project includes groups of optional dependencies, pixi will automatically interpret them as pixi features of the same name with the associated <code>pypi-dependencies</code>.</p> <p>You can add them to pixi environments manually, or use <code>pixi init</code> to setup the project, which will create one environment per feature. Self-references to other groups of optional dependencies are also handled.</p> <p>For instance, imagine you have a project folder with a <code>pyproject.toml</code> file similar to:</p> <pre><code>[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\nall = [\"package2\",\"my_project[test]\"]\n</code></pre> <p>Running <code>pixi init</code> in that project folder will transform the <code>pyproject.toml</code> file into:</p> <pre><code>[project]\nname = \"my_project\"\ndependencies = [\"package1\"]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\nall = [\"package2\",\"my_project[test]\"]\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"] # if executed on linux\n\n[tool.pixi.environments]\ndefault = {features = [], solve-group = \"default\"}\ntest = {features = [\"test\"], solve-group = \"default\"}\nall = {features = [\"all\", \"test\"], solve-group = \"default\"}\n</code></pre> <p>In this example, three environments will be created by pixi:</p> <ul> <li>default with 'package1' as pypi dependency</li> <li>test with 'package1' and 'pytest' as pypi dependencies</li> <li>all with 'package1', 'package2' and 'pytest' as pypi dependencies</li> </ul> <p>All environments will be solved together, as indicated by the common <code>solve-group</code>, and added to the lock file. You can edit the <code>[tool.pixi.environments]</code> section manually to adapt it to your use case (e.g. if you do not need a particular environment).</p>"},{"location":"advanced/pyproject_toml/#example","title":"Example","text":"<p>As the <code>pyproject.toml</code> file supports the full pixi spec with <code>[tool.pixi]</code> prepended an example would look like this:</p> pyproject.toml<pre><code>[project]\nname = \"my_project\"\nrequires-python = \"&gt;=3.9\"\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"matplotlib\",\n    \"ruff\",\n]\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tool.pixi.dependencies]\ncompilers = \"*\"\ncmake = \"*\"\n\n[tool.pixi.tasks]\nstart = \"python my_project/main.py\"\nlint = \"ruff lint\"\n\n[tool.pixi.system-requirements]\ncuda = \"11.0\"\n\n[tool.pixi.feature.test.dependencies]\npytest = \"*\"\n\n[tool.pixi.feature.test.tasks]\ntest = \"pytest\"\n\n[tool.pixi.environments]\ntest = [\"test\"]\n</code></pre>"},{"location":"advanced/pyproject_toml/#build-system-section","title":"Build-system section","text":"<p>The <code>pyproject.toml</code> file normally contains a <code>[build-system]</code> section. Pixi will use this section to build and install the project if it is added as a pypi path dependency.</p> <p>If the <code>pyproject.toml</code> file does not contain any <code>[build-system]</code> section, pixi will fall back to uv's default, which is equivalent to the below:</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"setuptools &gt;= 40.8.0\"]\nbuild-backend = \"setuptools.build_meta:__legacy__\"\n</code></pre> <p>Including a <code>[build-system]</code> section is highly recommended. If you are not sure of the build-backend you want to use, including the <code>[build-system]</code> section below in your <code>pyproject.toml</code> is a good starting point. <code>pixi init --format pyproject</code> defaults to <code>hatchling</code>. The advantages of <code>hatchling</code> over <code>setuptools</code> are outlined on its website.</p> pyproject.toml<pre><code>[build-system]\nbuild-backend = \"hatchling.build\"\nrequires = [\"hatchling\"]\n</code></pre>"},{"location":"advanced/updates_github_actions/","title":"Update lockfiles with GitHub Actions","text":"<p>You can leverage GitHub Actions in combination with pavelzw/pixi-diff-to-markdown to automatically update your lockfiles similar to dependabot or renovate in other ecosystems.</p> <p> </p> <p>Dependabot/Renovate support for pixi</p> <p>You can track native Dependabot support for pixi in dependabot/dependabot-core #2227 and for Renovate in renovatebot/renovate #2213.</p>"},{"location":"advanced/updates_github_actions/#how-to-use","title":"How to use","text":"<p>To get started, create a new GitHub Actions workflow file in your repository.</p> .github/workflows/update-lockfiles.yml<pre><code>name: Update lockfiles\n\npermissions: # (1)!\n  contents: write\n  pull-requests: write\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 0 5 1 * * # (2)!\n\njobs:\n  pixi-update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up pixi\n        uses: prefix-dev/setup-pixi@v0.8.1\n        with:\n          run-install: false\n      - name: Update lockfiles\n        run: |\n          set -o pipefail\n          pixi update --json | pixi exec pixi-diff-to-markdown &gt;&gt; diff.md\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@v7\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: Update pixi lockfile\n          title: Update pixi lockfile\n          body-path: diff.md\n          branch: update-pixi\n          base: main\n          labels: pixi\n          delete-branch: true\n          add-paths: pixi.lock\n</code></pre> <ol> <li>Needed for <code>peter-evans/create-pull-request</code></li> <li>Runs at 05:00, on day 1 of the month</li> </ol> <p>In order for this workflow to work, you need to set \"Allow GitHub Actions to create and approve pull requests\" to true in your repository settings (in \"Actions\" -&gt; \"General\").</p> <p>Tip</p> <p>If you don't have any <code>pypi-dependencies</code>, you can use <code>pixi update --json --no-install</code> to speed up diff generation.</p> <p> </p>"},{"location":"advanced/updates_github_actions/#triggering-ci-in-automated-prs","title":"Triggering CI in automated PRs","text":"<p>In order to prevent accidental recursive GitHub Workflow runs, GitHub decided to not trigger any workflows on automated PRs when using the default <code>GITHUB_TOKEN</code>. There are a couple of ways how to work around this limitation. You can find excellent documentation for this in <code>peter-evans/create-pull-request</code>, see here.</p>"},{"location":"advanced/updates_github_actions/#customizing-the-summary","title":"Customizing the summary","text":"<p>You can customize the summary by either using command-line-arguments of <code>pixi-diff-to-markdown</code> or by specifying the configuration in <code>pixi.toml</code> under <code>[tool.pixi-diff-to-markdown]</code>. See the pixi-diff-to-markdown documentation or run <code>pixi-diff-to-markdown --help</code> for more information.</p>"},{"location":"advanced/updates_github_actions/#using-reusable-workflows","title":"Using reusable workflows","text":"<p>If you want to use the same workflow in multiple repositories in your GitHub organization, you can create a reusable workflow. You can find more information in the GitHub documentation.</p>"},{"location":"design_proposals/pixi_global_manifest/","title":"Pixi Global Manifest","text":"<p>Feedback wanted</p> <p>This document is work in progress, and community feedback is greatly appreciated. Please share your thoughts at our GitHub discussion.</p>"},{"location":"design_proposals/pixi_global_manifest/#motivation","title":"Motivation","text":"<p><code>pixi global</code> is currently limited to imperatively managing CLI packages. The next iteration of this feature should fulfill the following needs:</p> <ul> <li>Shareable global environments.</li> <li>Managing complex environments with multiple packages as dependencies</li> <li>Flexible exposure of executables</li> </ul>"},{"location":"design_proposals/pixi_global_manifest/#design-considerations","title":"Design Considerations","text":"<p>There are a few things we wanted to keep in mind in the design:</p> <ol> <li>User-friendliness: Pixi is a user focused tool that goes beyond developers. The feature should have good error reporting and helpful documentation from the start.</li> <li>Keep it simple: The CLI should be all you strictly need to interact with global environments.</li> <li>Unsurprising: Simple commands should behave similar to traditional package managers.</li> <li>Human Readable: Any file created by this feature should be human-readable and modifiable.</li> </ol>"},{"location":"design_proposals/pixi_global_manifest/#manifest","title":"Manifest","text":"<p>The global environments and exposed will be managed by a human-readable manifest. This manifest will stick to conventions set by <code>pixi.toml</code> where possible. Among other things it will be written in the TOML format, be named <code>pixi-global.toml</code> and be placed at <code>~/.pixi/manifests/pixi-global.toml</code>. The motivation for the location is discussed further below</p> pixi-global.toml<pre><code># The name of the environment is `python`\n[envs.python]\nchannels = [\"conda-forge\"]\n# optional, defaults to your current OS\nplatform = \"osx-64\"\n# It will expose python, python3 and python3.11, but not pip\n[envs.python.dependencies]\npython = \"3.11.*\"\npip = \"*\"\n\n[envs.python.exposed]\npython = \"python\"\npython3 = \"python3\"\n\"python3.11\" = \"python3.11\"\n\n# The name of the environment is `python3-10`\n[envs.python3-10]\nchannels = [\"https://fast.prefix.dev/conda-forge\"]\n# It will expose python3.10\n[envs.python3-10.dependencies]\npython = \"3.10.*\"\n\n[envs.python3-10.exposed]\n\"python3.10\" = \"python\"\n</code></pre>"},{"location":"design_proposals/pixi_global_manifest/#cli","title":"CLI","text":"<p>Install one or more packages <code>PACKAGE</code> and expose their executables. If <code>--environment</code> has been given, all packages will be installed in the same environment. <code>--expose</code> can be given if <code>--environment</code> is given as well or if only a single <code>PACKAGE</code> will be installed. The syntax for <code>MAPPING</code> is <code>exposed_name=executable_name</code>, so for example <code>python3.10=python</code>. <code>--platform</code> sets the platform of the environment to <code>PLATFORM</code> Multiple channels can be specified by using <code>--channel</code> multiple times. By default, if no channel is provided, the <code>default-channels</code> key in the pixi configuration is used, which again defaults to \"conda-forge\".</p> <pre><code>pixi global install [--expose MAPPING] [--environment ENV] [--platform PLATFORM] [--no-activation] [--channel CHANNEL]... PACKAGE...\n</code></pre> <p>Remove environments <code>ENV</code>. <pre><code>pixi global uninstall &lt;ENV&gt;...\n</code></pre></p> <p>Update <code>PACKAGE</code> if <code>--package</code> is given. If not, all packages in environments <code>ENV</code> will be updated. If the update leads to executables being removed, it will offer to remove the mappings. If the user declines the update process will stop. If the update leads to executables being added, it will offer for each binary individually to expose it. <pre><code>pixi global update [--package PACKAGE] &lt;ENV&gt;...\n</code></pre></p> <p>Updates all packages in all environments. If the update leads to executables being removed, it will offer to remove the mappings. If the user declines the update process will stop. If the update leads to executables being added, it will offer for each binary individually to expose it. <code>--assume-yes</code> will assume yes as answer for every question that would otherwise be asked interactively.</p> <pre><code>pixi global update-all [--assume-yes]\n</code></pre> <p>Add one or more packages <code>PACKAGE</code> into an existing environment <code>ENV</code>. If environment <code>ENV</code> does not exist, it will return with an error. Without <code>--expose</code> no binary will be exposed. If you don't mention a spec like <code>python=3.8.*</code>, the spec will be unconstrained with <code>*</code>. The syntax for <code>MAPPING</code> is <code>exposed_name=executable_name</code>, so for example <code>python3.10=python</code>.</p> <pre><code>pixi global add --environment ENV [--expose MAPPING] &lt;PACKAGE&gt;...\n</code></pre> <p>Remove package <code>PACKAGE</code> from environment <code>ENV</code>. If that was the last package remove the whole environment and print that information in the console. If this leads to executables being removed, it will offer to remove the mappings. If the user declines the remove process will stop. <pre><code>pixi global remove --environment ENV PACKAGE\n</code></pre></p> <p>Add one or more <code>MAPPING</code> for environment <code>ENV</code> which describe which executables are exposed. The syntax for <code>MAPPING</code> is <code>exposed_name=executable_name</code>, so for example <code>python3.10=python</code>. <pre><code>pixi global expose add --environment ENV  &lt;MAPPING&gt;...\n</code></pre></p> <p>Remove one or more exposed <code>BINARY</code> from environment <code>ENV</code> <pre><code>pixi global expose remove --environment ENV &lt;BINARY&gt;...\n</code></pre></p> <p>Ensure that the environments on the machine reflect the state in the manifest. The manifest is the single source of truth. Only if there's no manifest, will the data from existing environments be used to create a manifest. <code>pixi global sync</code> is implied by most other <code>pixi global</code> commands.</p> <pre><code>pixi global sync\n</code></pre> <p>List all environments, their specs and exposed executables <pre><code>pixi global list\n</code></pre></p> <p>Set the channels <code>CHANNEL</code> for a certain environment <code>ENV</code> in the pixi global manifest. <pre><code>pixi global channel set --environment ENV &lt;CHANNEL&gt;...\n</code></pre></p> <p>Set the platform <code>PLATFORM</code> for a certain environment <code>ENV</code> in the pixi global manifest. <pre><code>pixi global platform set --environment ENV PLATFORM\n</code></pre></p>"},{"location":"design_proposals/pixi_global_manifest/#simple-workflow","title":"Simple workflow","text":"<p>Create environment <code>python</code>, install package <code>python=3.10.*</code> and expose all executables of that package <pre><code>pixi global install python=3.10.*\n</code></pre></p> <p>Update all packages in environment <code>python</code> <pre><code>pixi global update python\n</code></pre></p> <p>Remove environment <code>python</code> <pre><code>pixi global uninstall python\n</code></pre></p> <p>Create environment <code>python</code> and <code>pip</code>, install corresponding packages and expose all executables of that packages <pre><code>pixi global install python pip\n</code></pre></p> <p>Remove environments <code>python</code> and <code>pip</code> <pre><code>pixi global uninstall python pip\n</code></pre></p> <p>Create environment <code>python-pip</code>, install <code>python</code> and <code>pip</code> in the same environment and expose all executables of these packages <pre><code>pixi global install --environment python-pip python pip\n</code></pre></p>"},{"location":"design_proposals/pixi_global_manifest/#adding-dependencies","title":"Adding dependencies","text":"<p>Create environment <code>python</code>, install package <code>python</code> and expose all executables of that package. Then add package <code>hypercorn</code> to environment <code>python</code> but doesn't expose its executables.</p> <pre><code>pixi global install python\npixi global add --environment python hypercorn\n</code></pre> <p>Update package <code>cryptography</code> (a dependency of <code>hypercorn</code>) to <code>43.0.0</code> in environment <code>python</code></p> <pre><code>pixi update --environment python cryptography=43.0.0\n</code></pre> <p>Then remove <code>hypercorn</code> again. <pre><code>pixi global remove --environment python hypercorn\n</code></pre></p>"},{"location":"design_proposals/pixi_global_manifest/#specifying-which-executables-to-expose","title":"Specifying which executables to expose","text":"<p>Make a new environment <code>python3-10</code> with package <code>python=3.10</code> and expose the <code>python</code> executable as <code>python3.10</code>. <pre><code>pixi global install --environment python3-10 --expose \"python3.10=python\" python=3.10\n</code></pre></p> <p>Now <code>python3.10</code> is available.</p> <p>Run the following in order to expose <code>python</code> from environment <code>python3-10</code> as <code>python3-10</code> instead.</p> <pre><code>pixi global expose remove --environment python3-10 python3.10\npixi global expose add --environment python3-10 \"python3-10=python\"\n</code></pre> <p>Now <code>python3-10</code> is available, but <code>python3.10</code> isn't anymore.</p>"},{"location":"design_proposals/pixi_global_manifest/#syncing","title":"Syncing","text":"<p>Most <code>pixi global</code> sub commands imply a <code>pixi global sync</code>.</p> <ul> <li>Users should be able to change the manifest by hand (creating or modifying (adding or removing))</li> <li>Users should be able to \"export\" their existing environments into the manifest, if non-existing.</li> <li>The manifest is always \"in sync\" after <code>install</code>/<code>remove</code>/<code>inject</code>/<code>other global command</code>.</li> </ul> <p>First time, clean computer. Running the following creates manifest and <code>~/.pixi/envs/python</code>. <pre><code>pixi global install python\n</code></pre></p> <p>Delete <code>~/.pixi</code> and syncing, should add environment <code>python</code> again as described in the manifest <pre><code>rm `~/.pixi/envs`\npixi global sync\n</code></pre></p> <p>If there's no manifest, but existing environments, pixi will create a manifest that matches your current environments. It is to be decided whether the user should be asked if they want an empty manifest instead, or if it should always import the data from the environments. <pre><code>rm &lt;manifest&gt;\npixi global sync\n</code></pre></p> <p>If we remove the python environment from the manifest, running <code>pixi global sync</code> will also remove the <code>~/.pixi/envs/python</code> environment from the file system. <pre><code>vim &lt;manifest&gt;\npixi global sync\n</code></pre></p>"},{"location":"design_proposals/pixi_global_manifest/#open-questions","title":"Open Questions","text":""},{"location":"design_proposals/pixi_global_manifest/#should-we-version-the-manifest","title":"Should we version the manifest?","text":"<p>Something like:</p> <pre><code>[manifest]\nversion = 1\n</code></pre> <p>We still have to figure out which existing programs do something similar and how they benefit from it.</p>"},{"location":"design_proposals/pixi_global_manifest/#multiple-manifests","title":"Multiple manifests","text":"<p>We could go for one default manifest, but also parse other manifests in the same directory. The only requirement to be parsed as manifest is a <code>.toml</code> extension In order to modify those with the <code>CLI</code> one would have to add an option <code>--manifest</code> to select the correct one.</p> <ul> <li>pixi-global.toml: Default</li> <li>pixi-global-company-tools.toml</li> <li>pixi-global-from-my-dotfiles.toml</li> </ul> <p>It is unclear whether the first implementation already needs to support this. At the very least we should put the manifest into its own folder like <code>~/.pixi/global/manifests/pixi-global.toml</code></p>"},{"location":"design_proposals/pixi_global_manifest/#discovery-via-config-key","title":"Discovery via config key","text":"<p>In order to make it easier to manage manifests in version control, we could allow to set the manifest path via a key in the pixi configuration.</p> config.toml<pre><code>global_manifests = \"/path/to/your/manifests\"\n</code></pre>"},{"location":"design_proposals/pixi_global_manifest/#no-activation","title":"No activation","text":"<p>The current <code>pixi global install</code> features <code>--no-activation</code>. When this flag is set, <code>CONDA_PREFIX</code> and <code>PATH</code> will not be set when running the exposed executable. This is useful when installing Python package managers or shells.</p> <p>Assuming that this needs to be set per mapping, one way to expose this functionality would be to allow the following:</p> <pre><code>[envs.pip.exposed]\npip = { executable=\"pip\", activation=false }\n</code></pre>"},{"location":"examples/cpp-sdl/","title":"SDL example","text":"<p> The <code>cpp-sdl</code> example is located in the pixi repository.</p> <pre><code>git clone https://github.com/prefix-dev/pixi.git\n</code></pre> <p>Move to the example folder</p> <pre><code>cd pixi/examples/cpp-sdl\n</code></pre> <p>Run the <code>start</code> command</p> <pre><code>pixi run start\n</code></pre> <p>Using the <code>depends-on</code> feature you only needed to run the <code>start</code> task but under water it is running the following tasks.</p> <pre><code># Configure the CMake project\npixi run configure\n\n# Build the executable\npixi run build\n\n# Start the build executable\npixi run start\n</code></pre>"},{"location":"examples/opencv/","title":"Opencv example","text":"<p>The <code>opencv</code> example is located in the pixi repository.</p> <pre><code>git clone https://github.com/prefix-dev/pixi.git\n</code></pre> <p>Move to the example folder</p> <pre><code>cd pixi/examples/opencv\n</code></pre>"},{"location":"examples/opencv/#face-detection","title":"Face detection","text":"<p>Run the <code>start</code> command to start the face detection algorithm.</p> <pre><code>pixi run start\n</code></pre> <p>The screen that starts should look like this: </p> <p>Check out the <code>webcame_capture.py</code> to see how we detect a face.</p>"},{"location":"examples/opencv/#camera-calibration","title":"Camera Calibration","text":"<p>Next to face recognition, a camera calibration example is also included.</p> <p>You'll need a checkerboard for this to work. Print this: </p> <p>Then run</p> <pre><code>pixi run calibrate\n</code></pre> <p>To make a picture for calibration press <code>SPACE</code> Do this approximately 10 times with the chessboard in view of the camera</p> <p>After that press <code>ESC</code> which will start the calibration.</p> <p>When the calibration is done, the camera will be used again to find the distance to the checkerboard.</p> <p></p>"},{"location":"examples/ros2-nav2/","title":"Navigation 2 example","text":"<p>The <code>nav2</code> example is located in the pixi repository.</p> <pre><code>git clone https://github.com/prefix-dev/pixi.git\n</code></pre> <p>Move to the example folder</p> <pre><code>cd pixi/examples/ros2-nav2\n</code></pre> <p>Run the <code>start</code> command</p> <pre><code>pixi run start\n</code></pre>"},{"location":"features/advanced_tasks/","title":"Advanced tasks","text":"<p>When building a package, you often have to do more than just run the code. Steps like formatting, linting, compiling, testing, benchmarking, etc. are often part of a project. With pixi tasks, this should become much easier to do.</p> <p>Here are some quick examples</p> pixi.toml<pre><code>[tasks]\n# Commands as lists so you can also add documentation in between.\nconfigure = { cmd = [\n    \"cmake\",\n    # Use the cross-platform Ninja generator\n    \"-G\",\n    \"Ninja\",\n    # The source is in the root directory\n    \"-S\",\n    \".\",\n    # We wanna build in the .build directory\n    \"-B\",\n    \".build\",\n] }\n\n# Depend on other tasks\nbuild = { cmd = [\"ninja\", \"-C\", \".build\"], depends-on = [\"configure\"] }\n\n# Using environment variables\nrun = \"python main.py $PIXI_PROJECT_ROOT\"\nset = \"export VAR=hello &amp;&amp; echo $VAR\"\n\n# Cross platform file operations\ncopy = \"cp pixi.toml pixi_backup.toml\"\nclean = \"rm pixi_backup.toml\"\nmove = \"mv pixi.toml backup.toml\"\n</code></pre>"},{"location":"features/advanced_tasks/#depends-on","title":"Depends on","text":"<p>Just like packages can depend on other packages, our tasks can depend on other tasks. This allows for complete pipelines to be run with a single command.</p> <p>An obvious example is compiling before running an application.</p> <p>Checkout our <code>cpp_sdl</code> example for a running example. In that package we have some tasks that depend on each other, so we can assure that when you run <code>pixi run start</code> everything is set up as expected.</p> <pre><code>pixi task add configure \"cmake -G Ninja -S . -B .build\"\npixi task add build \"ninja -C .build\" --depends-on configure\npixi task add start \".build/bin/sdl_example\" --depends-on build\n</code></pre> <p>Results in the following lines added to the <code>pixi.toml</code></p> pixi.toml<pre><code>[tasks]\n# Configures CMake\nconfigure = \"cmake -G Ninja -S . -B .build\"\n# Build the executable but make sure CMake is configured first.\nbuild = { cmd = \"ninja -C .build\", depends-on = [\"configure\"] }\n# Start the built executable\nstart = { cmd = \".build/bin/sdl_example\", depends-on = [\"build\"] }\n</code></pre> <pre><code>pixi run start\n</code></pre> <p>The tasks will be executed after each other:</p> <ul> <li>First <code>configure</code> because it has no dependencies.</li> <li>Then <code>build</code> as it only depends on <code>configure</code>.</li> <li>Then <code>start</code> as all it dependencies are run.</li> </ul> <p>If one of the commands fails (exit with non-zero code.) it will stop and the next one will not be started.</p> <p>With this logic, you can also create aliases as you don't have to specify any command in a task.</p> <pre><code>pixi task add fmt ruff\npixi task add lint pylint\n</code></pre> <pre><code>pixi task alias style fmt lint\n</code></pre> <p>Results in the following <code>pixi.toml</code>.</p> pixi.toml<pre><code>fmt = \"ruff\"\nlint = \"pylint\"\nstyle = { depends-on = [\"fmt\", \"lint\"] }\n</code></pre> <p>Now run both tools with one command.</p> <pre><code>pixi run style\n</code></pre>"},{"location":"features/advanced_tasks/#working-directory","title":"Working directory","text":"<p>Pixi tasks support the definition of a working directory.</p> <p><code>cwd</code>\" stands for Current Working Directory. The directory is relative to the pixi package root, where the <code>pixi.toml</code> file is located.</p> <p>Consider a pixi project structured as follows:</p> <pre><code>\u251c\u2500\u2500 pixi.toml\n\u2514\u2500\u2500 scripts\n    \u2514\u2500\u2500 bar.py\n</code></pre> <p>To add a task to run the <code>bar.py</code> file, use:</p> <pre><code>pixi task add bar \"python bar.py\" --cwd scripts\n</code></pre> <p>This will add the following line to manifest file:</p> pixi.toml<pre><code>[tasks]\nbar = { cmd = \"python bar.py\", cwd = \"scripts\" }\n</code></pre>"},{"location":"features/advanced_tasks/#caching","title":"Caching","text":"<p>When you specify <code>inputs</code> and/or <code>outputs</code> to a task, pixi will reuse the result of the task.</p> <p>For the cache, pixi checks that the following are true:</p> <ul> <li>No package in the environment has changed.</li> <li>The selected inputs and outputs are the same as the last time the task was   run. We compute fingerprints of all the files selected by the globs and   compare them to the last time the task was run.</li> <li>The command is the same as the last time the task was run.</li> </ul> <p>If all of these conditions are met, pixi will not run the task again and instead use the existing result.</p> <p>Inputs and outputs can be specified as globs, which will be expanded to all matching files.</p> pixi.toml<pre><code>[tasks]\n# This task will only run if the `main.py` file has changed.\nrun = { cmd = \"python main.py\", inputs = [\"main.py\"] }\n\n# This task will remember the result of the `curl` command and not run it again if the file `data.csv` already exists.\ndownload_data = { cmd = \"curl -o data.csv https://example.com/data.csv\", outputs = [\"data.csv\"] }\n\n# This task will only run if the `src` directory has changed and will remember the result of the `make` command.\nbuild = { cmd = \"make\", inputs = [\"src/*.cpp\", \"include/*.hpp\"], outputs = [\"build/app.exe\"] }\n</code></pre> <p>Note: if you want to debug the globs you can use the <code>--verbose</code> flag to see which files are selected.</p> <pre><code># shows info logs of all files that were selected by the globs\npixi run -v start\n</code></pre>"},{"location":"features/advanced_tasks/#environment-variables","title":"Environment variables","text":"<p>You can set environment variables for a task. These are seen as \"default\" values for the variables as you can overwrite them from the shell.</p> <p>pixi.toml<pre><code>[tasks]\necho = { cmd = \"echo $ARGUMENT\", env = { ARGUMENT = \"hello\" } }\n</code></pre> If you run <code>pixi run echo</code> it will output <code>hello</code>. When you set the environment variable <code>ARGUMENT</code> before running the task, it will use that value instead.</p> <pre><code>ARGUMENT=world pixi run echo\n\u2728 Pixi task (echo in default): echo $ARGUMENT\nworld\n</code></pre> <p>These variables are not shared over tasks, so you need to define these for every task you want to use them in.</p> <p>Extend instead of overwrite</p> <p>If you use the same environment variable in the value as in the key of the map you will also overwrite the variable. For example overwriting a <code>PATH</code> pixi.toml<pre><code>[tasks]\necho = { cmd = \"echo $PATH\", env = { PATH = \"/tmp/path:$PATH\" } }\n</code></pre> This will output <code>/tmp/path:/usr/bin:/bin</code> instead of the original <code>/usr/bin:/bin</code>.</p>"},{"location":"features/advanced_tasks/#clean-environment","title":"Clean environment","text":"<p>You can make sure the environment of a task is \"pixi only\". Here pixi will only include the minimal required environment variables for your platform to run the command in. The environment will contain all variables set by the conda environment like <code>\"CONDA_PREFIX\"</code>. It will however include some default values from the shell, like: <code>\"DISPLAY\"</code>, <code>\"LC_ALL\"</code>, <code>\"LC_TIME\"</code>, <code>\"LC_NUMERIC\"</code>, <code>\"LC_MEASUREMENT\"</code>, <code>\"SHELL\"</code>, <code>\"USER\"</code>, <code>\"USERNAME\"</code>, <code>\"LOGNAME\"</code>, <code>\"HOME\"</code>, <code>\"HOSTNAME\"</code>,<code>\"TMPDIR\"</code>, <code>\"XPC_SERVICE_NAME\"</code>, <code>\"XPC_FLAGS\"</code></p> <p><pre><code>[tasks]\nclean_command = { cmd = \"python run_in_isolated_env.py\", clean-env = true}\n</code></pre> This setting can also be set from the command line with <code>pixi run --clean-env TASK_NAME</code>.</p> <p><code>clean-env</code> not supported on Windows</p> <p>On Windows it's hard to create a \"clean environment\" as <code>conda-forge</code> doesn't ship Windows compilers and Windows needs a lot of base variables. Making this feature not worthy of implementing as the amount of edge cases will make it unusable.</p>"},{"location":"features/advanced_tasks/#our-task-runner-deno_task_shell","title":"Our task runner: deno_task_shell","text":"<p>To support the different OS's (Windows, OSX and Linux), pixi integrates a shell that can run on all of them. This is <code>deno_task_shell</code>. The task shell is a limited implementation of a bourne-shell interface.</p>"},{"location":"features/advanced_tasks/#built-in-commands","title":"Built-in commands","text":"<p>Next to running actual executable like <code>./myprogram</code>, <code>cmake</code> or <code>python</code> the shell has some built-in commandos.</p> <ul> <li><code>cp</code>: Copies files.</li> <li><code>mv</code>: Moves files.</li> <li><code>rm</code>: Remove files or directories.   Ex: <code>rm -rf [FILE]...</code> - Commonly used to recursively delete files or directories.</li> <li><code>mkdir</code>: Makes directories.   Ex. <code>mkdir -p DIRECTORY...</code> - Commonly used to make a directory and all its parents with no error if it exists.</li> <li><code>pwd</code>: Prints the name of the current/working directory.</li> <li><code>sleep</code>: Delays for a specified amount of time.   Ex. <code>sleep 1</code> to sleep for 1 second, <code>sleep 0.5</code> to sleep for half a second, or <code>sleep 1m</code> to sleep a minute</li> <li><code>echo</code>: Displays a line of text.</li> <li><code>cat</code>: Concatenates files and outputs them on stdout. When no arguments are provided, it reads and outputs stdin.</li> <li><code>exit</code>: Causes the shell to exit.</li> <li><code>unset</code>: Unsets environment variables.</li> <li><code>xargs</code>: Builds arguments from stdin and executes a command.</li> </ul>"},{"location":"features/advanced_tasks/#syntax","title":"Syntax","text":"<ul> <li>Boolean list: use <code>&amp;&amp;</code> or <code>||</code> to separate two commands.<ul> <li><code>&amp;&amp;</code>: if the command before <code>&amp;&amp;</code> succeeds continue with the next command.</li> <li><code>||</code>: if the command before <code>||</code> fails continue with the next command.</li> </ul> </li> <li>Sequential lists: use <code>;</code> to run two commands without checking if the first command failed or succeeded.</li> <li>Environment variables:<ul> <li>Set env variable using: <code>export ENV_VAR=value</code></li> <li>Use env variable using: <code>$ENV_VAR</code></li> <li>unset env variable using <code>unset ENV_VAR</code></li> </ul> </li> <li>Shell variables: Shell variables are similar to environment variables, but won\u2019t be exported to spawned commands.<ul> <li>Set them: <code>VAR=value</code></li> <li>use them: <code>VAR=value &amp;&amp; echo $VAR</code></li> </ul> </li> <li>Pipelines: Use the stdout output of a command into the stdin a following command<ul> <li><code>|</code>: <code>echo Hello | python receiving_app.py</code></li> <li><code>|&amp;</code>: use this to also get the stderr as input.</li> </ul> </li> <li>Command substitution: <code>$()</code> to use the output of a command as input for another command.<ul> <li><code>python main.py $(git rev-parse HEAD)</code></li> </ul> </li> <li>Negate exit code: <code>!</code> before any command will negate the exit code from 1 to 0 or visa-versa.</li> <li>Redirects: <code>&gt;</code> to redirect the stdout to a file.<ul> <li><code>echo hello &gt; file.txt</code> will put <code>hello</code> in <code>file.txt</code> and overwrite existing text.</li> <li><code>python main.py 2&gt; file.txt</code> will put the <code>stderr</code> output in <code>file.txt</code>.</li> <li><code>python main.py &amp;&gt; file.txt</code> will put the <code>stderr</code> and <code>stdout</code> in <code>file.txt</code>.</li> <li><code>echo hello &gt;&gt; file.txt</code> will append <code>hello</code> to the existing <code>file.txt</code>.</li> </ul> </li> <li>Glob expansion: <code>*</code> to expand all options.<ul> <li><code>echo *.py</code> will echo all filenames that end with <code>.py</code></li> <li><code>echo **/*.py</code> will echo all filenames that end with <code>.py</code> in this directory and all descendant directories.</li> <li><code>echo data[0-9].csv</code> will echo all filenames that have a single number after <code>data</code> and before <code>.csv</code></li> </ul> </li> </ul> <p>More info in <code>deno_task_shell</code> documentation.</p>"},{"location":"features/environment/","title":"Environments","text":"<p>Pixi is a tool to manage virtual environments. This document explains what an environment looks like and how to use it.</p>"},{"location":"features/environment/#structure","title":"Structure","text":"<p>A pixi environment is located in the <code>.pixi/envs</code> directory of the project. This location is not configurable as it is a specific design decision to keep the environments in the project directory. This keeps your machine and your project clean and isolated from each other, and makes it easy to clean up after a project is done.</p> <p>If you look at the <code>.pixi/envs</code> directory, you will see a directory for each environment, the <code>default</code> being the one that is normally used, if you specify a custom environment the name you specified will be used.</p> <pre><code>.pixi\n\u2514\u2500\u2500 envs\n    \u251c\u2500\u2500 cuda\n    \u2502   \u251c\u2500\u2500 bin\n    \u2502   \u251c\u2500\u2500 conda-meta\n    \u2502   \u251c\u2500\u2500 etc\n    \u2502   \u251c\u2500\u2500 include\n    \u2502   \u251c\u2500\u2500 lib\n    \u2502   ...\n    \u2514\u2500\u2500 default\n        \u251c\u2500\u2500 bin\n        \u251c\u2500\u2500 conda-meta\n        \u251c\u2500\u2500 etc\n        \u251c\u2500\u2500 include\n        \u251c\u2500\u2500 lib\n        ...\n</code></pre> <p>These directories are conda environments, and you can use them as such, but you cannot manually edit them, this should always go through the <code>pixi.toml</code>. Pixi will always make sure the environment is in sync with the <code>pixi.lock</code> file. If this is not the case then all the commands that use the environment will automatically update the environment, e.g. <code>pixi run</code>, <code>pixi shell</code>.</p>"},{"location":"features/environment/#cleaning-up","title":"Cleaning up","text":"<p>If you want to clean up the environments, you can simply delete the <code>.pixi/envs</code> directory, and pixi will recreate the environments when needed.</p> <pre><code># either:\nrm -rf .pixi/envs\n\n# or per environment:\nrm -rf .pixi/envs/default\nrm -rf .pixi/envs/cuda\n</code></pre>"},{"location":"features/environment/#activation","title":"Activation","text":"<p>An environment is nothing more than a set of files that are installed into a certain location, that somewhat mimics a global system install. You need to activate the environment to use it. In the most simple sense that mean adding the <code>bin</code> directory of the environment to the <code>PATH</code> variable. But there is more to it in a conda environment, as it also sets some environment variables.</p> <p>To do the activation we have multiple options:</p> <ul> <li>Use the <code>pixi shell</code> command to open a shell with the environment activated.</li> <li>Use the <code>pixi shell-hook</code> command to print the command to activate the environment in your current shell.</li> <li>Use the <code>pixi run</code> command to run a command in the environment.</li> </ul> <p>Where the <code>run</code> command is special as it runs its own cross-platform shell and has the ability to run tasks. More information about tasks can be found in the tasks documentation.</p> <p>Using the <code>pixi shell-hook</code> in pixi you would get the following output:</p> <pre><code>export PATH=\"/home/user/development/pixi/.pixi/envs/default/bin:/home/user/.local/bin:/home/user/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/home/user/.pixi/bin\"\nexport CONDA_PREFIX=\"/home/user/development/pixi/.pixi/envs/default\"\nexport PIXI_PROJECT_NAME=\"pixi\"\nexport PIXI_PROJECT_ROOT=\"/home/user/development/pixi\"\nexport PIXI_PROJECT_VERSION=\"0.12.0\"\nexport PIXI_PROJECT_MANIFEST=\"/home/user/development/pixi/pixi.toml\"\nexport CONDA_DEFAULT_ENV=\"pixi\"\nexport PIXI_ENVIRONMENT_PLATFORMS=\"osx-64,linux-64,win-64,osx-arm64\"\nexport PIXI_ENVIRONMENT_NAME=\"default\"\nexport PIXI_PROMPT=\"(pixi) \"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-binutils_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gcc_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gfortran_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/activate-gxx_linux-64.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/libglib_activate.sh\"\n. \"/home/user/development/pixi/.pixi/envs/default/etc/conda/activate.d/rust.sh\"\n</code></pre> <p>It sets the <code>PATH</code> and some more environment variables. But more importantly it also runs activation scripts that are presented by the installed packages. An example of this would be the <code>libglib_activate.sh</code> script. Thus, just adding the <code>bin</code> directory to the <code>PATH</code> is not enough.</p>"},{"location":"features/environment/#traditional-conda-activate-like-activation","title":"Traditional <code>conda activate</code>-like activation","text":"<p>If you prefer to use the traditional <code>conda activate</code>-like activation, you could use the <code>pixi shell-hook</code> command.</p> <pre><code>$ which python\npython not found\n$ eval \"$(pixi shell-hook)\"\n$ (default) which python\n/path/to/project/.pixi/envs/default/bin/python\n</code></pre> <p>Warning</p> <p>It is not encouraged to use the traditional <code>conda activate</code>-like activation, as deactivating the environment is not really possible. Use <code>pixi shell</code> instead.</p>"},{"location":"features/environment/#using-pixi-with-direnv","title":"Using <code>pixi</code> with <code>direnv</code>","text":"Installing direnv <p>Of course you can use <code>pixi</code> to install <code>direnv</code> globally. We recommend to run</p> <pre><code>pixi global install direnv\n</code></pre> <p>to install the latest version of <code>direnv</code> on your computer.</p> <p>This allows you to use <code>pixi</code> in combination with <code>direnv</code>. Enter the following into your <code>.envrc</code> file:</p> .envrc<pre><code>watch_file pixi.lock # (1)!\neval \"$(pixi shell-hook)\" # (2)!\n</code></pre> <ol> <li>This ensures that every time your <code>pixi.lock</code> changes, <code>direnv</code> invokes the shell-hook again.</li> <li>This installs if needed, and activates the environment. <code>direnv</code> ensures that the environment is deactivated when you leave the directory.</li> </ol> <pre><code>$ cd my-project\ndirenv: error /my-project/.envrc is blocked. Run `direnv allow` to approve its content\n$ direnv allow\ndirenv: loading /my-project/.envrc\n\u2714 Project in /my-project is ready to use!\ndirenv: export +CONDA_DEFAULT_ENV +CONDA_PREFIX +PIXI_ENVIRONMENT_NAME +PIXI_ENVIRONMENT_PLATFORMS +PIXI_PROJECT_MANIFEST +PIXI_PROJECT_NAME +PIXI_PROJECT_ROOT +PIXI_PROJECT_VERSION +PIXI_PROMPT ~PATH\n$ which python\n/my-project/.pixi/envs/default/bin/python\n$ cd ..\ndirenv: unloading\n$ which python\npython not found\n</code></pre>"},{"location":"features/environment/#environment-variables","title":"Environment variables","text":"<p>The following environment variables are set by pixi, when using the <code>pixi run</code>, <code>pixi shell</code>, or <code>pixi shell-hook</code> command:</p> <ul> <li><code>PIXI_PROJECT_ROOT</code>: The root directory of the project.</li> <li><code>PIXI_PROJECT_NAME</code>: The name of the project.</li> <li><code>PIXI_PROJECT_MANIFEST</code>: The path to the manifest file (<code>pixi.toml</code>).</li> <li><code>PIXI_PROJECT_VERSION</code>: The version of the project.</li> <li><code>PIXI_PROMPT</code>: The prompt to use in the shell, also used by <code>pixi shell</code> itself.</li> <li><code>PIXI_ENVIRONMENT_NAME</code>: The name of the environment, defaults to <code>default</code>.</li> <li><code>PIXI_ENVIRONMENT_PLATFORMS</code>: Comma separated list of platforms supported by the project.</li> <li><code>CONDA_PREFIX</code>: The path to the environment. (Used by multiple tools that already understand conda environments)</li> <li><code>CONDA_DEFAULT_ENV</code>: The name of the environment. (Used by multiple tools that already understand conda environments)</li> <li><code>PATH</code>: We prepend the <code>bin</code> directory of the environment to the <code>PATH</code> variable, so you can use the tools installed in the environment directly.</li> <li><code>INIT_CWD</code>: ONLY IN <code>pixi run</code>: The directory where the command was run from.</li> </ul> <p>Note</p> <p>Even though the variables are environment variables these cannot be overridden. E.g. you can not change the root of the project by setting <code>PIXI_PROJECT_ROOT</code> in the environment.</p>"},{"location":"features/environment/#solving-environments","title":"Solving environments","text":"<p>When you run a command that uses the environment, pixi will check if the environment is in sync with the <code>pixi.lock</code> file. If it is not, pixi will solve the environment and update it. This means that pixi will retrieve the best set of packages for the dependency requirements that you specified in the <code>pixi.toml</code> and will put the output of the solve step into the <code>pixi.lock</code> file. Solving is a mathematical problem and can take some time, but we take pride in the way we solve environments, and we are confident that we can solve your environment in a reasonable time. If you want to learn more about the solving process, you can read these:</p> <ul> <li>Rattler(conda) resolver blog</li> <li>UV(PyPI) resolver blog</li> </ul> <p>Pixi solves both the <code>conda</code> and <code>PyPI</code> dependencies, where the <code>PyPI</code> dependencies use the conda packages as a base, so you can be sure that the packages are compatible with each other. These solvers are split between the <code>rattler</code> and <code>uv</code> library, these control the heavy lifting of the solving process, which is executed by our custom SAT solver: <code>resolvo</code>. <code>resolve</code> is able to solve multiple ecosystem like <code>conda</code> and <code>PyPI</code>. It implements the lazy solving process for <code>PyPI</code> packages, which means that it only downloads the metadata of the packages that are needed to solve the environment. It also supports the <code>conda</code> way of solving, which means that it downloads the metadata of all the packages at once and then solves in one go.</p> <p>For the <code>[pypi-dependencies]</code>, <code>uv</code> implements <code>sdist</code> building to retrieve the metadata of the packages, and <code>wheel</code> building to install the packages. For this building step, <code>pixi</code> requires to first install <code>python</code> in the (conda)<code>[dependencies]</code> section of the <code>pixi.toml</code> file. This will always be slower than the pure conda solves. So for the best pixi experience you should stay within the <code>[dependencies]</code> section of the <code>pixi.toml</code> file.</p>"},{"location":"features/environment/#caching","title":"Caching","text":"<p>Pixi caches all previously downloaded packages in a cache folder. This cache folder is shared between all pixi projects and globally installed tools.</p> <p>Normally the location would be the following platform-specific default cache folder:</p> <ul> <li>Linux: <code>$XDG_CACHE_HOME/rattler</code> or <code>$HOME/.cache/rattler</code></li> <li>macOS: <code>$HOME/Library/Caches/rattler</code></li> <li>Windows: <code>%LOCALAPPDATA%\\rattler</code></li> </ul> <p>This location is configurable by setting the <code>PIXI_CACHE_DIR</code> or <code>RATTLER_CACHE_DIR</code> environment variable.</p> <p>When you want to clean the cache, you can simply delete the cache directory, and pixi will re-create the cache when needed.</p> <p>The cache contains multiple folders concerning different caches from within pixi.</p> <ul> <li><code>pkgs</code>: Contains the downloaded/unpacked <code>conda</code> packages.</li> <li><code>repodata</code>: Contains the <code>conda</code> repodata cache.</li> <li><code>uv-cache</code>: Contains the <code>uv</code> cache. This includes multiple caches, e.g. <code>built-wheels</code> <code>wheels</code> <code>archives</code></li> <li><code>http-cache</code>: Contains the <code>conda-pypi</code> mapping cache.</li> </ul>"},{"location":"features/global_tools/","title":"Pixi Global Tool Environment Installation","text":"<p>With <code>pixi global</code>, users can manage globally installed tools in a way that makes them available from any directory. This means that the pixi environment will be placed in a global location, and the tools will be exposed to the system <code>PATH</code>, allowing you to run them from the command line.</p>"},{"location":"features/global_tools/#the-global-manifest","title":"The Global Manifest","text":"<p>Since <code>v0.33.0</code> pixi has a new manifest file that will be created in the global directory. This file will contain the list of environments that are installed globally, their dependencies and exposed binaries. The manifest can be edited, synced, checked in to a version control system, and shared with others.</p> <p>A simple version looks like this: <pre><code>[envs.vim]\nchannels = [\"conda-forge\"]\ndependencies = { vim = \"*\" } # (1)!\nexposed = { vimdiff = \"vimdiff\", vim = \"vim\" } # (2)!\n\n[envs.gh]\nchannels = [\"conda-forge\"]\ndependencies = { gh = \"*\" }\nexposed = { gh = \"gh\" }\n\n[envs.python]\nchannels = [\"conda-forge\"]\ndependencies = { python = \"&gt;=3.10,&lt;3.11\" }\nexposed = { python310 = \"python\" } # (3)!\n</code></pre></p> <ol> <li>Dependencies are the packages that will be installed in the environment. You can specify the version or use a wildcard.</li> <li>The exposed binaries are the ones that will be available in the system path. <code>vim</code> has multiple and all of them are exposed.</li> <li>Here python is exposed as <code>python310</code> to avoid conflicts with other python installations. You can give it any name you want.</li> </ol>"},{"location":"features/global_tools/#manifest-locations","title":"Manifest locations","text":"<p>The manifest can be found at the following locations depending on your operation system.</p> LinuxmacOSWindows Priority Location Comments 1 <code>$HOME/.pixi/manifests/pixi-global.toml</code> User-specific manifest 2 <code>$PIXI_HOME/manifests/pixi-global.toml</code> Global manifest in the user home directory. <code>PIXI_HOME</code> defaults to <code>~/.pixi</code> Priority Location Comments 1 <code>$HOME/.pixi/manifests/pixi-global.toml</code> User-specific manifest 2 <code>$PIXI_HOME/manifests/pixi-global.toml</code> Global manifest in the user home directory. <code>PIXI_HOME</code> defaults to <code>~/.pixi</code> Priority Location Comments 1 <code>%USERPROFILE%\\.pixi\\manifests\\pixi-global.toml</code> User-specific manifest 2 <code>$PIXI_HOME\\manifests/pixi-global.toml</code> Global manifest in the user home directory. <code>PIXI_HOME</code> defaults to <code>%USERPROFILE%/.pixi</code> <p>Note</p> <p>If multiple locations exist, the manifest with the highest priority will be used.</p>"},{"location":"features/global_tools/#channels","title":"Channels","text":"<p>The channels are the conda channels that will be used to search for the packages. There is a priority to these, so the first one will have the highest priority, if a package is not found in that channel the next one will be used. For example, running: <pre><code>pixi global install --channel conda-forge --channel bioconda snakemake\n</code></pre> Results in the following entry in the manifest: <pre><code>[envs.snakemake]\nchannels = [\"conda-forge\", \"bioconda\"]\ndependencies = { snakemake = \"*\" }\nexposed = { snakemake = \"snakemake\" }\n</code></pre></p> <p>More information on channels can be found here.</p>"},{"location":"features/global_tools/#exposed","title":"Exposed","text":"<p>The exposed binaries are the ones that will be available in the system <code>PATH</code>. This is useful when the package has multiple binaries, but you want to get a select few, or you want to expose it with a different name. For example, the <code>python</code> package has multiple binaries, but you only want to expose the interpreter as <code>py3</code>. Running: <pre><code>pixi global expose add --environment python py3=python3\n</code></pre> will create the following entry in the manifest: <pre><code>[envs.python]\nchannels = [\"conda-forge\"]\ndependencies = { python = \"&gt;=3.10,&lt;3.11\" }\nexposed = { py3 = \"python3\" }\n</code></pre> Now you can run <code>py3</code> to start the python interpreter. <pre><code>py3 -c \"print('Hello World')\"\n</code></pre></p> <p>There is some added automatic behavior, if you install a package with the same name as the environment, it will be exposed with the same name. Even if the binary name is only exposed through dependencies of the package For example, running: <pre><code>pixi global install ansible\n</code></pre> will create the following entry in the manifest: <pre><code>[envs.ansible]\nchannels = [\"conda-forge\"]\ndependencies = { ansible = \"*\" }\nexposed = { ansible = \"ansible\" } # (1)!\n</code></pre></p> <ol> <li>The <code>ansible</code> binary is exposed even though it is installed by a dependency of <code>ansible</code>, the <code>ansible-core</code> package.</li> </ol>"},{"location":"features/global_tools/#dependencies","title":"Dependencies","text":"<p>Dependencies are the Conda packages that will be installed into your environment. For example, running: <pre><code>pixi global install \"python&lt;3.12\"\n</code></pre> creates the following entry in the manifest: <pre><code>[envs.vim]\nchannels = [\"conda-forge\"]\ndependencies = { python = \"&lt;3.12\" }\n# ...\n</code></pre> Typically, you'd specify just the tool you're installing, but you can add more packages if needed. Defining the environment to install into will allow you to add multiple dependencies at once. For example, running: <pre><code>pixi global install --environment my-env git vim python\n</code></pre> will create the following entry in the manifest: <pre><code>[envs.my-env]\nchannels = [\"conda-forge\"]\ndependencies = { git = \"*\", vim = \"*\", python = \"*\" }\n# ...\n</code></pre></p> <p>You can <code>add</code> a dependency to an existing environment by running: <pre><code>pixi global install --environment my-env package-a package-b\n</code></pre> This will be added as dependencies to the <code>my-env</code> environment but won't auto expose the binaries from the new packages.</p> <p>You can <code>remove</code> dependencies by running: <pre><code>pixi global remove --environment my-env package-a package-b\n</code></pre></p>"},{"location":"features/global_tools/#example-adding-a-series-of-tools-at-once","title":"Example: Adding a series of tools at once","text":"<p>Without specifying an environment, you can add multiple tools at once: <pre><code>pixi global install pixi-pack rattler-build\n</code></pre> This command generates the following entry in the manifest: <pre><code>[envs.pixi-pack]\nchannels = [\"conda-forge\"]\ndependencies= { pixi-pack = \"*\" }\nexposed = { pixi-pack = \"pixi-pack\" }\n\n[envs.rattler-build]\nchannels = [\"conda-forge\"]\ndependencies = { rattler-build = \"*\" }\nexposed = { rattler-build = \"rattler-build\" }\n</code></pre> Creating two separate non-interfering environments, while exposing only the minimum required binaries.</p>"},{"location":"features/global_tools/#example-creating-a-data-science-sandbox-environment","title":"Example: Creating a Data Science Sandbox Environment","text":"<p>You can create an environment with multiple tools using the following command: <pre><code>pixi global install --environment data-science --expose jupyter --expose ipython jupyter numpy pandas matplotlib ipython\n</code></pre> This command generates the following entry in the manifest: <pre><code>[envs.data-science]\nchannels = [\"conda-forge\"]\ndependencies = { jupyter = \"*\", ipython = \"*\" }\nexposed = { jupyter = \"jupyter\", ipython = \"ipython\" }\n</code></pre> In this setup, both <code>jupyter</code> and <code>ipython</code> are exposed from the <code>data-science</code> environment, allowing you to run: <pre><code>&gt; ipython\n# Or\n&gt; jupyter lab\n</code></pre> These commands will be available globally, making it easy to access your preferred tools without switching environments.</p>"},{"location":"features/global_tools/#example-install-packages-for-a-different-platform","title":"Example: Install packages for a different platform","text":"<p>You can install packages for a different platform using the <code>--platform</code> flag. This is useful when you want to install packages for a different platform, such as <code>osx-64</code> packages on <code>osx-arm64</code>. For example, running this on <code>osx-arm64</code>: <pre><code>pixi global install --platform osx-64 python\n</code></pre> will create the following entry in the manifest: <pre><code>[envs.python]\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-64\"]\ndependencies = { python = \"*\" }\n# ...\n</code></pre></p>"},{"location":"features/lockfile/","title":"The <code>pixi.lock</code> lock file","text":"<p>A lock file is the protector of the environments, and pixi is the key to unlock it.</p>"},{"location":"features/lockfile/#what-is-a-lock-file","title":"What is a lock file?","text":"<p>A lock file locks the environment in a specific state. Within pixi a lock file is a description of the packages in an environment. The lock file contains two definitions:</p> <ul> <li> <p>The environments that are used in the project with their complete set of packages. e.g.:</p> <pre><code>environments:\n    default:\n        channels:\n          - url: https://conda.anaconda.org/conda-forge/\n        packages:\n            linux-64:\n            ...\n            - conda: https://conda.anaconda.org/conda-forge/linux-64/python-3.12.2-hab00c5b_0_cpython.conda\n            ...\n            osx-64:\n            ...\n            - conda: https://conda.anaconda.org/conda-forge/osx-64/python-3.12.2-h9f0c242_0_cpython.conda\n            ...\n</code></pre> <ul> <li> <p>The definition of the packages themselves. e.g.:</p> <pre><code>- kind: conda\n  name: python\n  version: 3.12.2\n  build: h9f0c242_0_cpython\n  subdir: osx-64\n  url: https://conda.anaconda.org/conda-forge/osx-64/python-3.12.2-h9f0c242_0_cpython.conda\n  sha256: 7647ac06c3798a182a4bcb1ff58864f1ef81eb3acea6971295304c23e43252fb\n  md5: 0179b8007ba008cf5bec11f3b3853902\n  depends:\n    - bzip2 &gt;=1.0.8,&lt;2.0a0\n    - libexpat &gt;=2.5.0,&lt;3.0a0\n    - libffi &gt;=3.4,&lt;4.0a0\n    - libsqlite &gt;=3.45.1,&lt;4.0a0\n    - libzlib &gt;=1.2.13,&lt;1.3.0a0\n    - ncurses &gt;=6.4,&lt;7.0a0\n    - openssl &gt;=3.2.1,&lt;4.0a0\n    - readline &gt;=8.2,&lt;9.0a0\n    - tk &gt;=8.6.13,&lt;8.7.0a0\n    - tzdata\n    - xz &gt;=5.2.6,&lt;6.0a0\n  constrains:\n    - python_abi 3.12.* *_cp312\n  license: Python-2.0\n  size: 14596811\n  timestamp: 1708118065292\n</code></pre> </li> </ul> </li> </ul>"},{"location":"features/lockfile/#why-a-lock-file","title":"Why a lock file","text":"<p>Pixi uses the lock file for the following reasons:</p> <ul> <li>To save a working installation state, without copying the entire environment's data.</li> <li>To ensure the project configuration is aligned with the installed environment.</li> <li>To give the user a file that contains all the information about the environment.</li> </ul> <p>This gives you (and your collaborators) a way to really reproduce the environment they are working in. Using tools such as docker suddenly becomes much less necessary.</p>"},{"location":"features/lockfile/#when-is-a-lock-file-generated","title":"When is a lock file generated?","text":"<p>A lock file is generated when you install a package. More specifically, a lock file is generated from the solve step of the installation process. The solve will return a list of packages that are to be installed, and the lock file will be generated from this list. This diagram tries to explain the process:</p> <pre><code>graph TD\n    A[Install] --&gt; B[Solve]\n    B --&gt; C[Generate and write lock file]\n    C --&gt; D[Install Packages]</code></pre>"},{"location":"features/lockfile/#how-to-use-a-lock-file","title":"How to use a lock file","text":"<p>Do not edit the lock file</p> <p>A lock file is a machine only file, and should not be edited by hand.</p> <p>That said, the <code>pixi.lock</code> is human-readable, so it's easy to track the changes in the environment. We recommend you track the lock file in <code>git</code> or other version control systems. This will ensure that the environment is always reproducible and that you can always revert back to a working state, in case something goes wrong. The <code>pixi.lock</code> and the manifest file <code>pixi.toml</code>/<code>pyproject.toml</code> should always be in sync.</p> <p>Running the following commands will check and automatically update the lock file if you changed any dependencies:</p> <ul> <li><code>pixi install</code></li> <li><code>pixi run</code></li> <li><code>pixi shell</code></li> <li><code>pixi shell-hook</code></li> <li><code>pixi tree</code></li> <li><code>pixi list</code></li> <li><code>pixi add</code></li> <li><code>pixi remove</code></li> </ul> <p>All the commands that support the interaction with the lock file also include some lock file usage options:</p> <ul> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: only install if the <code>pixi.lock</code> is up-to-date with the manifest file[^1]. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> </ul> <p>Syncing the lock file with the manifest file</p> <p>The lock file is always matched with the whole configuration in the manifest file. This means that if you change the manifest file, the lock file will be updated. <pre><code>flowchart TD\n    C[manifest] --&gt; A[lockfile] --&gt; B[environment]</code></pre></p>"},{"location":"features/lockfile/#lockfile-satisfiability","title":"Lockfile satisfiability","text":"<p>The lock file is a description of the environment, and it should always be satisfiable. Satisfiable means that the given manifest file and the created environment are in sync with the lockfile. If the lock file is not satisfiable, pixi will generate a new lock file automatically.</p> <p>Steps to check if the lock file is satisfiable:</p> <ul> <li>All <code>environments</code> in the manifest file are in the lock file</li> <li>All <code>channels</code> in the manifest file are in the lock file</li> <li>All <code>packages</code> in the manifest file are in the lock file, and the versions in the lock file are compatible with the requirements in the manifest file, for both <code>conda</code> and <code>pypi</code> packages.<ul> <li>Conda packages use a <code>matchspec</code> which can match on all the information we store in the lockfile, even <code>timestamp</code>, <code>subdir</code> and <code>license</code>.</li> </ul> </li> <li>If <code>pypi-dependencies</code> are added, all <code>conda</code> package that are python packages in the lock file have a <code>purls</code> field.</li> <li>All hashes for the <code>pypi</code> editable packages are correct.</li> <li>There is only a single entry for every package in the lock file.</li> </ul> <p>If you want to get more details checkout the actual code as this is a simplification of the actual code.</p>"},{"location":"features/lockfile/#the-version-of-the-lock-file","title":"The version of the lock file","text":"<p>The lock file has a version number, this is to ensure that the lock file is compatible with the local version of <code>pixi</code>.</p> <pre><code>version: 4\n</code></pre> <p>Pixi is backward compatible with the lock file, but not forward compatible. This means that you can use an older lock file with a newer version of <code>pixi</code>, but not the other way around.</p>"},{"location":"features/lockfile/#your-lock-file-is-big","title":"Your lock file is big","text":"<p>The lock file can grow quite large, especially if you have a lot of packages installed. This is because the lock file contains all the information about the packages.</p> <ol> <li>We try to keep the lock file as small as possible.</li> <li>It's always smaller than a docker image.</li> <li>Downloading the lock file is always faster than downloading the incorrect packages.</li> </ol>"},{"location":"features/lockfile/#you-dont-need-a-lock-file-because","title":"You don't need a lock file because...","text":"<p>If you can not think of a case where you would benefit from a fast reproducible environment, then you don't need a lock file.</p> <p>But take note of the following:</p> <ul> <li>A lock file allows you to run the same environment on different machines, think CI systems.</li> <li>It also allows you to go back to a working state if you have made a mistake.</li> <li>It helps other users onboard to your project as they don't have to figure out the environment setup or solve dependency issues.</li> </ul>"},{"location":"features/lockfile/#removing-the-lock-file","title":"Removing the lock file","text":"<p>If you want to remove the lock file, you can simply delete it.</p> <pre><code>rm pixi.lock\n</code></pre> <p>This will remove the lock file, and the next time you run a command that requires the lock file, it will be generated again.</p> <p>Note</p> <p>This does remove the locked state of the environment, and the environment will be updated to the latest version of the packages.</p>"},{"location":"features/multi_environment/","title":"Multi Environment Support","text":""},{"location":"features/multi_environment/#motivating-example","title":"Motivating Example","text":"<p>There are multiple scenarios where multiple environments are useful.</p> <ul> <li>Testing of multiple package versions, e.g. <code>py39</code> and <code>py310</code> or polars <code>0.12</code> and <code>0.13</code>.</li> <li>Smaller single tool environments, e.g. <code>lint</code> or <code>docs</code>.</li> <li>Large developer environments, that combine all the smaller environments, e.g. <code>dev</code>.</li> <li>Strict supersets of environments, e.g. <code>prod</code> and <code>test-prod</code> where <code>test-prod</code> is a strict superset of <code>prod</code>.</li> <li>Multiple machines from one project, e.g. a <code>cuda</code> environment and a <code>cpu</code> environment.</li> <li>And many more. (Feel free to edit this document in our GitHub and add your use case.)</li> </ul> <p>This prepares <code>pixi</code> for use in large projects with multiple use-cases, multiple developers and different CI needs.</p>"},{"location":"features/multi_environment/#design-considerations","title":"Design Considerations","text":"<p>There are a few things we wanted to keep in mind in the design:</p> <ol> <li>User-friendliness: Pixi is a user focussed tool that goes beyond developers. The feature should have good error reporting and helpful documentation from the start.</li> <li>Keep it simple: Not understanding the multiple environments feature shouldn't limit a user to use pixi. The feature should be \"invisible\" to the non-multi env use-cases.</li> <li>No Automatic Combinatorial: To ensure the dependency resolution process remains manageable, the solution should avoid a combinatorial explosion of dependency sets. By making the environments user defined and not automatically inferred by testing a matrix of the features.</li> <li>Single environment Activation: The design should allow only one environment to be active at any given time, simplifying the resolution process and preventing conflicts.</li> <li>Fixed lock files: It's crucial to preserve fixed lock files for consistency and predictability. Solutions must ensure reliability not just for authors but also for end-users, particularly at the time of lock file creation.</li> </ol>"},{"location":"features/multi_environment/#feature-environment-set-definitions","title":"Feature &amp; Environment Set Definitions","text":"<p>Introduce environment sets into the <code>pixi.toml</code> this describes environments based on <code>feature</code>'s. Introduce features into the <code>pixi.toml</code> that can describe parts of environments. As an environment goes beyond just <code>dependencies</code> the <code>features</code> should be described including the following fields:</p> <ul> <li><code>dependencies</code>: The conda package dependencies</li> <li><code>pypi-dependencies</code>: The pypi package dependencies</li> <li><code>system-requirements</code>: The system requirements of the environment</li> <li><code>activation</code>: The activation information for the environment</li> <li><code>platforms</code>: The platforms the environment can be run on.</li> <li><code>channels</code>: The channels used to create the environment. Adding the <code>priority</code> field to the channels to allow concatenation of channels instead of overwriting.</li> <li><code>target</code>: All the above features but also separated by targets.</li> <li><code>tasks</code>: Feature specific tasks, tasks in one environment are selected as default tasks for the environment.</li> </ul> Default features<pre><code>[dependencies] # short for [feature.default.dependencies]\npython = \"*\"\nnumpy = \"==2.3\"\n\n[pypi-dependencies] # short for [feature.default.pypi-dependencies]\npandas = \"*\"\n\n[system-requirements] # short for [feature.default.system-requirements]\nlibc = \"2.33\"\n\n[activation] # short for [feature.default.activation]\nscripts = [\"activate.sh\"]\n</code></pre> Different dependencies per feature<pre><code>[feature.py39.dependencies]\npython = \"~=3.9.0\"\n[feature.py310.dependencies]\npython = \"~=3.10.0\"\n[feature.test.dependencies]\npytest = \"*\"\n</code></pre> Full set of environment modification in one feature<pre><code>[feature.cuda]\ndependencies = {cuda = \"x.y.z\", cudnn = \"12.0\"}\npypi-dependencies = {torch = \"1.9.0\"}\nplatforms = [\"linux-64\", \"osx-arm64\"]\nactivation = {scripts = [\"cuda_activation.sh\"]}\nsystem-requirements = {cuda = \"12\"}\n# Channels concatenate using a priority instead of overwrite, so the default channels are still used.\n# Using the priority the concatenation is controlled, default is 0, the default channels are used last.\n# Highest priority comes first.\nchannels = [\"nvidia\", {channel = \"pytorch\", priority = -1}] # Results in:  [\"nvidia\", \"conda-forge\", \"pytorch\"] when the default is `conda-forge`\ntasks = { warmup = \"python warmup.py\" }\ntarget.osx-arm64 = {dependencies = {mlx = \"x.y.z\"}}\n</code></pre> Define tasks as defaults of an environment<pre><code>[feature.test.tasks]\ntest = \"pytest\"\n\n[environments]\ntest = [\"test\"]\n\n# `pixi run test` == `pixi run --environment test test`\n</code></pre> <p>The environment definition should contain the following fields:</p> <ul> <li><code>features: Vec&lt;Feature&gt;</code>: The features that are included in the environment set, which is also the default field in the environments.</li> <li><code>solve-group: String</code>: The solve group is used to group environments together at the solve stage.   This is useful for environments that need to have the same dependencies but might extend them with additional dependencies.   For instance when testing a production environment with additional test dependencies.</li> </ul> Creating environments from features<pre><code>[environments]\n# implicit: default = [\"default\"]\ndefault = [\"py39\"] # implicit: default = [\"py39\", \"default\"]\npy310 = [\"py310\"] # implicit: py310 = [\"py310\", \"default\"]\ntest = [\"test\"] # implicit: test = [\"test\", \"default\"]\ntest39 = [\"test\", \"py39\"] # implicit: test39 = [\"test\", \"py39\", \"default\"]\n</code></pre> Testing a production environment with additional dependencies<pre><code>[environments]\n# Creating a `prod` environment which is the minimal set of dependencies used for production.\nprod = {features = [\"py39\"], solve-group = \"prod\"}\n# Creating a `test_prod` environment which is the `prod` environment plus the `test` feature.\ntest_prod = {features = [\"py39\", \"test\"], solve-group = \"prod\"}\n# Using the `solve-group` to solve the `prod` and `test_prod` environments together\n# Which makes sure the tested environment has the same version of the dependencies as the production environment.\n</code></pre> Creating environments without including the default feature<pre><code>[dependencies]\npython = \"*\"\nnumpy = \"*\"\n\n[feature.lint.dependencies]\npre-commit = \"*\"\n\n[environments]\n# Create a custom environment which only has the `lint` feature (numpy isn't part of that env).\nlint = {features = [\"lint\"], no-default-feature = true}\n</code></pre>"},{"location":"features/multi_environment/#lock-file-structure","title":"lock file Structure","text":"<p>Within the <code>pixi.lock</code> file, a package may now include an additional <code>environments</code> field, specifying the environment to which it belongs. To avoid duplication the packages <code>environments</code> field may contain multiple environments so the lock file is of minimal size.</p> <pre><code>- platform: linux-64\n  name: pre-commit\n  version: 3.3.3\n  category: main\n  environments:\n    - dev\n    - test\n    - lint\n  ...:\n- platform: linux-64\n  name: python\n  version: 3.9.3\n  category: main\n  environments:\n    - dev\n    - test\n    - lint\n    - py39\n    - default\n  ...:\n</code></pre>"},{"location":"features/multi_environment/#user-interface-environment-activation","title":"User Interface Environment Activation","text":"<p>Users can manually activate the desired environment via command line or configuration. This approach guarantees a conflict-free environment by allowing only one feature set to be active at a time. For the user the cli would look like this:</p> Default behavior<pre><code>\u279c pixi run python\n# Runs python in the `default` environment\n</code></pre> Activating an specific environment<pre><code>\u279c pixi run -e test pytest\n\u279c pixi run --environment test pytest\n# Runs `pytest` in the `test` environment\n</code></pre> Activating a shell in an environment<pre><code>\u279c pixi shell -e cuda\npixi shell --environment cuda\n# Starts a shell in the `cuda` environment\n</code></pre> Running any command in an environment<pre><code>\u279c pixi run -e test any_command\n# Runs any_command in the `test` environment which doesn't require to be predefined as a task.\n</code></pre>"},{"location":"features/multi_environment/#ambiguous-environment-selection","title":"Ambiguous Environment Selection","text":"<p>It's possible to define tasks in multiple environments, in this case the user should be prompted to select the environment.</p> <p>Here is a simple example of a task only manifest:</p> <p>pixi.toml<pre><code>[project]\nname = \"test_ambiguous_env\"\nchannels = []\nplatforms = [\"linux-64\", \"win-64\", \"osx-64\", \"osx-arm64\"]\n\n[tasks]\ndefault = \"echo Default\"\nambi = \"echo Ambi::Default\"\n[feature.test.tasks]\ntest = \"echo Test\"\nambi = \"echo Ambi::Test\"\n\n[feature.dev.tasks]\ndev = \"echo Dev\"\nambi = \"echo Ambi::Dev\"\n\n[environments]\ndefault = [\"test\", \"dev\"]\ntest = [\"test\"]\ndev = [\"dev\"]\n</code></pre> Trying to run the <code>abmi</code> task will prompt the user to select the environment. As it is available in all environments.</p> Interactive selection of environments if task is in multiple environments<pre><code>\u279c pixi run ambi\n? The task 'ambi' can be run in multiple environments.\n\nPlease select an environment to run the task in: \u203a\n\u276f default # selecting default\n  test\n  dev\n\n\u2728 Pixi task (ambi in default): echo Ambi::Test\nAmbi::Test\n</code></pre> <p>As you can see it runs the task defined in the <code>feature.task</code> but it is run in the <code>default</code> environment. This happens because the <code>ambi</code> task is defined in the <code>test</code> feature, and it is overwritten in the default environment. So the <code>tasks.default</code> is now non-reachable from any environment.</p> <p>Some other results running in this example: <pre><code>\u279c pixi run --environment test ambi\n\u2728 Pixi task (ambi in test): echo Ambi::Test\nAmbi::Test\n\n\u279c pixi run --environment dev ambi\n\u2728 Pixi task (ambi in dev): echo Ambi::Dev\nAmbi::Dev\n\n# dev is run in the default environment\n\u279c pixi run dev\n\u2728 Pixi task (dev in default): echo Dev\nDev\n\n# dev is run in the dev environment\n\u279c pixi run -e dev dev\n\u2728 Pixi task (dev in dev): echo Dev\nDev\n</code></pre></p>"},{"location":"features/multi_environment/#important-links","title":"Important links","text":"<ul> <li>Initial writeup of the proposal: GitHub Gist by 0xbe7a</li> <li>GitHub project: #10</li> </ul>"},{"location":"features/multi_environment/#real-world-example-use-cases","title":"Real world example use cases","text":"Polarify test setup <p>In <code>polarify</code> they want to test multiple versions combined with multiple versions of polars. This is currently done by using a matrix in GitHub actions. This can be replaced by using multiple environments.</p> pixi.toml<pre><code>[project]\nname = \"polarify\"\n# ...\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-arm64\", \"osx-64\", \"win-64\"]\n\n[tasks]\npostinstall = \"pip install --no-build-isolation --no-deps --disable-pip-version-check -e .\"\n\n[dependencies]\npython = \"&gt;=3.9\"\npip = \"*\"\npolars = \"&gt;=0.14.24,&lt;0.21\"\n\n[feature.py39.dependencies]\npython = \"3.9.*\"\n[feature.py310.dependencies]\npython = \"3.10.*\"\n[feature.py311.dependencies]\npython = \"3.11.*\"\n[feature.py312.dependencies]\npython = \"3.12.*\"\n[feature.pl017.dependencies]\npolars = \"0.17.*\"\n[feature.pl018.dependencies]\npolars = \"0.18.*\"\n[feature.pl019.dependencies]\npolars = \"0.19.*\"\n[feature.pl020.dependencies]\npolars = \"0.20.*\"\n\n[feature.test.dependencies]\npytest = \"*\"\npytest-md = \"*\"\npytest-emoji = \"*\"\nhypothesis = \"*\"\n[feature.test.tasks]\ntest = \"pytest\"\n\n[feature.lint.dependencies]\npre-commit = \"*\"\n[feature.lint.tasks]\nlint = \"pre-commit run --all\"\n\n[environments]\npl017 = [\"pl017\", \"py39\", \"test\"]\npl018 = [\"pl018\", \"py39\", \"test\"]\npl019 = [\"pl019\", \"py39\", \"test\"]\npl020 = [\"pl020\", \"py39\", \"test\"]\npy39 = [\"py39\", \"test\"]\npy310 = [\"py310\", \"test\"]\npy311 = [\"py311\", \"test\"]\npy312 = [\"py312\", \"test\"]\n</code></pre> .github/workflows/test.yml<pre><code>jobs:\n  tests-per-env:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [py311, py312]\n    steps:\n    - uses: actions/checkout@v4\n      - uses: prefix-dev/setup-pixi@v0.5.1\n        with:\n          environments: ${{ matrix.environment }}\n      - name: Run tasks\n        run: |\n          pixi run --environment ${{ matrix.environment }} test\n  tests-with-multiple-envs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: prefix-dev/setup-pixi@v0.5.1\n      with:\n       environments: pl017 pl018\n    - run: |\n        pixi run -e pl017 test\n        pixi run -e pl018 test\n</code></pre> Test vs Production example <p>This is an example of a project that has a <code>test</code> feature and <code>prod</code> environment. The <code>prod</code> environment is a production environment that contains the run dependencies. The <code>test</code> feature is a set of dependencies and tasks that we want to put on top of the previously solved <code>prod</code> environment. This is a common use case where we want to test the production environment with additional dependencies.</p> <p>pixi.toml<pre><code>[project]\nname = \"my-app\"\n# ...\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-arm64\", \"linux-64\"]\n\n[tasks]\npostinstall-e = \"pip install --no-build-isolation --no-deps --disable-pip-version-check -e .\"\npostinstall = \"pip install --no-build-isolation --no-deps --disable-pip-version-check .\"\ndev = \"uvicorn my_app.app:main --reload\"\nserve = \"uvicorn my_app.app:main\"\n\n[dependencies]\npython = \"&gt;=3.12\"\npip = \"*\"\npydantic = \"&gt;=2\"\nfastapi = \"&gt;=0.105.0\"\nsqlalchemy = \"&gt;=2,&lt;3\"\nuvicorn = \"*\"\naiofiles = \"*\"\n\n[feature.test.dependencies]\npytest = \"*\"\npytest-md = \"*\"\npytest-asyncio = \"*\"\n[feature.test.tasks]\ntest = \"pytest --md=report.md\"\n\n[environments]\n# both default and prod will have exactly the same dependency versions when they share a dependency\ndefault = {features = [\"test\"], solve-group = \"prod-group\"}\nprod = {features = [], solve-group = \"prod-group\"}\n</code></pre> In ci you would run the following commands: <pre><code>pixi run postinstall-e &amp;&amp; pixi run test\n</code></pre> Locally you would run the following command: <pre><code>pixi run postinstall-e &amp;&amp; pixi run dev\n</code></pre></p> <p>Then in a Dockerfile you would run the following command: Dockerfile<pre><code>FROM ghcr.io/prefix-dev/pixi:latest # this doesn't exist yet\nWORKDIR /app\nCOPY . .\nRUN pixi run --environment prod postinstall\nEXPOSE 8080\nCMD [\"/usr/local/bin/pixi\", \"run\", \"--environment\", \"prod\", \"serve\"]\n</code></pre></p> Multiple machines from one project <p>This is an example for an ML project that should be executable on a machine that supports <code>cuda</code> and <code>mlx</code>. It should also be executable on machines that don't support <code>cuda</code> or <code>mlx</code>, we use the <code>cpu</code> feature for this.</p> pixi.toml<pre><code>[project]\nname = \"my-ml-project\"\ndescription = \"A project that does ML stuff\"\nauthors = [\"Your Name &lt;your.name@gmail.com&gt;\"]\nchannels = [\"conda-forge\", \"pytorch\"]\n# All platforms that are supported by the project as the features will take the intersection of the platforms defined there.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[tasks]\ntrain-model = \"python train.py\"\nevaluate-model = \"python test.py\"\n\n[dependencies]\npython = \"3.11.*\"\npytorch = {version = \"&gt;=2.0.1\", channel = \"pytorch\"}\ntorchvision = {version = \"&gt;=0.15\", channel = \"pytorch\"}\npolars = \"&gt;=0.20,&lt;0.21\"\nmatplotlib-base = \"&gt;=3.8.2,&lt;3.9\"\nipykernel = \"&gt;=6.28.0,&lt;6.29\"\n\n[feature.cuda]\nplatforms = [\"win-64\", \"linux-64\"]\nchannels = [\"nvidia\", {channel = \"pytorch\", priority = -1}]\nsystem-requirements = {cuda = \"12.1\"}\n\n[feature.cuda.tasks]\ntrain-model = \"python train.py --cuda\"\nevaluate-model = \"python test.py --cuda\"\n\n[feature.cuda.dependencies]\npytorch-cuda = {version = \"12.1.*\", channel = \"pytorch\"}\n\n[feature.mlx]\nplatforms = [\"osx-arm64\"]\n# MLX is only available on macOS &gt;=13.5 (&gt;14.0 is recommended)\nsystem-requirements = {macos = \"13.5\"}\n\n[feature.mlx.tasks]\ntrain-model = \"python train.py --mlx\"\nevaluate-model = \"python test.py --mlx\"\n\n[feature.mlx.dependencies]\nmlx = \"&gt;=0.16.0,&lt;0.17.0\"\n\n[feature.cpu]\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[environments]\ncuda = [\"cuda\"]\nmlx = [\"mlx\"]\ndefault = [\"cpu\"]\n</code></pre> Running the project on a cuda machine<pre><code>pixi run train-model --environment cuda\n# will execute `python train.py --cuda`\n# fails if not on linux-64 or win-64 with cuda 12.1\n</code></pre> Running the project with mlx<pre><code>pixi run train-model --environment mlx\n# will execute `python train.py --mlx`\n# fails if not on osx-arm64\n</code></pre> Running the project on a machine without cuda or mlx<pre><code>pixi run train-model\n</code></pre>"},{"location":"features/multi_platform_configuration/","title":"Multi platform config","text":"<p>Pixi's vision includes being supported on all major platforms. Sometimes that needs some extra configuration to work well. On this page, you will learn what you can configure to align better with the platform you are making your application for.</p> <p>Here is an example manifest file that highlights some of the features:</p> <code>pixi.toml</code><code>pyproject.toml</code> pixi.toml<pre><code>[project]\n# Default project info....\n# A list of platforms you are supporting with your package.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[dependencies]\npython = \"&gt;=3.8\"\n\n[target.win-64.dependencies]\n# Overwrite the needed python version only on win-64\npython = \"3.7\"\n\n\n[activation]\nscripts = [\"setup.sh\"]\n\n[target.win-64.activation]\n# Overwrite activation scripts only for windows\nscripts = [\"setup.bat\"]\n</code></pre> pyproject.toml<pre><code>[tool.pixi.project]\n# Default project info....\n# A list of platforms you are supporting with your package.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[tool.pixi.dependencies]\npython = \"&gt;=3.8\"\n\n[tool.pixi.target.win-64.dependencies]\n# Overwrite the needed python version only on win-64\npython = \"~=3.7.0\"\n\n\n[tool.pixi.activation]\nscripts = [\"setup.sh\"]\n\n[tool.pixi.target.win-64.activation]\n# Overwrite activation scripts only for windows\nscripts = [\"setup.bat\"]\n</code></pre>"},{"location":"features/multi_platform_configuration/#platform-definition","title":"Platform definition","text":"<p>The <code>project.platforms</code> defines which platforms your project supports. When multiple platforms are defined, pixi determines which dependencies to install for each platform individually. All of this is stored in a lock file.</p> <p>Running <code>pixi install</code> on a platform that is not configured will warn the user that it is not setup for that platform:</p> <pre><code>\u276f pixi install\n  \u00d7 the project is not configured for your current platform\n   \u256d\u2500[pixi.toml:6:1]\n 6 \u2502 channels = [\"conda-forge\"]\n 7 \u2502 platforms = [\"osx-64\", \"osx-arm64\", \"win-64\"]\n   \u00b7             \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u00b7                             \u2570\u2500\u2500 add 'linux-64' here\n 8 \u2502\n   \u2570\u2500\u2500\u2500\u2500\n  help: The project needs to be configured to support your platform (linux-64).\n</code></pre>"},{"location":"features/multi_platform_configuration/#target-specifier","title":"Target specifier","text":"<p>With the target specifier, you can overwrite the original configuration specifically for a single platform. If you are targeting a specific platform in your target specifier that was not specified in your <code>project.platforms</code> then pixi will throw an error.</p>"},{"location":"features/multi_platform_configuration/#dependencies","title":"Dependencies","text":"<p>It might happen that you want to install a certain dependency only on a specific platform, or you might want to use a different version on different platforms.</p> pixi.toml<pre><code>[dependencies]\npython = \"&gt;=3.8\"\n\n[target.win-64.dependencies]\nmsmpi = \"*\"\npython = \"3.8\"\n</code></pre> <p>In the above example, we specify that we depend on <code>msmpi</code> only on Windows. We also specifically want <code>python</code> on <code>3.8</code> when installing on Windows. This will overwrite the dependencies from the generic set of dependencies. This will not touch any of the other platforms.</p> <p>You can use pixi's cli to add these dependencies to the manifest file.</p> <pre><code>pixi add --platform win-64 posix\n</code></pre> <p>This also works for the <code>host</code> and <code>build</code> dependencies.</p> <pre><code>pixi add --host --platform win-64 posix\npixi add --build --platform osx-64 clang\n</code></pre> <p>Which results in this.</p> pixi.toml<pre><code>[target.win-64.host-dependencies]\nposix = \"1.0.0.*\"\n\n[target.osx-64.build-dependencies]\nclang = \"16.0.6.*\"\n</code></pre>"},{"location":"features/multi_platform_configuration/#activation","title":"Activation","text":"<p>Pixi's vision is to enable completely cross-platform projects, but you often need to run tools that are not built by your projects. Generated activation scripts are often in this category, default scripts in unix are <code>bash</code> and for windows they are <code>bat</code></p> <p>To deal with this, you can define your activation scripts using the target definition.</p> <p>pixi.toml<pre><code>[activation]\nscripts = [\"setup.sh\", \"local_setup.bash\"]\n\n[target.win-64.activation]\nscripts = [\"setup.bat\", \"local_setup.bat\"]\n</code></pre> When this project is run on <code>win-64</code> it will only execute the target scripts not the scripts specified in the default <code>activation.scripts</code></p>"},{"location":"features/system_requirements/","title":"System Requirements in pixi","text":"<p>System requirements define the minimal system specifications necessary during dependency resolution for a project. For instance, specifying a Unix system with a particular minimal <code>libc</code> version ensures that dependencies are compatible with the project's environment.</p> <p>System specifications are closely related to virtual packages, allowing for flexible and accurate dependency management.</p>"},{"location":"features/system_requirements/#default-system-requirements","title":"Default System Requirements","text":"<p>The following configurations outline the default minimal system requirements for different operating systems:</p> LinuxWindowsosx-64osx-arm64 <pre><code># Default system requirements for Linux\n[system-requirements]\nlinux = \"4.18\"\nlibc = { family = \"glibc\", version = \"2.28\" }\n</code></pre> <p>Windows currently has no minimal system requirements defined. If your project requires specific Windows configurations, you should define them accordingly.</p> <pre><code># Default system requirements for macOS\n[system-requirements]\nmacos = \"13.0\"\n</code></pre> <pre><code># Default system requirements for macOS ARM64\n[system-requirements]\nmacos = \"13.0\"\n</code></pre>"},{"location":"features/system_requirements/#customizing-system-requirements","title":"Customizing System Requirements","text":"<p>You only need to define system requirements if your project necessitates a different set from the defaults. This is common when installing environments on older or newer versions of operating systems.</p>"},{"location":"features/system_requirements/#adjusting-for-older-systems","title":"Adjusting for Older Systems","text":"<p>If you're encountering an error like:</p> <pre><code>\u00d7 The current system has a mismatching virtual package. The project requires '__linux' to be at least version '4.18' but the system has version '4.12.14'\n</code></pre> <p>This indicates that the project's system requirements are higher than your current system's specifications. To resolve this, you can lower the system requirements in your project's configuration:</p> <pre><code>[system-requirements]\nlinux = \"4.12.14\"\n</code></pre> <p>This adjustment informs the dependency resolver to accommodate the older system version.</p>"},{"location":"features/system_requirements/#using-cuda-in-pixi","title":"Using CUDA in pixi","text":"<p>To utilize CUDA in your project, you must specify the desired CUDA version in the system-requirements table. This ensures that CUDA is recognized and appropriately locked into the lock file if necessary.</p> <p>Example Configuration</p> <pre><code>[system-requirements]\ncuda = \"12\"  # Replace \"12\" with the specific CUDA version you intend to use\n</code></pre>"},{"location":"features/system_requirements/#setting-system-requirements-environment-specific","title":"Setting System Requirements environment specific","text":"<p>This can be set per <code>feature</code> in the <code>the manifest</code> file.</p> <pre><code>[feature.cuda.system-requirements]\ncuda = \"12\"\n\n[environments]\ncuda = [\"cuda\"]\n</code></pre>"},{"location":"features/system_requirements/#available-override-options","title":"Available Override Options","text":"<p>In certain scenarios, you might need to override the system requirements detected on your machine. This can be particularly useful when working on systems that do not meet the project's default requirements.</p> <p>You can override virtual packages by setting the following environment variables:</p> <ul> <li><code>CONDA_OVERRIDE_CUDA</code>     - Description: Sets the CUDA version.     - Usage Example: <code>CONDA_OVERRIDE_CUDA=11</code></li> <li><code>CONDA_OVERRIDE_GLIBC</code>     - Description: Sets the glibc version.     - Usage Example: <code>CONDA_OVERRIDE_GLIBC=2.28</code></li> <li><code>CONDA_OVERRIDE_OSX</code>     - Description: Sets the macOS version.     - Usage Example: <code>CONDA_OVERRIDE_OSX=13.0</code></li> </ul>"},{"location":"features/system_requirements/#additional-resources","title":"Additional Resources","text":"<p>For more detailed information on managing <code>virtual packages</code> and overriding system requirements, refer to the Conda Documentation.</p>"},{"location":"ide_integration/devcontainer/","title":"Use pixi inside of a devcontainer","text":"<p>VSCode Devcontainers are a popular tool to develop on a project with a consistent environment. They are also used in GitHub Codespaces which makes it a great way to develop on a project without having to install anything on your local machine.</p> <p>To use pixi inside of a devcontainer, follow these steps:</p> <p>Create a new directory <code>.devcontainer</code> in the root of your project. Then, create the following two files in the <code>.devcontainer</code> directory:</p> .devcontainer/Dockerfile<pre><code>FROM mcr.microsoft.com/devcontainers/base:jammy\n\nARG PIXI_VERSION=v0.34.0\n\nRUN curl -L -o /usr/local/bin/pixi -fsSL --compressed \"https://github.com/prefix-dev/pixi/releases/download/${PIXI_VERSION}/pixi-$(uname -m)-unknown-linux-musl\" \\\n    &amp;&amp; chmod +x /usr/local/bin/pixi \\\n    &amp;&amp; pixi info\n\n# set some user and workdir settings to work nicely with vscode\nUSER vscode\nWORKDIR /home/vscode\n\nRUN echo 'eval \"$(pixi completion -s bash)\"' &gt;&gt; /home/vscode/.bashrc\n</code></pre> .devcontainer/devcontainer.json<pre><code>{\n    \"name\": \"my-project\",\n    \"build\": {\n      \"dockerfile\": \"Dockerfile\",\n      \"context\": \"..\",\n    },\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"ms-python.python\", \"charliermarsh.ruff\", \"GitHub.copilot\"]\n      }\n    },\n    \"features\": {\n      \"ghcr.io/devcontainers/features/docker-in-docker:2\": {}\n    },\n    \"mounts\": [\"source=${localWorkspaceFolderBasename}-pixi,target=${containerWorkspaceFolder}/.pixi,type=volume\"],\n    \"postCreateCommand\": \"sudo chown vscode .pixi &amp;&amp; pixi install\"\n}\n</code></pre> <p>Put <code>.pixi</code> in a mount</p> <p>In the above example, we mount the <code>.pixi</code> directory into a volume. This is needed since the <code>.pixi</code> directory shouldn't be on a case insensitive filesystem (default on macOS, Windows) but instead in its own volume. There are some conda packages (for example ncurses-feedstock#73) that contain files that only differ in case which leads to errors on case insensitive filesystems.</p>"},{"location":"ide_integration/devcontainer/#secrets","title":"Secrets","text":"<p>If you want to authenticate to a private conda channel, you can add secrets to your devcontainer.</p> .devcontainer/devcontainer.json<pre><code>{\n    \"build\": \"Dockerfile\",\n    \"context\": \"..\",\n    \"options\": [\n        \"--secret\",\n        \"id=prefix_dev_token,env=PREFIX_DEV_TOKEN\",\n    ],\n    // ...\n}\n</code></pre> .devcontainer/Dockerfile<pre><code># ...\nRUN --mount=type=secret,id=prefix_dev_token,uid=1000 \\\n    test -s /run/secrets/prefix_dev_token \\\n    &amp;&amp; pixi auth login --token \"$(cat /run/secrets/prefix_dev_token)\" https://repo.prefix.dev\n</code></pre> <p>These secrets need to be present either as an environment variable when starting the devcontainer locally or in your GitHub Codespaces settings under <code>Secrets</code>.</p>"},{"location":"ide_integration/jupyterlab/","title":"JupyterLab Integration","text":""},{"location":"ide_integration/jupyterlab/#basic-usage","title":"Basic usage","text":"<p>Using JupyterLab with pixi is very simple. You can just create a new pixi project and add the <code>jupyterlab</code> package to it. The full example is provided under the following Github link.</p> <pre><code>pixi init\npixi add jupyterlab\n</code></pre> <p>This will create a new pixi project and add the <code>jupyterlab</code> package to it. You can then start JupyterLab using the following command:</p> <pre><code>pixi run jupyter lab\n</code></pre> <p>If you want to add more \"kernels\" to JupyterLab, you can simply add them to your current project \u2013 as well as any dependencies from the scientific stack you might need.</p> <pre><code>pixi add bash_kernel ipywidgets matplotlib numpy pandas  # ...\n</code></pre>"},{"location":"ide_integration/jupyterlab/#what-kernels-are-available","title":"What kernels are available?","text":"<p>You can easily install more \"kernels\" for JupyterLab. The <code>conda-forge</code> repository has a number of interesting additional kernels - not just Python!</p> <ul> <li><code>bash_kernel</code> A kernel for bash</li> <li><code>xeus-cpp</code> A C++ kernel based on the new clang-repl</li> <li><code>xeus-cling</code> A C++ kernel based on the slightly older Cling</li> <li><code>xeus-lua</code> A Lua kernel</li> <li><code>xeus-sql</code> A kernel for SQL</li> <li><code>r-irkernel</code> An R kernel</li> </ul>"},{"location":"ide_integration/jupyterlab/#advanced-usage","title":"Advanced usage","text":"<p>If you want to have only one instance of JupyterLab running but still want per-directory Pixi environments, you can use one of the kernels provided by the <code>pixi-kernel</code> package.</p>"},{"location":"ide_integration/jupyterlab/#configuring-jupyterlab","title":"Configuring JupyterLab","text":"<p>To get started, create a Pixi project, add <code>jupyterlab</code> and <code>pixi-kernel</code> and then start JupyterLab:</p> <pre><code>pixi init\npixi add jupyterlab pixi-kernel\npixi run jupyter lab\n</code></pre> <p>This will start JupyterLab and open it in your browser.</p> <p> </p> <p><code>pixi-kernel</code> searches for a manifest file, either <code>pixi.toml</code> or <code>pyproject.toml</code>, in the same directory of your notebook or in any parent directory. When it finds one, it will use the environment specified in the manifest file to start the kernel and run your notebooks.</p>"},{"location":"ide_integration/jupyterlab/#binder","title":"Binder","text":"<p>If you just want to check a JupyterLab environment running in the cloud using <code>pixi-kernel</code>, you can visit Binder.</p>"},{"location":"ide_integration/pycharm/","title":"PyCharm Integration","text":"<p>You can use PyCharm with pixi environments by using the <code>conda</code> shim provided by the pixi-pycharm package.</p>"},{"location":"ide_integration/pycharm/#how-to-use","title":"How to use","text":"<p>To get started, add <code>pixi-pycharm</code> to your pixi project.</p> <pre><code>pixi add pixi-pycharm\n</code></pre> <p>This will ensure that the conda shim is installed in your project's environment.</p> <p>Having <code>pixi-pycharm</code> installed, you can now configure PyCharm to use your pixi environments. Go to the Add Python Interpreter dialog (bottom right corner of the PyCharm window) and select Conda Environment. Set Conda Executable to the full path of the <code>conda</code> file (on Windows: <code>conda.bat</code>) which is located in <code>.pixi/envs/default/libexec</code>. You can get the path using the following command:</p> Linux &amp; macOSWindows <pre><code>pixi run 'echo $CONDA_PREFIX/libexec/conda'\n</code></pre> <pre><code>pixi run 'echo $CONDA_PREFIX\\\\libexec\\\\conda.bat'\n</code></pre> <p>This is an executable that tricks PyCharm into thinking it's the proper <code>conda</code> executable. Under the hood it redirects all calls to the corresponding <code>pixi</code> equivalent.</p> <p>Use the conda shim from this pixi project</p> <p>Please make sure that this is the <code>conda</code> shim from this pixi project and not another one. If you use multiple pixi projects, you might have to adjust the path accordingly as PyCharm remembers the path to the conda executable.</p> <p> </p> <p>Having selected the environment, PyCharm will now use the Python interpreter from your pixi environment.</p> <p>PyCharm should now be able to show you the installed packages as well.</p> <p> </p> <p>You can now run your programs and tests as usual.</p> <p> </p> <p>Mark <code>.pixi</code> as excluded</p> <p>In order for PyCharm to not get confused about the <code>.pixi</code> directory, please mark it as excluded.</p> <p> </p> <p>Also, when using a remote interpreter, you should exclude the <code>.pixi</code> directory on the remote machine. Instead, you should run <code>pixi install</code> on the remote machine and select the conda shim from there.  </p>"},{"location":"ide_integration/pycharm/#multiple-environments","title":"Multiple environments","text":"<p>If your project uses multiple environments to tests different Python versions or dependencies, you can add multiple environments to PyCharm by specifying Use existing environment in the Add Python Interpreter dialog.</p> <p> </p> <p>You can then specify the corresponding environment in the bottom right corner of the PyCharm window.</p> <p> </p>"},{"location":"ide_integration/pycharm/#multiple-pixi-projects","title":"Multiple pixi projects","text":"<p>When using multiple pixi projects, remember to select the correct Conda Executable for each project as mentioned above. It also might come up that you have multiple environments it might come up that you have multiple environments with the same name.</p> <p> </p> <p>It is recommended to rename the environments to something unique.</p>"},{"location":"ide_integration/pycharm/#debugging","title":"Debugging","text":"<p>Logs are written to <code>~/.cache/pixi-pycharm.log</code>. You can use them to debug problems. Please attach the logs when filing a bug report.</p>"},{"location":"ide_integration/r_studio/","title":"Developing R scripts in RStudio","text":"<p>You can use <code>pixi</code> to manage your R dependencies. The conda-forge channel contains a wide range of R packages that can be installed using <code>pixi</code>.</p>"},{"location":"ide_integration/r_studio/#installing-r-packages","title":"Installing R packages","text":"<p>R packages are usually prefixed with <code>r-</code> in the conda-forge channel. To install an R package, you can use the following command:</p> <pre><code>pixi add r-&lt;package-name&gt;\n# for example\npixi add r-ggplot2\n</code></pre>"},{"location":"ide_integration/r_studio/#using-r-packages-in-rstudio","title":"Using R packages in RStudio","text":"<p>To use the R packages installed by <code>pixi</code> in RStudio, you need to run <code>rstudio</code> from an activated environment. This can be achieved by running RStudio from <code>pixi shell</code> or from a task in the <code>pixi.toml</code> file.</p>"},{"location":"ide_integration/r_studio/#full-example","title":"Full example","text":"<p>The full example can be found here: RStudio example. Here is an example of a <code>pixi.toml</code> file that sets up an RStudio task:</p> <pre><code>[project]\nname = \"r\"\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\", \"osx-64\", \"osx-arm64\"]\n\n[target.linux.tasks]\nrstudio = \"rstudio\"\n\n[target.osx.tasks]\nrstudio = \"open -a rstudio\"\n# or alternatively with the full path:\n# rstudio = \"/Applications/RStudio.app/Contents/MacOS/RStudio\"\n\n[dependencies]\nr = \"&gt;=4.3,&lt;5\"\nr-ggplot2 = \"&gt;=3.5.0,&lt;3.6\"\n</code></pre> <p>Once RStudio has loaded, you can execute the following R code that uses the <code>ggplot2</code> package:</p> <pre><code># Load the ggplot2 package\nlibrary(ggplot2)\n\n# Load the built-in 'mtcars' dataset\ndata &lt;- mtcars\n\n# Create a scatterplot of 'mpg' vs 'wt'\nggplot(data, aes(x = wt, y = mpg)) +\n  geom_point() +\n  labs(x = \"Weight (1000 lbs)\", y = \"Miles per Gallon\") +\n  ggtitle(\"Fuel Efficiency vs. Weight\")\n</code></pre> <p>Note</p> <p>This example assumes that you have installed RStudio system-wide. We are working on updating RStudio as well as the R interpreter builds on Windows for maximum compatibility with <code>pixi</code>.</p>"},{"location":"reference/cli/","title":"Commands","text":""},{"location":"reference/cli/#global-options","title":"Global options","text":"<ul> <li><code>--verbose (-v|vv|vvv)</code> Increase the verbosity of the output messages, the -v|vv|vvv increases the level of verbosity respectively.</li> <li><code>--help (-h)</code> Shows help information, use <code>-h</code> to get the short version of the help.</li> <li><code>--version (-V)</code>: shows the version of pixi that is used.</li> <li><code>--quiet (-q)</code>: Decreases the amount of output.</li> <li><code>--color &lt;COLOR&gt;</code>: Whether the log needs to be colored [env: <code>PIXI_COLOR=</code>] [default: <code>auto</code>] [possible values: <code>always</code>, <code>never</code>, <code>auto</code>].   Pixi also honors the <code>FORCE_COLOR</code> and <code>NO_COLOR</code> environment variables.   They both take precedence over <code>--color</code> and <code>PIXI_COLOR</code>.</li> <li><code>--no-progress</code>: Disables the progress bar.[env: <code>PIXI_NO_PROGRESS</code>] [default: <code>false</code>]</li> </ul>"},{"location":"reference/cli/#init","title":"<code>init</code>","text":"<p>This command is used to create a new project. It initializes a <code>pixi.toml</code> file and also prepares a <code>.gitignore</code> to prevent the environment from being added to <code>git</code>.</p> <p>It also supports the <code>pyproject.toml</code> file, if you have a <code>pyproject.toml</code> file in the directory where you run <code>pixi init</code>, it appends the pixi data to the <code>pyproject.toml</code> instead of a new <code>pixi.toml</code> file.</p>"},{"location":"reference/cli/#arguments","title":"Arguments","text":"<ol> <li><code>[PATH]</code>: Where to place the project (defaults to current path) [default: <code>.</code>]</li> </ol>"},{"location":"reference/cli/#options","title":"Options","text":"<ul> <li><code>--channel &lt;CHANNEL&gt; (-c)</code>: specify a channel that the project uses. Defaults to <code>conda-forge</code>. (Allowed to be used more than once)</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: specify a platform that the project supports. (Allowed to be used more than once)</li> <li><code>--import &lt;ENV_FILE&gt; (-i)</code>: Import an existing conda environment file, e.g. <code>environment.yml</code>.</li> <li><code>--format &lt;FORMAT&gt;</code>: Specify the format of the project file, either <code>pyproject</code> or <code>pixi</code>. [default: <code>pixi</code>]</li> </ul> <p>Importing an environment.yml</p> <p>When importing an environment, the <code>pixi.toml</code> will be created with the dependencies from the environment file.   The <code>pixi.lock</code> will be created when you install the environment.   We don't support <code>git+</code> urls as dependencies for pip packages and for the <code>defaults</code> channel we use <code>main</code>, <code>r</code> and <code>msys2</code> as the default channels.</p> <pre><code>pixi init myproject\npixi init ~/myproject\npixi init  # Initializes directly in the current directory.\npixi init --channel conda-forge --channel bioconda myproject\npixi init --platform osx-64 --platform linux-64 myproject\npixi init --import environment.yml\npixi init --format pyproject\npixi init --format pixi\n</code></pre>"},{"location":"reference/cli/#add","title":"<code>add</code>","text":"<p>Adds dependencies to the manifest file. It will only add if the package with its version constraint is able to work with rest of the dependencies in the project. More info on multi-platform configuration.</p> <p>If the project manifest is a <code>pyproject.toml</code>, adding a pypi dependency will add it to the native pyproject <code>project.dependencies</code> array, or to the native <code>project.optional-dependencies</code> table if a feature is specified:</p> <ul> <li><code>pixi add --pypi boto3</code> would add <code>boto3</code> to the <code>project.dependencies</code> array</li> <li><code>pixi add --pypi boto3 --feature aws</code> would add <code>boto3</code> to the <code>project.dependencies.aws</code> array</li> </ul> <p>These dependencies will be read by pixi as if they had been added to the pixi <code>pypi-dependencies</code> tables of the default or a named feature.</p>"},{"location":"reference/cli/#arguments_1","title":"Arguments","text":"<ol> <li><code>[SPECS]</code>: The package(s) to add, space separated. The version constraint is optional.</li> </ol>"},{"location":"reference/cli/#options_1","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--host</code>: Specifies a host dependency, important for building a package.</li> <li><code>--build</code>: Specifies a build dependency, important for building a package.</li> <li><code>--pypi</code>: Specifies a PyPI dependency, not a conda package.   Parses dependencies as PEP508 requirements, supporting extras and versions.   See configuration for details.</li> <li><code>--no-install</code>: Don't install the package to the environment, only add the package to the lock-file.</li> <li><code>--no-lockfile-update</code>: Don't update the lock-file, implies the <code>--no-install</code> flag.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform for which the dependency should be added. (Allowed to be used more than once)</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature for which the dependency should be added.</li> <li><code>--editable</code>: Specifies an editable dependency, only use in combination with <code>--pypi</code>.</li> </ul> <pre><code>pixi add numpy # (1)!\npixi add numpy pandas \"pytorch&gt;=1.8\" # (2)!\npixi add \"numpy&gt;=1.22,&lt;1.24\" # (3)!\npixi add --manifest-path ~/myproject/pixi.toml numpy # (4)!\npixi add --host \"python&gt;=3.9.0\" # (5)!\npixi add --build cmake # (6)!\npixi add --platform osx-64 clang # (7)!\npixi add --no-install numpy # (8)!\npixi add --no-lockfile-update numpy # (9)!\npixi add --feature featurex numpy # (10)!\n\n# Add a pypi dependency\npixi add --pypi requests[security] # (11)!\npixi add --pypi Django==5.1rc1 # (12)!\npixi add --pypi \"boltons&gt;=24.0.0\" --feature lint # (13)!\npixi add --pypi \"boltons @ https://files.pythonhosted.org/packages/46/35/e50d4a115f93e2a3fbf52438435bb2efcf14c11d4fcd6bdcd77a6fc399c9/boltons-24.0.0-py3-none-any.whl\" # (14)!\npixi add --pypi \"exchangelib @ git+https://github.com/ecederstrand/exchangelib\" # (15)!\npixi add --pypi \"project @ file:///absolute/path/to/project\" # (16)!\npixi add --pypi \"project@file:///absolute/path/to/project\" --editable # (17)!\n</code></pre> <ol> <li>This will add the <code>numpy</code> package to the project with the latest available for the solved environment.</li> <li>This will add multiple packages to the project solving them all together.</li> <li>This will add the <code>numpy</code> package with the version constraint.</li> <li>This will add the <code>numpy</code> package to the project of the manifest file at the given path.</li> <li>This will add the <code>python</code> package as a host dependency. There is currently no different behavior for host dependencies.</li> <li>This will add the <code>cmake</code> package as a build dependency. There is currently no different behavior for build dependencies.</li> <li>This will add the <code>clang</code> package only for the <code>osx-64</code> platform.</li> <li>This will add the <code>numpy</code> package to the manifest and lockfile, without installing it in an environment.</li> <li>This will add the <code>numpy</code> package to the manifest without updating the lockfile or installing it in the environment.</li> <li>This will add the <code>numpy</code> package in the feature <code>featurex</code>.</li> <li>This will add the <code>requests</code> package as <code>pypi</code> dependency with the <code>security</code> extra.</li> <li>This will add the <code>pre-release</code> version of <code>Django</code> to the project as a <code>pypi</code> dependency.</li> <li>This will add the <code>boltons</code> package in the feature <code>lint</code> as <code>pypi</code> dependency.</li> <li>This will add the <code>boltons</code> package with the given <code>url</code> as <code>pypi</code> dependency.</li> <li>This will add the <code>exchangelib</code> package with the given <code>git</code> url as <code>pypi</code> dependency.</li> <li>This will add the <code>project</code> package with the given <code>file</code> url as <code>pypi</code> dependency.</li> <li>This will add the <code>project</code> package with the given <code>file</code> url as an <code>editable</code> package as <code>pypi</code> dependency.</li> </ol> <p>Tip</p> <p>If you want to use a non default pinning strategy, you can set it using pixi's configuration. <pre><code>pixi config set pinning-strategy no-pin --global\n</code></pre> The default is <code>semver</code> which will pin the dependencies to the latest major version or minor for <code>v0</code> versions.</p>"},{"location":"reference/cli/#install","title":"<code>install</code>","text":"<p>Installs an environment based on the manifest file. If there is no <code>pixi.lock</code> file or it is not up-to-date with the manifest file, it will (re-)generate the lock file.</p> <p><code>pixi install</code> only installs one environment at a time, if you have multiple environments you can select the right one with the <code>--environment</code> flag. If you don't provide an environment, the <code>default</code> environment will be installed.</p> <p>Running <code>pixi install</code> is not required before running other commands. As all commands interacting with the environment will first run the <code>install</code> command if the environment is not ready, to make sure you always run in a correct state. E.g. <code>pixi run</code>, <code>pixi shell</code>, <code>pixi shell-hook</code>, <code>pixi add</code>, <code>pixi remove</code> to name a few.</p>"},{"location":"reference/cli/#options_2","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to install, if none are provided the default environment will be used.</li> </ul> <pre><code>pixi install\npixi install --manifest-path ~/myproject/pixi.toml\npixi install --frozen\npixi install --locked\npixi install --environment lint\npixi install -e lint\n</code></pre>"},{"location":"reference/cli/#update","title":"<code>update</code>","text":"<p>The <code>update</code> command checks if there are newer versions of the dependencies and updates the <code>pixi.lock</code> file and environments accordingly. It will only update the lock file if the dependencies in the manifest file are still compatible with the new versions.</p>"},{"location":"reference/cli/#arguments_2","title":"Arguments","text":"<ol> <li><code>[PACKAGES]...</code> The packages to update, space separated. If no packages are provided, all packages will be updated.</li> </ol>"},{"location":"reference/cli/#options_3","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to install, if none are provided all the environments are updated.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform for which the dependencies should be updated.</li> <li><code>--dry-run (-n)</code>: Only show the changes that would be made, without actually updating the lock file or environment.</li> <li><code>--no-install</code>: Don't install the (solve) environment needed for solving pypi-dependencies.</li> <li><code>--json</code>: Output the changes in json format.</li> </ul> <pre><code>pixi update numpy\npixi update numpy pandas\npixi update --manifest-path ~/myproject/pixi.toml numpy\npixi update --environment lint python\npixi update -e lint -e schema -e docs pre-commit\npixi update --platform osx-arm64 mlx\npixi update -p linux-64 -p osx-64 numpy\npixi update --dry-run\npixi update --no-install boto3\n</code></pre>"},{"location":"reference/cli/#run","title":"<code>run</code>","text":"<p>The <code>run</code> commands first checks if the environment is ready to use. When you didn't run <code>pixi install</code> the run command will do that for you. The custom tasks defined in the manifest file are also available through the run command.</p> <p>You cannot run <code>pixi run source setup.bash</code> as <code>source</code> is not available in the <code>deno_task_shell</code> commandos and not an executable.</p>"},{"location":"reference/cli/#arguments_3","title":"Arguments","text":"<ol> <li><code>[TASK]...</code> The task you want to run in the projects environment, this can also be a normal command. And all arguments after the task will be passed to the task.</li> </ol>"},{"location":"reference/cli/#options_4","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to run the task in, if none are provided the default environment will be used or a selector will be given to select the right environment.</li> <li><code>--clean-env</code>: Run the task in a clean environment, this will remove all environment variables of the shell environment except for the ones pixi sets. THIS DOESN't WORK ON <code>Windows</code>. <pre><code>pixi run python\npixi run cowpy \"Hey pixi user\"\npixi run --manifest-path ~/myproject/pixi.toml python\npixi run --frozen python\npixi run --locked python\n# If you have specified a custom task in the pixi.toml you can run it with run as well\npixi run build\n# Extra arguments will be passed to the tasks command.\npixi run task argument1 argument2\n\n# If you have multiple environments you can select the right one with the --environment flag.\npixi run --environment cuda python\n\n# THIS DOESN'T WORK ON WINDOWS\n# If you want to run a command in a clean environment you can use the --clean-env flag.\n# The PATH should only contain the pixi environment here.\npixi run --clean-env \"echo \\$PATH\"\n</code></pre></li> </ul> <p>Info</p> <p>In <code>pixi</code> the <code>deno_task_shell</code> is the underlying runner of the run command. Checkout their documentation for the syntax and available commands. This is done so that the run commands can be run across all platforms.</p> <p>Cross environment tasks</p> <p>If you're using the <code>depends-on</code> feature of the <code>tasks</code>, the tasks will be run in the order you specified them. The <code>depends-on</code> can be used cross environment, e.g. you have this <code>pixi.toml</code>:</p> pixi.toml <pre><code>[tasks]\nstart = { cmd = \"python start.py\", depends-on = [\"build\"] }\n\n[feature.build.tasks]\nbuild = \"cargo build\"\n[feature.build.dependencies]\nrust = \"&gt;=1.74\"\n\n[environments]\nbuild = [\"build\"]\n</code></pre> <p>Then you're able to run the <code>build</code> from the <code>build</code> environment and <code>start</code> from the default environment. By only calling: <pre><code>pixi run start\n</code></pre></p>"},{"location":"reference/cli/#exec","title":"<code>exec</code>","text":"<p>Runs a command in a temporary environment disconnected from any project. This can be useful to quickly test out a certain package or version.</p> <p>Temporary environments are cached. If the same command is run again, the same environment will be reused.</p> Cleaning temporary environments <p>Currently, temporary environments can only be cleaned up manually. Environments for <code>pixi exec</code> are stored under <code>cached-envs-v0/</code> in the cache directory. Run <code>pixi info</code> to find the cache directory.</p>"},{"location":"reference/cli/#arguments_4","title":"Arguments","text":"<ol> <li><code>&lt;COMMAND&gt;</code>: The command to run.</li> </ol>"},{"location":"reference/cli/#options_5","title":"Options:","text":"<ul> <li><code>--spec &lt;SPECS&gt; (-s)</code>: Matchspecs of packages to install. If this is not provided, the package is guessed from the command.</li> <li><code>--channel &lt;CHANNELS&gt; (-c)</code>: The channel to install the packages from. If not specified the default channel is used.</li> <li><code>--force-reinstall</code> If specified a new environment is always created even if one already exists.</li> </ul> <pre><code>pixi exec python\n\n# Add a constraint to the python version\npixi exec -s python=3.9 python\n\n# Run ipython and include the py-rattler package in the environment\npixi exec -s ipython -s py-rattler ipython\n\n# Force reinstall to recreate the environment and get the latest package versions\npixi exec --force-reinstall -s ipython -s py-rattler ipython\n</code></pre>"},{"location":"reference/cli/#remove","title":"<code>remove</code>","text":"<p>Removes dependencies from the manifest file.</p> <p>If the project manifest is a <code>pyproject.toml</code>, removing a pypi dependency with the <code>--pypi</code> flag will remove it from either - the native pyproject <code>project.dependencies</code> array or the native <code>project.optional-dependencies</code> table (if a feature is specified) - pixi <code>pypi-dependencies</code> tables of the default or a named feature (if a feature is specified)</p>"},{"location":"reference/cli/#arguments_5","title":"Arguments","text":"<ol> <li><code>&lt;DEPS&gt;...</code>: List of dependencies you wish to remove from the project.</li> </ol>"},{"location":"reference/cli/#options_6","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--host</code>: Specifies a host dependency, important for building a package.</li> <li><code>--build</code>: Specifies a build dependency, important for building a package.</li> <li><code>--pypi</code>: Specifies a PyPI dependency, not a conda package.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform from which the dependency should be removed.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature from which the dependency should be removed.</li> <li><code>--no-install</code>: Don't install the environment, only remove the package from the lock-file and manifest.</li> <li><code>--no-lockfile-update</code>: Don't update the lock-file, implies the <code>--no-install</code> flag.</li> </ul> <pre><code>pixi remove numpy\npixi remove numpy pandas pytorch\npixi remove --manifest-path ~/myproject/pixi.toml numpy\npixi remove --host python\npixi remove --build cmake\npixi remove --pypi requests\npixi remove --platform osx-64 --build clang\npixi remove --feature featurex clang\npixi remove --feature featurex --platform osx-64 clang\npixi remove --feature featurex --platform osx-64 --build clang\npixi remove --no-install numpy\n</code></pre>"},{"location":"reference/cli/#task","title":"<code>task</code>","text":"<p>If you want to make a shorthand for a specific command you can add a task for it.</p>"},{"location":"reference/cli/#options_7","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> </ul>"},{"location":"reference/cli/#task-add","title":"<code>task add</code>","text":"<p>Add a task to the manifest file, use <code>--depends-on</code> to add tasks you want to run before this task, e.g. build before an execute task.</p>"},{"location":"reference/cli/#arguments_6","title":"Arguments","text":"<ol> <li><code>&lt;NAME&gt;</code>: The name of the task.</li> <li><code>&lt;COMMAND&gt;</code>: The command to run. This can be more than one word.</li> </ol> <p>Info</p> <p>If you are using <code>$</code> for env variables they will be resolved before adding them to the task. If you want to use <code>$</code> in the task you need to escape it with a <code>\\</code>, e.g. <code>echo \\$HOME</code>.</p>"},{"location":"reference/cli/#options_8","title":"Options","text":"<ul> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: the platform for which this task should be added.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: the feature for which the task is added, if non provided the default tasks will be added.</li> <li><code>--depends-on &lt;DEPENDS_ON&gt;</code>: the task it depends on to be run before the one your adding.</li> <li><code>--cwd &lt;CWD&gt;</code>: the working directory for the task relative to the root of the project.</li> <li><code>--env &lt;ENV&gt;</code>: the environment variables as <code>key=value</code> pairs for the task, can be used multiple times, e.g. <code>--env \"VAR1=VALUE1\" --env \"VAR2=VALUE2\"</code>.</li> <li><code>--description &lt;DESCRIPTION&gt;</code>: a description of the task.</li> </ul> <pre><code>pixi task add cow cowpy \"Hello User\"\npixi task add tls ls --cwd tests\npixi task add test cargo t --depends-on build\npixi task add build-osx \"METAL=1 cargo build\" --platform osx-64\npixi task add train python train.py --feature cuda\npixi task add publish-pypi \"hatch publish --yes --repo main\" --feature build --env HATCH_CONFIG=config/hatch.toml --description \"Publish the package to pypi\"\n</code></pre> <p>This adds the following to the manifest file:</p> <pre><code>[tasks]\ncow = \"cowpy \\\"Hello User\\\"\"\ntls = { cmd = \"ls\", cwd = \"tests\" }\ntest = { cmd = \"cargo t\", depends-on = [\"build\"] }\n\n[target.osx-64.tasks]\nbuild-osx = \"METAL=1 cargo build\"\n\n[feature.cuda.tasks]\ntrain = \"python train.py\"\n\n[feature.build.tasks]\npublish-pypi = { cmd = \"hatch publish --yes --repo main\", env = { HATCH_CONFIG = \"config/hatch.toml\" }, description = \"Publish the package to pypi\" }\n</code></pre> <p>Which you can then run with the <code>run</code> command:</p> <pre><code>pixi run cow\n# Extra arguments will be passed to the tasks command.\npixi run test --test test1\n</code></pre>"},{"location":"reference/cli/#task-remove","title":"<code>task remove</code>","text":"<p>Remove the task from the manifest file</p>"},{"location":"reference/cli/#arguments_7","title":"Arguments","text":"<ul> <li><code>&lt;NAMES&gt;</code>: The names of the tasks, space separated.</li> </ul>"},{"location":"reference/cli/#options_9","title":"Options","text":"<ul> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: the platform for which this task is removed.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: the feature for which the task is removed.</li> </ul> <pre><code>pixi task remove cow\npixi task remove --platform linux-64 test\npixi task remove --feature cuda task\n</code></pre>"},{"location":"reference/cli/#task-alias","title":"<code>task alias</code>","text":"<p>Create an alias for a task.</p>"},{"location":"reference/cli/#arguments_8","title":"Arguments","text":"<ol> <li><code>&lt;ALIAS&gt;</code>: The alias name</li> <li><code>&lt;DEPENDS_ON&gt;</code>: The names of the tasks you want to execute on this alias, order counts, first one runs first.</li> </ol>"},{"location":"reference/cli/#options_10","title":"Options","text":"<ul> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: the platform for which this alias is created.</li> </ul> <pre><code>pixi task alias test-all test-py test-cpp test-rust\npixi task alias --platform linux-64 test test-linux\npixi task alias moo cow\n</code></pre>"},{"location":"reference/cli/#task-list","title":"<code>task list</code>","text":"<p>List all tasks in the project.</p>"},{"location":"reference/cli/#options_11","title":"Options","text":"<ul> <li><code>--environment</code>(<code>-e</code>): the environment's tasks list, if non is provided the default tasks will be listed.</li> <li><code>--summary</code>(<code>-s</code>): list the tasks per environment.</li> </ul> <pre><code>pixi task list\npixi task list --environment cuda\npixi task list --summary\n</code></pre>"},{"location":"reference/cli/#list","title":"<code>list</code>","text":"<p>List project's packages. Highlighted packages are explicit dependencies.</p>"},{"location":"reference/cli/#arguments_9","title":"Arguments","text":"<ol> <li><code>[REGEX]</code>: List only packages matching a regular expression (optional).</li> </ol>"},{"location":"reference/cli/#options_12","title":"Options","text":"<ul> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform to list packages for. Defaults to the current platform</li> <li><code>--json</code>: Whether to output in json format.</li> <li><code>--json-pretty</code>: Whether to output in pretty json format</li> <li><code>--sort-by &lt;SORT_BY&gt;</code>: Sorting strategy [default: name] [possible values: size, name, type]</li> <li><code>--explicit (-x)</code>: Only list the packages that are explicitly added to the manifest file.</li> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: The path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--environment (-e)</code>: The environment's packages to list, if non is provided the default environment's packages will be listed.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: Only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--no-install</code>: Don't install the environment for pypi solving, only update the lock-file if it can solve without installing. (Implied by <code>--frozen</code> and <code>--locked</code>)</li> </ul> <pre><code>pixi list\npixi list py\npixi list --json-pretty\npixi list --explicit\npixi list --sort-by size\npixi list --platform win-64\npixi list --environment cuda\npixi list --frozen\npixi list --locked\npixi list --no-install\n</code></pre> <p>Output will look like this, where <code>python</code> will be green as it is the package that was explicitly added to the manifest file:</p> <pre><code>\u279c pixi list\n Package           Version     Build               Size       Kind   Source\n _libgcc_mutex     0.1         conda_forge         2.5 KiB    conda  _libgcc_mutex-0.1-conda_forge.tar.bz2\n _openmp_mutex     4.5         2_gnu               23.1 KiB   conda  _openmp_mutex-4.5-2_gnu.tar.bz2\n bzip2             1.0.8       hd590300_5          248.3 KiB  conda  bzip2-1.0.8-hd590300_5.conda\n ca-certificates   2023.11.17  hbcca054_0          150.5 KiB  conda  ca-certificates-2023.11.17-hbcca054_0.conda\n ld_impl_linux-64  2.40        h41732ed_0          688.2 KiB  conda  ld_impl_linux-64-2.40-h41732ed_0.conda\n libexpat          2.5.0       hcb278e6_1          76.2 KiB   conda  libexpat-2.5.0-hcb278e6_1.conda\n libffi            3.4.2       h7f98852_5          56.9 KiB   conda  libffi-3.4.2-h7f98852_5.tar.bz2\n libgcc-ng         13.2.0      h807b86a_4          755.7 KiB  conda  libgcc-ng-13.2.0-h807b86a_4.conda\n libgomp           13.2.0      h807b86a_4          412.2 KiB  conda  libgomp-13.2.0-h807b86a_4.conda\n libnsl            2.0.1       hd590300_0          32.6 KiB   conda  libnsl-2.0.1-hd590300_0.conda\n libsqlite         3.44.2      h2797004_0          826 KiB    conda  libsqlite-3.44.2-h2797004_0.conda\n libuuid           2.38.1      h0b41bf4_0          32.8 KiB   conda  libuuid-2.38.1-h0b41bf4_0.conda\n libxcrypt         4.4.36      hd590300_1          98 KiB     conda  libxcrypt-4.4.36-hd590300_1.conda\n libzlib           1.2.13      hd590300_5          60.1 KiB   conda  libzlib-1.2.13-hd590300_5.conda\n ncurses           6.4         h59595ed_2          863.7 KiB  conda  ncurses-6.4-h59595ed_2.conda\n openssl           3.2.0       hd590300_1          2.7 MiB    conda  openssl-3.2.0-hd590300_1.conda\n python            3.12.1      hab00c5b_1_cpython  30.8 MiB   conda  python-3.12.1-hab00c5b_1_cpython.conda\n readline          8.2         h8228510_1          274.9 KiB  conda  readline-8.2-h8228510_1.conda\n tk                8.6.13      noxft_h4845f30_101  3.2 MiB    conda  tk-8.6.13-noxft_h4845f30_101.conda\n tzdata            2023d       h0c530f3_0          116.8 KiB  conda  tzdata-2023d-h0c530f3_0.conda\n xz                5.2.6       h166bdaf_0          408.6 KiB  conda  xz-5.2.6-h166bdaf_0.tar.bz2\n</code></pre>"},{"location":"reference/cli/#tree","title":"<code>tree</code>","text":"<p>Display the project's packages in a tree. Highlighted packages are those specified in the manifest.</p> <p>The package tree can also be inverted (<code>-i</code>), to see which packages require a specific dependencies.</p>"},{"location":"reference/cli/#arguments_10","title":"Arguments","text":"<ul> <li><code>REGEX</code> optional regex of which dependencies to filter the tree to, or which dependencies to start with when inverting the tree.</li> </ul>"},{"location":"reference/cli/#options_13","title":"Options","text":"<ul> <li><code>--invert (-i)</code>: Invert the dependency tree, that is given a <code>REGEX</code> pattern that matches some packages, show all the packages that depend on those.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform to list packages for. Defaults to the current platform</li> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: The path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--environment (-e)</code>: The environment's packages to list, if non is provided the default environment's packages will be listed.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: Only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--no-install</code>: Don't install the environment for pypi solving, only update the lock-file if it can solve without installing. (Implied by <code>--frozen</code> and <code>--locked</code>)</li> </ul> <pre><code>pixi tree\npixi tree pre-commit\npixi tree -i yaml\npixi tree --environment docs\npixi tree --platform win-64\n</code></pre> <p>Warning</p> <p>Use <code>-v</code> to show which <code>pypi</code> packages are not yet parsed correctly. The <code>extras</code> and <code>markers</code> parsing is still under development.</p> <p>Output will look like this, where direct packages in the manifest file will be green. Once a package has been displayed once, the tree won't continue to recurse through its dependencies (compare the first time <code>python</code> appears, vs the rest), and it will instead be marked with a star <code>(*)</code>.</p> <p>Version numbers are colored by the package type, yellow for Conda packages and blue for PyPI.</p> <pre><code>\u279c pixi tree\n\u251c\u2500\u2500 pre-commit v3.3.3\n\u2502   \u251c\u2500\u2500 cfgv v3.3.1\n\u2502   \u2502   \u2514\u2500\u2500 python v3.12.2\n\u2502   \u2502       \u251c\u2500\u2500 bzip2 v1.0.8\n\u2502   \u2502       \u251c\u2500\u2500 libexpat v2.6.2\n\u2502   \u2502       \u251c\u2500\u2500 libffi v3.4.2\n\u2502   \u2502       \u251c\u2500\u2500 libsqlite v3.45.2\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 libzlib v1.2.13\n\u2502   \u2502       \u251c\u2500\u2500 libzlib v1.2.13 (*)\n\u2502   \u2502       \u251c\u2500\u2500 ncurses v6.4.20240210\n\u2502   \u2502       \u251c\u2500\u2500 openssl v3.2.1\n\u2502   \u2502       \u251c\u2500\u2500 readline v8.2\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 ncurses v6.4.20240210 (*)\n\u2502   \u2502       \u251c\u2500\u2500 tk v8.6.13\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 libzlib v1.2.13 (*)\n\u2502   \u2502       \u2514\u2500\u2500 xz v5.2.6\n\u2502   \u251c\u2500\u2500 identify v2.5.35\n\u2502   \u2502   \u2514\u2500\u2500 python v3.12.2 (*)\n...\n\u2514\u2500\u2500 tbump v6.9.0\n...\n    \u2514\u2500\u2500 tomlkit v0.12.4\n        \u2514\u2500\u2500 python v3.12.2 (*)\n</code></pre> <p>A regex pattern can be specified to filter the tree to just those that show a specific direct, or transitive dependency:</p> <pre><code>\u279c pixi tree pre-commit\n\u2514\u2500\u2500 pre-commit v3.3.3\n    \u251c\u2500\u2500 virtualenv v20.25.1\n    \u2502   \u251c\u2500\u2500 filelock v3.13.1\n    \u2502   \u2502   \u2514\u2500\u2500 python v3.12.2\n    \u2502   \u2502       \u251c\u2500\u2500 libexpat v2.6.2\n    \u2502   \u2502       \u251c\u2500\u2500 readline v8.2\n    \u2502   \u2502       \u2502   \u2514\u2500\u2500 ncurses v6.4.20240210\n    \u2502   \u2502       \u251c\u2500\u2500 libsqlite v3.45.2\n    \u2502   \u2502       \u2502   \u2514\u2500\u2500 libzlib v1.2.13\n    \u2502   \u2502       \u251c\u2500\u2500 bzip2 v1.0.8\n    \u2502   \u2502       \u251c\u2500\u2500 libzlib v1.2.13 (*)\n    \u2502   \u2502       \u251c\u2500\u2500 libffi v3.4.2\n    \u2502   \u2502       \u251c\u2500\u2500 tk v8.6.13\n    \u2502   \u2502       \u2502   \u2514\u2500\u2500 libzlib v1.2.13 (*)\n    \u2502   \u2502       \u251c\u2500\u2500 xz v5.2.6\n    \u2502   \u2502       \u251c\u2500\u2500 ncurses v6.4.20240210 (*)\n    \u2502   \u2502       \u2514\u2500\u2500 openssl v3.2.1\n    \u2502   \u251c\u2500\u2500 platformdirs v4.2.0\n    \u2502   \u2502   \u2514\u2500\u2500 python v3.12.2 (*)\n    \u2502   \u251c\u2500\u2500 distlib v0.3.8\n    \u2502   \u2502   \u2514\u2500\u2500 python v3.12.2 (*)\n    \u2502   \u2514\u2500\u2500 python v3.12.2 (*)\n    \u251c\u2500\u2500 pyyaml v6.0.1\n...\n</code></pre> <p>Additionally, the tree can be inverted, and it can show which packages depend on a regex pattern. The packages specified in the manifest will also be highlighted (in this case <code>cffconvert</code> and <code>pre-commit</code> would be).</p> <pre><code>\u279c pixi tree -i yaml\n\nruamel.yaml v0.18.6\n\u251c\u2500\u2500 pykwalify v1.8.0\n\u2502   \u2514\u2500\u2500 cffconvert v2.0.0\n\u2514\u2500\u2500 cffconvert v2.0.0\n\npyyaml v6.0.1\n\u2514\u2500\u2500 pre-commit v3.3.3\n\nruamel.yaml.clib v0.2.8\n\u2514\u2500\u2500 ruamel.yaml v0.18.6\n    \u251c\u2500\u2500 pykwalify v1.8.0\n    \u2502   \u2514\u2500\u2500 cffconvert v2.0.0\n    \u2514\u2500\u2500 cffconvert v2.0.0\n\nyaml v0.2.5\n\u2514\u2500\u2500 pyyaml v6.0.1\n    \u2514\u2500\u2500 pre-commit v3.3.3\n</code></pre>"},{"location":"reference/cli/#shell","title":"<code>shell</code>","text":"<p>This command starts a new shell in the project's environment. To exit the pixi shell, simply run <code>exit</code>.</p>"},{"location":"reference/cli/#options_14","title":"Options","text":"<ul> <li><code>--change-ps1 &lt;true or false&gt;</code>: When set to false, the <code>(pixi)</code> prefix in the shell prompt is removed (default: <code>true</code>). The default behavior can be configured globally.</li> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to activate the shell in, if none are provided the default environment will be used or a selector will be given to select the right environment.</li> </ul> <pre><code>pixi shell\nexit\npixi shell --manifest-path ~/myproject/pixi.toml\nexit\npixi shell --frozen\nexit\npixi shell --locked\nexit\npixi shell --environment cuda\nexit\n</code></pre>"},{"location":"reference/cli/#shell-hook","title":"<code>shell-hook</code>","text":"<p>This command prints the activation script of an environment.</p>"},{"location":"reference/cli/#options_15","title":"Options","text":"<ul> <li><code>--shell &lt;SHELL&gt; (-s)</code>: The shell for which the activation script should be printed. Defaults to the current shell.   Currently supported variants: [<code>bash</code>, <code>zsh</code>, <code>xonsh</code>, <code>cmd</code>, <code>powershell</code>, <code>fish</code>, <code>nushell</code>]</li> <li><code>--manifest-path</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--frozen</code>: install the environment as defined in the lock file, doesn't update <code>pixi.lock</code> if it isn't up-to-date with manifest file. It can also be controlled by the <code>PIXI_FROZEN</code> environment variable (example: <code>PIXI_FROZEN=true</code>).</li> <li><code>--locked</code>: only install if the <code>pixi.lock</code> is up-to-date with the manifest file<sup>1</sup>. It can also be controlled by the <code>PIXI_LOCKED</code> environment variable (example: <code>PIXI_LOCKED=true</code>). Conflicts with <code>--frozen</code>.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to activate, if none are provided the default environment will be used or a selector will be given to select the right environment.</li> <li><code>--json</code>: Print all environment variables that are exported by running the activation script as JSON. When specifying   this option, <code>--shell</code> is ignored.</li> </ul> <pre><code>pixi shell-hook\npixi shell-hook --shell bash\npixi shell-hook --shell zsh\npixi shell-hook -s powershell\npixi shell-hook --manifest-path ~/myproject/pixi.toml\npixi shell-hook --frozen\npixi shell-hook --locked\npixi shell-hook --environment cuda\npixi shell-hook --json\n</code></pre> <p>Example use-case, when you want to get rid of the <code>pixi</code> executable in a Docker container.</p> <pre><code>pixi shell-hook --shell bash &gt; /etc/profile.d/pixi.sh\nrm ~/.pixi/bin/pixi # Now the environment will be activated without the need for the pixi executable.\n</code></pre>"},{"location":"reference/cli/#search","title":"<code>search</code>","text":"<p>Search a package, output will list the latest version of the package.</p>"},{"location":"reference/cli/#arguments_11","title":"Arguments","text":"<ol> <li><code>&lt;PACKAGE&gt;</code>: Name of package to search, it's possible to use wildcards (<code>*</code>).</li> </ol>"},{"location":"reference/cli/#options_16","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--channel &lt;CHANNEL&gt; (-c)</code>: specify a channel that the project uses. Defaults to <code>conda-forge</code>. (Allowed to be used more than once)</li> <li><code>--limit &lt;LIMIT&gt; (-l)</code>: optionally limit the number of search results</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: specify a platform that you want to search for. (default: current platform)</li> </ul> <pre><code>pixi search pixi\npixi search --limit 30 \"py*\"\n# search in a different channel and for a specific platform\npixi search -c robostack --platform linux-64 \"plotjuggler*\"\n</code></pre>"},{"location":"reference/cli/#self-update","title":"<code>self-update</code>","text":"<p>Update pixi to the latest version or a specific version. If pixi was installed using another package manager this feature might not be available and pixi should be updated using the package manager used to install it.</p>"},{"location":"reference/cli/#options_17","title":"Options","text":"<ul> <li><code>--version &lt;VERSION&gt;</code>: The desired version (to downgrade or upgrade to). Update to the latest version if not specified.</li> </ul> <pre><code>pixi self-update\npixi self-update --version 0.13.0\n</code></pre>"},{"location":"reference/cli/#info","title":"<code>info</code>","text":"<p>Shows helpful information about the pixi installation, cache directories, disk usage, and more. More information here.</p>"},{"location":"reference/cli/#options_18","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--extended</code>: extend the information with more slow queries to the system, like directory sizes.</li> <li><code>--json</code>: Get a machine-readable version of the information as output.</li> </ul> <pre><code>pixi info\npixi info --json --extended\n</code></pre>"},{"location":"reference/cli/#clean","title":"<code>clean</code>","text":"<p>Clean the parts of your system which are touched by pixi. Defaults to cleaning the environments and task cache. Use the <code>cache</code> subcommand to clean the cache</p>"},{"location":"reference/cli/#options_19","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to clean, if none are provided all environments will be removed.</li> </ul> <pre><code>pixi clean\n</code></pre>"},{"location":"reference/cli/#clean-cache","title":"<code>clean cache</code>","text":"<p>Clean the pixi cache on your system.</p>"},{"location":"reference/cli/#options_20","title":"Options","text":"<ul> <li><code>--pypi</code>: Clean the pypi cache.</li> <li><code>--conda</code>: Clean the conda cache.</li> <li><code>--yes</code>: Skip the confirmation prompt.</li> </ul> <pre><code>pixi clean cache # clean all pixi caches\npixi clean cache --pypi # clean only the pypi cache\npixi clean cache --conda # clean only the conda cache\npixi clean cache --yes # skip the confirmation prompt\n</code></pre>"},{"location":"reference/cli/#upload","title":"<code>upload</code>","text":"<p>Upload a package to a prefix.dev channel</p>"},{"location":"reference/cli/#arguments_12","title":"Arguments","text":"<ol> <li><code>&lt;HOST&gt;</code>: The host + channel to upload to.</li> <li><code>&lt;PACKAGE_FILE&gt;</code>: The package file to upload.</li> </ol> <pre><code>pixi upload https://prefix.dev/api/v1/upload/my_channel my_package.conda\n</code></pre>"},{"location":"reference/cli/#auth","title":"<code>auth</code>","text":"<p>This command is used to authenticate the user's access to remote hosts such as <code>prefix.dev</code> or <code>anaconda.org</code> for private channels.</p>"},{"location":"reference/cli/#auth-login","title":"<code>auth login</code>","text":"<p>Store authentication information for given host.</p> <p>Tip</p> <p>The host is real hostname not a channel.</p>"},{"location":"reference/cli/#arguments_13","title":"Arguments","text":"<ol> <li><code>&lt;HOST&gt;</code>: The host to authenticate with.</li> </ol>"},{"location":"reference/cli/#options_21","title":"Options","text":"<ul> <li><code>--token &lt;TOKEN&gt;</code>: The token to use for authentication with prefix.dev.</li> <li><code>--username &lt;USERNAME&gt;</code>: The username to use for basic HTTP authentication</li> <li><code>--password &lt;PASSWORD&gt;</code>: The password to use for basic HTTP authentication.</li> <li><code>--conda-token &lt;CONDA_TOKEN&gt;</code>: The token to use on <code>anaconda.org</code> / <code>quetz</code> authentication.</li> </ul> <pre><code>pixi auth login repo.prefix.dev --token pfx_JQEV-m_2bdz-D8NSyRSaAndHANx0qHjq7f2iD\npixi auth login anaconda.org --conda-token ABCDEFGHIJKLMNOP\npixi auth login https://myquetz.server --username john --password xxxxxx\n</code></pre>"},{"location":"reference/cli/#auth-logout","title":"<code>auth logout</code>","text":"<p>Remove authentication information for a given host.</p>"},{"location":"reference/cli/#arguments_14","title":"Arguments","text":"<ol> <li><code>&lt;HOST&gt;</code>: The host to authenticate with.</li> </ol> <pre><code>pixi auth logout &lt;HOST&gt;\npixi auth logout repo.prefix.dev\npixi auth logout anaconda.org\n</code></pre>"},{"location":"reference/cli/#config","title":"<code>config</code>","text":"<p>Use this command to manage the configuration.</p>"},{"location":"reference/cli/#options_22","title":"Options","text":"<ul> <li><code>--system (-s)</code>: Specify management scope to system configuration.</li> <li><code>--global (-g)</code>: Specify management scope to global configuration.</li> <li><code>--local (-l)</code>: Specify management scope to local configuration.</li> </ul> <p>Checkout the pixi configuration for more information about the locations.</p>"},{"location":"reference/cli/#config-edit","title":"<code>config edit</code>","text":"<p>Edit the configuration file in the default editor.</p>"},{"location":"reference/cli/#arguments_15","title":"Arguments","text":"<ol> <li><code>[EDITOR]</code>: The editor to use, defaults to <code>EDITOR</code> environment variable or <code>nano</code> on Unix and <code>notepad</code> on Windows</li> </ol> <pre><code>pixi config edit --system\npixi config edit --local\npixi config edit -g\npixi config edit --global code\npixi config edit --system vim\n</code></pre>"},{"location":"reference/cli/#config-list","title":"<code>config list</code>","text":"<p>List the configuration</p>"},{"location":"reference/cli/#arguments_16","title":"Arguments","text":"<ol> <li><code>[KEY]</code>: The key to list the value of. (all if not provided)</li> </ol>"},{"location":"reference/cli/#options_23","title":"Options","text":"<ul> <li><code>--json</code>: Output the configuration in JSON format.</li> </ul> <pre><code>pixi config list default-channels\npixi config list --json\npixi config list --system\npixi config list -g\n</code></pre>"},{"location":"reference/cli/#config-prepend","title":"<code>config prepend</code>","text":"<p>Prepend a value to a list configuration key.</p>"},{"location":"reference/cli/#arguments_17","title":"Arguments","text":"<ol> <li><code>&lt;KEY&gt;</code>: The key to prepend the value to.</li> <li><code>&lt;VALUE&gt;</code>: The value to prepend.</li> </ol> <pre><code>pixi config prepend default-channels conda-forge\n</code></pre>"},{"location":"reference/cli/#config-append","title":"<code>config append</code>","text":"<p>Append a value to a list configuration key.</p>"},{"location":"reference/cli/#arguments_18","title":"Arguments","text":"<ol> <li><code>&lt;KEY&gt;</code>: The key to append the value to.</li> <li><code>&lt;VALUE&gt;</code>: The value to append.</li> </ol> <pre><code>pixi config append default-channels robostack\npixi config append default-channels bioconda --global\n</code></pre>"},{"location":"reference/cli/#config-set","title":"<code>config set</code>","text":"<p>Set a configuration key to a value.</p>"},{"location":"reference/cli/#arguments_19","title":"Arguments","text":"<ol> <li><code>&lt;KEY&gt;</code>: The key to set the value of.</li> <li><code>[VALUE]</code>: The value to set. (if not provided, the key will be removed)</li> </ol> <pre><code>pixi config set default-channels '[\"conda-forge\", \"bioconda\"]'\npixi config set --global mirrors '{\"https://conda.anaconda.org/\": [\"https://prefix.dev/conda-forge\"]}'\npixi config set repodata-config.disable-zstd true --system\npixi config set --global detached-environments \"/opt/pixi/envs\"\npixi config set detached-environments false\n</code></pre>"},{"location":"reference/cli/#config-unset","title":"<code>config unset</code>","text":"<p>Unset a configuration key.</p>"},{"location":"reference/cli/#arguments_20","title":"Arguments","text":"<ol> <li><code>&lt;KEY&gt;</code>: The key to unset.</li> </ol> <pre><code>pixi config unset default-channels\npixi config unset --global mirrors\npixi config unset repodata-config.disable-zstd --system\n</code></pre>"},{"location":"reference/cli/#global","title":"<code>global</code>","text":"<p>Global is the main entry point for the part of pixi that executes on the global(system) level. All commands in this section are used to manage global installations of packages and environments through the global manifest. More info on the global manifest can be found here.</p> <p>Tip</p> <p>Binaries and environments installed globally are stored in <code>~/.pixi</code> by default, this can be changed by setting the <code>PIXI_HOME</code> environment variable.</p>"},{"location":"reference/cli/#global-add","title":"<code>global add</code>","text":"<p>Adds dependencies to a global environment. Without exposing the binaries of that package to the system by default.</p>"},{"location":"reference/cli/#arguments_21","title":"Arguments","text":"<ol> <li><code>[PACKAGE]</code>: The packages to add, this excepts the matchspec format. (e.g. <code>python=3.9.*</code>, <code>python [version='3.11.0', build_number=1]</code>)</li> </ol>"},{"location":"reference/cli/#options_24","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to install the package into.</li> <li><code>--expose &lt;EXPOSE&gt;</code>: A mapping from name to the binary to expose to the system.</li> </ul> <pre><code>pixi global add python=3.9.* --environment my-env\npixi global add python=3.9.* --expose py39=python3.9 --environment my-env\npixi global add numpy matplotlib --environment my-env\npixi global add numpy matplotlib --expose np=python3.9 --environment my-env\n</code></pre>"},{"location":"reference/cli/#global-edit","title":"<code>global edit</code>","text":"<p>Edit the global manifest file in the default editor.</p> <p>Will try to use the <code>EDITOR</code> environment variable, if not set it will use <code>nano</code> on Unix systems and <code>notepad</code> on Windows.</p>"},{"location":"reference/cli/#arguments_22","title":"Arguments","text":"<ol> <li><code>&lt;EDITOR&gt;</code>: The editor to use. (optional) <pre><code>pixi global edit\npixi global edit code\npixi global edit vim\n</code></pre></li> </ol>"},{"location":"reference/cli/#global-install","title":"<code>global install</code>","text":"<p>This command installs package(s) into its own environment and adds the binary to <code>PATH</code>. Allowing you to access it anywhere on your system without activating the environment.</p>"},{"location":"reference/cli/#arguments_23","title":"Arguments","text":"<p>1.<code>[PACKAGE]</code>: The package(s) to install, this can also be a version constraint.</p>"},{"location":"reference/cli/#options_25","title":"Options","text":"<ul> <li><code>--channel &lt;CHANNEL&gt; (-c)</code>: specify a channel that the project uses. Defaults to <code>conda-forge</code>. (Allowed to be used more than once)</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: specify a platform that you want to install the package for. (default: current platform)</li> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to install the package into. (default: name of the tool)</li> <li><code>--expose &lt;EXPOSE&gt;</code>: A mapping from name to the binary to expose to the system. (default: name of the tool)</li> <li><code>--with &lt;WITH&gt;</code>: Add additional dependencies to the environment. Their executables will not be exposed.</li> </ul> <pre><code>pixi global install ruff\n# Multiple packages can be installed at once\npixi global install starship rattler-build\n# Specify the channel(s)\npixi global install --channel conda-forge --channel bioconda trackplot\n# Or in a more concise form\npixi global install -c conda-forge -c bioconda trackplot\n\n# Support full conda matchspec\npixi global install python=3.9.*\npixi global install \"python [version='3.11.0', build_number=1]\"\npixi global install \"python [version='3.11.0', build=he550d4f_1_cpython]\"\npixi global install python=3.11.0=h10a6764_1_cpython\n\n# Install for a specific platform, only useful on osx-arm64\npixi global install --platform osx-64 ruff\n\n# Install a package with all its executables exposed, together with additional packages that don't expose anything\npixi global install ipython --with numpy --with scipy\n\n# Install into a specific environment name and expose all executables\npixi global install --environment data-science ipython jupyterlab numpy matplotlib\n\n# Expose the binary under a different name\npixi global install --expose \"py39=python3.9\" \"python=3.9.*\"\n</code></pre> <p>Tip</p> <p>Running <code>osx-64</code> on Apple Silicon will install the Intel binary but run it using Rosetta <pre><code>pixi global install --platform osx-64 ruff\n</code></pre></p> <p>After using global install, you can use the package you installed anywhere on your system.</p>"},{"location":"reference/cli/#global-uninstall","title":"<code>global uninstall</code>","text":"<p>Uninstalls environments from the global environment. This will remove the environment and all its dependencies from the global environment. It will also remove the related binaries from the system.</p>"},{"location":"reference/cli/#arguments_24","title":"Arguments","text":"<ol> <li><code>[ENVIRONMENT]</code>: The environments to uninstall.</li> </ol> <pre><code>pixi global uninstall my-env\npixi global uninstall pixi-pack rattler-build\n</code></pre>"},{"location":"reference/cli/#global-remove","title":"<code>global remove</code>","text":"<p>Removes a package from a global environment.</p>"},{"location":"reference/cli/#arguments_25","title":"Arguments","text":"<ol> <li><code>[PACKAGE]</code>: The packages to remove.</li> </ol>"},{"location":"reference/cli/#options_26","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to remove the package from.</li> </ul> <pre><code>pixi global remove -e my-env package1 package2\n</code></pre>"},{"location":"reference/cli/#global-list","title":"<code>global list</code>","text":"<p>This command shows the current installed global environments including what binaries come with it. A global installed package/environment can possibly contain multiple exposed binaries and they will be listed out in the command output.</p>"},{"location":"reference/cli/#options_27","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to install the package into. (default: name of the tool)</li> </ul> <p>We'll only show the dependencies and exposed binaries of the environment if they differ from the environment name. Here is an example of a few installed packages:</p> <p><pre><code>pixi global list\n</code></pre> Results in: <pre><code>Global environments at /home/user/.pixi:\n\u251c\u2500\u2500 gh: 2.57.0\n\u251c\u2500\u2500 pixi-pack: 0.1.8\n\u251c\u2500\u2500 python: 3.11.0\n\u2502   \u2514\u2500 exposes: 2to3, 2to3-3.11, idle3, idle3.11, pydoc, pydoc3, pydoc3.11, python, python3, python3-config, python3.1, python3.11, python3.11-config\n\u251c\u2500\u2500 rattler-build: 0.22.0\n\u251c\u2500\u2500 ripgrep: 14.1.0\n\u2502   \u2514\u2500 exposes: rg\n\u251c\u2500\u2500 vim: 9.1.0611\n\u2502   \u2514\u2500 exposes: ex, rview, rvim, view, vim, vimdiff, vimtutor, xxd\n\u2514\u2500\u2500 zoxide: 0.9.6\n</code></pre></p> <p>Here is an example of list of a single environment: <pre><code>pixi g list -e pixi-pack\n</code></pre> Results in: <pre><code>The 'pixi-pack' environment has 8 packages:\nPackage          Version    Build        Size\n_libgcc_mutex    0.1        conda_forge  2.5 KiB\n_openmp_mutex    4.5        2_gnu        23.1 KiB\nca-certificates  2024.8.30  hbcca054_0   155.3 KiB\nlibgcc           14.1.0     h77fa898_1   826.5 KiB\nlibgcc-ng        14.1.0     h69a702a_1   50.9 KiB\nlibgomp          14.1.0     h77fa898_1   449.4 KiB\nopenssl          3.3.2      hb9d3cd8_0   2.8 MiB\npixi-pack        0.1.8      hc762bcd_0   4.3 MiB\nPackage          Version    Build        Size\n\nExposes:\npixi-pack\nChannels:\nconda-forge\nPlatform: linux-64\n</code></pre></p>"},{"location":"reference/cli/#global-sync","title":"<code>global sync</code>","text":"<p>As the global manifest can be manually edited, this command will sync the global manifest with the current state of the global environment. You can modify the manifest in <code>$HOME/manifests/pixi_global.toml</code>.</p> <pre><code>pixi global sync\n</code></pre>"},{"location":"reference/cli/#global-expose","title":"<code>global expose</code>","text":"<p>Modify the exposed binaries of a global environment.</p>"},{"location":"reference/cli/#global-expose-add","title":"<code>global expose add</code>","text":"<p>Add exposed binaries from an environment to your global environment.</p>"},{"location":"reference/cli/#arguments_26","title":"Arguments","text":"<ol> <li><code>[MAPPING]</code>: The binaries to expose (<code>python</code>), or give a map to expose a binary under a different name. (e.g. <code>py310=python3.10</code>) The mapping is mapped as <code>exposed_name=binary_name</code>. Where the exposed name is the one you will be able to use in the terminal, and the binary name is the name of the binary in the environment.</li> </ol>"},{"location":"reference/cli/#options_28","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: The environment to expose the binaries from.</li> </ul> <pre><code>pixi global expose add python --environment my-env\npixi global expose add py310=python3.10 --environment python\n</code></pre>"},{"location":"reference/cli/#global-expose-remove","title":"<code>global expose remove</code>","text":"<p>Remove exposed binaries from the global environment.</p>"},{"location":"reference/cli/#arguments_27","title":"Arguments","text":"<ol> <li><code>[EXPOSED_NAME]</code>: The binaries to remove from the main global environment.</li> </ol> <pre><code>pixi global expose remove python\npixi global expose remove py310 python3\n</code></pre>"},{"location":"reference/cli/#global-update","title":"<code>global update</code>","text":"<p>Update all environments or specify an environment to update to the version.</p>"},{"location":"reference/cli/#arguments_28","title":"Arguments","text":"<ol> <li><code>[ENVIRONMENT]</code>: The environment(s) to update.</li> </ol> <pre><code>pixi global update\npixi global update pixi-pack\npixi global update bat rattler-build\n</code></pre>"},{"location":"reference/cli/#project","title":"<code>project</code>","text":"<p>This subcommand allows you to modify the project configuration through the command line interface.</p>"},{"location":"reference/cli/#options_29","title":"Options","text":"<ul> <li><code>--manifest-path &lt;MANIFEST_PATH&gt;</code>: the path to manifest file, by default it searches for one in the parent directories.</li> </ul>"},{"location":"reference/cli/#project-channel-add","title":"<code>project channel add</code>","text":"<p>Add channels to the channel list in the project configuration. When you add channels, the channels are tested for existence, added to the lock file and the environment is reinstalled.</p>"},{"location":"reference/cli/#arguments_29","title":"Arguments","text":"<ol> <li><code>&lt;CHANNEL&gt;</code>: The channels to add, name or URL.</li> </ol>"},{"location":"reference/cli/#options_30","title":"Options","text":"<ul> <li><code>--no-install</code>: do not update the environment, only add changed packages to the lock-file.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature for which the channel is added.</li> </ul> <pre><code>pixi project channel add robostack\npixi project channel add bioconda conda-forge robostack\npixi project channel add file:///home/user/local_channel\npixi project channel add https://repo.prefix.dev/conda-forge\npixi project channel add --no-install robostack\npixi project channel add --feature cuda nvidia\n</code></pre>"},{"location":"reference/cli/#project-channel-list","title":"<code>project channel list</code>","text":"<p>List the channels in the manifest file</p>"},{"location":"reference/cli/#options_31","title":"Options","text":"<ul> <li><code>urls</code>: show the urls of the channels instead of the names.</li> </ul> <pre><code>$ pixi project channel list\nEnvironment: default\n- conda-forge\n\n$ pixi project channel list --urls\nEnvironment: default\n- https://conda.anaconda.org/conda-forge/\n</code></pre>"},{"location":"reference/cli/#project-channel-remove","title":"<code>project channel remove</code>","text":"<p>List the channels in the manifest file</p>"},{"location":"reference/cli/#arguments_30","title":"Arguments","text":"<ol> <li><code>&lt;CHANNEL&gt;...</code>: The channels to remove, name(s) or URL(s).</li> </ol>"},{"location":"reference/cli/#options_32","title":"Options","text":"<ul> <li><code>--no-install</code>: do not update the environment, only add changed packages to the lock-file.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature for which the channel is removed.</li> </ul> <pre><code>pixi project channel remove conda-forge\npixi project channel remove https://conda.anaconda.org/conda-forge/\npixi project channel remove --no-install conda-forge\npixi project channel remove --feature cuda nvidia\n</code></pre>"},{"location":"reference/cli/#project-description-get","title":"<code>project description get</code>","text":"<p>Get the project description.</p> <pre><code>$ pixi project description get\nPackage management made easy!\n</code></pre>"},{"location":"reference/cli/#project-description-set","title":"<code>project description set</code>","text":"<p>Set the project description.</p>"},{"location":"reference/cli/#arguments_31","title":"Arguments","text":"<ol> <li><code>&lt;DESCRIPTION&gt;</code>: The description to set.</li> </ol> <pre><code>pixi project description set \"my new description\"\n</code></pre>"},{"location":"reference/cli/#project-environment-add","title":"<code>project environment add</code>","text":"<p>Add an environment to the manifest file.</p>"},{"location":"reference/cli/#arguments_32","title":"Arguments","text":"<ol> <li><code>&lt;NAME&gt;</code>: The name of the environment to add.</li> </ol>"},{"location":"reference/cli/#options_33","title":"Options","text":"<ul> <li><code>-f, --feature &lt;FEATURES&gt;</code>: Features to add to the environment.</li> <li><code>--solve-group &lt;SOLVE_GROUP&gt;</code>: The solve-group to add the environment to.</li> <li><code>--no-default-feature</code>: Don't include the default feature in the environment.</li> <li><code>--force</code>:  Update the manifest even if the environment already exists.</li> </ul> <pre><code>pixi project environment add env1 --feature feature1 --feature feature2\npixi project environment add env2 -f feature1 --solve-group test\npixi project environment add env3 -f feature1 --no-default-feature\npixi project environment add env3 -f feature1 --force\n</code></pre>"},{"location":"reference/cli/#project-environment-remove","title":"<code>project environment remove</code>","text":"<p>Remove an environment from the manifest file.</p>"},{"location":"reference/cli/#arguments_33","title":"Arguments","text":"<ol> <li><code>&lt;NAME&gt;</code>: The name of the environment to remove.</li> </ol> <pre><code>pixi project environment remove env1\n</code></pre>"},{"location":"reference/cli/#project-environment-list","title":"<code>project environment list</code>","text":"<p>List the environments in the manifest file.</p> <pre><code>pixi project environment list\n</code></pre>"},{"location":"reference/cli/#project-export-conda_environment","title":"<code>project export conda_environment</code>","text":"<p>Exports a conda <code>environment.yml</code> file. The file can be used to create a conda environment using conda/mamba:</p> <pre><code>pixi project export conda-environment environment.yml\nmamba create --name &lt;env&gt; --file environment.yml\n</code></pre>"},{"location":"reference/cli/#arguments_34","title":"Arguments","text":"<ol> <li><code>&lt;OUTPUT_PATH&gt;</code>: Optional path to render environment.yml to. Otherwise it will be printed to standard out.</li> </ol>"},{"location":"reference/cli/#options_34","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: Environment to render.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform to render.</li> </ul> <pre><code>pixi project export conda-environment --environment lint\npixi project export conda-environment --platform linux-64 environment.linux-64.yml\n</code></pre>"},{"location":"reference/cli/#project-export-conda_explicit_spec","title":"<code>project export conda_explicit_spec</code>","text":"<p>Render a platform-specific conda explicit specification file for an environment. The file can be then used to create a conda environment using conda/mamba:</p> <pre><code>mamba create --name &lt;env&gt; --file &lt;explicit spec file&gt;\n</code></pre> <p>As the explicit specification file format does not support pypi-dependencies, use the <code>--ignore-pypi-errors</code> option to ignore those dependencies.</p>"},{"location":"reference/cli/#arguments_35","title":"Arguments","text":"<ol> <li><code>&lt;OUTPUT_DIR&gt;</code>:  Output directory for rendered explicit environment spec files.</li> </ol>"},{"location":"reference/cli/#options_35","title":"Options","text":"<ul> <li><code>--environment &lt;ENVIRONMENT&gt; (-e)</code>: Environment to render. Can be repeated for multiple envs. Defaults to all environments.</li> <li><code>--platform &lt;PLATFORM&gt; (-p)</code>: The platform to render. Can be repeated for multiple platforms. Defaults to all platforms available for selected environments.</li> <li><code>--ignore-pypi-errors</code>: PyPI dependencies are not supported in the conda explicit spec file. This flag allows creating the spec file even if PyPI dependencies are present.</li> </ul> <pre><code>pixi project export conda_explicit_spec output\npixi project export conda_explicit_spec -e default -e test -p linux-64 output\n</code></pre>"},{"location":"reference/cli/#project-platform-add","title":"<code>project platform add</code>","text":"<p>Adds a platform(s) to the manifest file and updates the lock file.</p>"},{"location":"reference/cli/#arguments_36","title":"Arguments","text":"<ol> <li><code>&lt;PLATFORM&gt;...</code>: The platforms to add.</li> </ol>"},{"location":"reference/cli/#options_36","title":"Options","text":"<ul> <li><code>--no-install</code>: do not update the environment, only add changed packages to the lock-file.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature for which the platform will be added.</li> </ul> <pre><code>pixi project platform add win-64\npixi project platform add --feature test win-64\n</code></pre>"},{"location":"reference/cli/#project-platform-list","title":"<code>project platform list</code>","text":"<p>List the platforms in the manifest file.</p> <pre><code>$ pixi project platform list\nosx-64\nlinux-64\nwin-64\nosx-arm64\n</code></pre>"},{"location":"reference/cli/#project-platform-remove","title":"<code>project platform remove</code>","text":"<p>Remove platform(s) from the manifest file and updates the lock file.</p>"},{"location":"reference/cli/#arguments_37","title":"Arguments","text":"<ol> <li><code>&lt;PLATFORM&gt;...</code>: The platforms to remove.</li> </ol>"},{"location":"reference/cli/#options_37","title":"Options","text":"<ul> <li><code>--no-install</code>: do not update the environment, only add changed packages to the lock-file.</li> <li><code>--feature &lt;FEATURE&gt; (-f)</code>: The feature for which the platform will be removed.</li> </ul> <pre><code>pixi project platform remove win-64\npixi project platform remove --feature test win-64\n</code></pre>"},{"location":"reference/cli/#project-version-get","title":"<code>project version get</code>","text":"<p>Get the project version.</p> <pre><code>$ pixi project version get\n0.11.0\n</code></pre>"},{"location":"reference/cli/#project-version-set","title":"<code>project version set</code>","text":"<p>Set the project version.</p>"},{"location":"reference/cli/#arguments_38","title":"Arguments","text":"<ol> <li><code>&lt;VERSION&gt;</code>: The version to set.</li> </ol> <pre><code>pixi project version set \"0.13.0\"\n</code></pre>"},{"location":"reference/cli/#project-version-majorminorpatch","title":"<code>project version {major|minor|patch}</code>","text":"<p>Bump the project version to {MAJOR|MINOR|PATCH}.</p> <pre><code>pixi project version major\npixi project version minor\npixi project version patch\n</code></pre> <ol> <li> <p>An up-to-date lock file means that the dependencies in the lock file are allowed by the dependencies in the manifest file. For example</p> <ul> <li>a manifest with <code>python = \"&gt;= 3.11\"</code> is up-to-date with a <code>name: python, version: 3.11.0</code> in the <code>pixi.lock</code>.</li> <li>a manifest with <code>python = \"&gt;= 3.12\"</code> is not up-to-date with a <code>name: python, version: 3.11.0</code> in the <code>pixi.lock</code>.</li> </ul> <p>Being up-to-date does not mean that the lock file holds the latest version available on the channel for the given dependency.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"reference/pixi_configuration/","title":"The configuration of pixi itself","text":"<p>Apart from the project specific configuration pixi supports configuration options which are not required for the project to work but are local to the machine. The configuration is loaded in the following order:</p> LinuxmacOSWindows Priority Location Comments 1 <code>/etc/pixi/config.toml</code> System-wide configuration 2 <code>$XDG_CONFIG_HOME/pixi/config.toml</code> XDG compliant user-specific configuration 3 <code>$HOME/.config/pixi/config.toml</code> User-specific configuration 4 <code>$PIXI_HOME/config.toml</code> Global configuration in the user home directory. <code>PIXI_HOME</code> defaults to <code>~/.pixi</code> 5 <code>your_project/.pixi/config.toml</code> Project-specific configuration 6 Command line arguments (<code>--tls-no-verify</code>, <code>--change-ps1=false</code>, etc.) Configuration via command line arguments Priority Location Comments 1 <code>/etc/pixi/config.toml</code> System-wide configuration 2 <code>$XDG_CONFIG_HOME/pixi/config.toml</code> XDG compliant user-specific configuration 3 <code>$HOME/Library/Application Support/pixi/config.toml</code> User-specific configuration 4 <code>$PIXI_HOME/config.toml</code> Global configuration in the user home directory. <code>PIXI_HOME</code> defaults to <code>~/.pixi</code> 5 <code>your_project/.pixi/config.toml</code> Project-specific configuration 6 Command line arguments (<code>--tls-no-verify</code>, <code>--change-ps1=false</code>, etc.) Configuration via command line arguments Priority Location Comments 1 <code>C:\\ProgramData\\pixi\\config.toml</code> System-wide configuration 2 <code>%APPDATA%\\pixi\\config.toml</code> User-specific configuration 3 <code>$PIXI_HOME\\config.toml</code> Global configuration in the user home directory. <code>PIXI_HOME</code> defaults to <code>%USERPROFILE%/.pixi</code> 4 <code>your_project\\.pixi\\config.toml</code> Project-specific configuration 5 Command line arguments (<code>--tls-no-verify</code>, <code>--change-ps1=false</code>, etc.) Configuration via command line arguments <p>Note</p> <p>The highest priority wins. If a configuration file is found in a higher priority location, the values from the configuration read from lower priority locations are overwritten.</p> <p>Note</p> <p>To find the locations where <code>pixi</code> looks for configuration files, run <code>pixi</code> with <code>-vv</code>.</p>"},{"location":"reference/pixi_configuration/#reference","title":"Reference","text":"Casing In Configuration <p>In versions of pixi <code>0.20.1</code> and older the global configuration used snake_case we've changed to <code>kebab-case</code> for consistency with the rest of the configuration. But we still support the old <code>snake_case</code> configuration, for older configuration options. These are:</p> <ul> <li><code>default_channels</code></li> <li><code>change_ps1</code></li> <li><code>tls_no_verify</code></li> <li><code>authentication_override_file</code></li> <li><code>mirrors</code> and sub-options</li> <li><code>repodata-config</code> and sub-options</li> </ul> <p>The following reference describes all available configuration options.</p>"},{"location":"reference/pixi_configuration/#default-channels","title":"<code>default-channels</code>","text":"<p>The default channels to select when running <code>pixi init</code> or <code>pixi global install</code>. This defaults to only conda-forge. config.toml<pre><code>default-channels = [\"conda-forge\"]\n</code></pre></p> <p>Note</p> <p>The <code>default-channels</code> are only used when initializing a new project. Once initialized the <code>channels</code> are used from the project manifest.</p>"},{"location":"reference/pixi_configuration/#change-ps1","title":"<code>change-ps1</code>","text":"<p>When set to false, the <code>(pixi)</code> prefix in the shell prompt is removed. This applies to the <code>pixi shell</code> subcommand. You can override this from the CLI with <code>--change-ps1</code>.</p> config.toml<pre><code>change-ps1 = true\n</code></pre>"},{"location":"reference/pixi_configuration/#tls-no-verify","title":"<code>tls-no-verify</code>","text":"<p>When set to true, the TLS certificates are not verified.</p> <p>Warning</p> <p>This is a security risk and should only be used for testing purposes or internal networks.</p> <p>You can override this from the CLI with <code>--tls-no-verify</code>.</p> config.toml<pre><code>tls-no-verify = false\n</code></pre>"},{"location":"reference/pixi_configuration/#authentication-override-file","title":"<code>authentication-override-file</code>","text":"<p>Override from where the authentication information is loaded. Usually, we try to use the keyring to load authentication data from, and only use a JSON file as a fallback. This option allows you to force the use of a JSON file. Read more in the authentication section. config.toml<pre><code>authentication-override-file = \"/path/to/your/override.json\"\n</code></pre></p>"},{"location":"reference/pixi_configuration/#detached-environments","title":"<code>detached-environments</code>","text":"<p>The directory where pixi stores the project environments, what would normally be placed in the <code>.pixi/envs</code> folder in a project's root. It doesn't affect the environments built for <code>pixi global</code>. The location of environments created for a <code>pixi global</code> installation can be controlled using the <code>PIXI_HOME</code> environment variable.</p> <p>Warning</p> <p>We recommend against using this because any environment created for a project is no longer placed in the same folder as the project. This creates a disconnect between the project and its environments and manual cleanup of the environments is required when deleting the project.</p> <p>However, in some cases, this option can still be very useful, for instance to:</p> <ul> <li>force the installation on a specific filesystem/drive.</li> <li>install environments locally but keep the project on a network drive.</li> <li>let a system-administrator have more control over all environments on a system.</li> </ul> <p>This field can consist of two types of input.</p> <ul> <li>A boolean value, <code>true</code> or <code>false</code>, which will enable or disable the feature respectively. (not <code>\"true\"</code> or <code>\"false\"</code>, this is read as <code>false</code>)</li> <li>A string value, which will be the absolute path to the directory where the environments will be stored.</li> </ul> <p>config.toml<pre><code>detached-environments = true\n</code></pre> or: config.toml<pre><code>detached-environments = \"/opt/pixi/envs\"\n</code></pre></p> <p>The environments will be stored in the cache directory when this option is <code>true</code>. When you specify a custom path the environments will be stored in that directory.</p> <p>The resulting directory structure will look like this: config.toml<pre><code>detached-environments = \"/opt/pixi/envs\"\n</code></pre> <pre><code>/opt/pixi/envs\n\u251c\u2500\u2500 pixi-6837172896226367631\n\u2502   \u2514\u2500\u2500 envs\n\u2514\u2500\u2500 NAME_OF_PROJECT-HASH_OF_ORIGINAL_PATH\n    \u251c\u2500\u2500 envs # the runnable environments\n    \u2514\u2500\u2500 solve-group-envs # If there are solve groups\n</code></pre></p>"},{"location":"reference/pixi_configuration/#pinning-strategy","title":"<code>pinning-strategy</code>","text":"<p>The strategy to use for pinning dependencies when running <code>pixi add</code>. The default is <code>semver</code> but you can set the following:</p> <ul> <li><code>no-pin</code>: No pinning, resulting in an unconstraint dependency. <code>*</code></li> <li><code>semver</code>: Pinning to the latest version that satisfies the semver constraint. Resulting in a pin to major for most versions and to minor for <code>v0</code> versions.</li> <li><code>exact-version</code>: Pinning to the exact version, <code>1.2.3</code> -&gt; <code>==1.2.3</code>.</li> <li><code>major</code>: Pinning to the major version, <code>1.2.3</code> -&gt; <code>&gt;=1.2.3, &lt;2</code>.</li> <li><code>minor</code>: Pinning to the minor version, <code>1.2.3</code> -&gt; <code>&gt;=1.2.3, &lt;1.3</code>.</li> <li><code>latest-up</code>: Pinning to the latest version, <code>1.2.3</code> -&gt; <code>&gt;=1.2.3</code>.</li> </ul> config.toml<pre><code>pinning-strategy = \"no-pin\"\n</code></pre>"},{"location":"reference/pixi_configuration/#mirrors","title":"<code>mirrors</code>","text":"<p>Configuration for conda channel-mirrors, more info below.</p> config.toml<pre><code>[mirrors]\n# redirect all requests for conda-forge to the prefix.dev mirror\n\"https://conda.anaconda.org/conda-forge\" = [\n    \"https://prefix.dev/conda-forge\"\n]\n\n# redirect all requests for bioconda to one of the three listed mirrors\n# Note: for repodata we try the first mirror first.\n\"https://conda.anaconda.org/bioconda\" = [\n    \"https://conda.anaconda.org/bioconda\",\n    # OCI registries are also supported\n    \"oci://ghcr.io/channel-mirrors/bioconda\",\n    \"https://prefix.dev/bioconda\",\n]\n</code></pre>"},{"location":"reference/pixi_configuration/#repodata-config","title":"<code>repodata-config</code>","text":"<p>Configuration for repodata fetching. config.toml<pre><code>[repodata-config]\n# disable fetching of jlap, bz2 or zstd repodata files.\n# This should only be used for specific old versions of artifactory and other non-compliant\n# servers.\ndisable-jlap = true  # don't try to download repodata.jlap\ndisable-bzip2 = true # don't try to download repodata.json.bz2\ndisable-zstd = true  # don't try to download repodata.json.zst\n</code></pre></p>"},{"location":"reference/pixi_configuration/#pypi-config","title":"<code>pypi-config</code>","text":"<p>To setup a certain number of defaults for the usage of PyPI registries. You can use the following configuration options:</p> <ul> <li><code>index-url</code>: The default index URL to use for PyPI packages. This will be added to a manifest file on a <code>pixi init</code>.</li> <li><code>extra-index-urls</code>: A list of additional URLs to use for PyPI packages. This will be added to a manifest file on a <code>pixi init</code>.</li> <li><code>keyring-provider</code>: Allows the use of the keyring python package to store and retrieve credentials.</li> </ul> config.toml<pre><code>[pypi-config]\n# Main index url\nindex-url = \"https://pypi.org/simple\"\n# list of additional urls\nextra-index-urls = [\"https://pypi.org/simple2\"]\n# can be \"subprocess\" or \"disabled\"\nkeyring-provider = \"subprocess\"\n</code></pre> <p><code>index-url</code> and <code>extra-index-urls</code> are not globals</p> <p>Unlike pip, these settings, with the exception of <code>keyring-provider</code> will only modify the <code>pixi.toml</code>/<code>pyproject.toml</code> file and are not globally interpreted when not present in the manifest. This is because we want to keep the manifest file as complete and reproducible as possible.</p>"},{"location":"reference/pixi_configuration/#mirror-configuration","title":"Mirror configuration","text":"<p>You can configure mirrors for conda channels. We expect that mirrors are exact copies of the original channel. The implementation will look for the mirror key (a URL) in the <code>mirrors</code> section of the configuration file and replace the original URL with the mirror URL.</p> <p>To also include the original URL, you have to repeat it in the list of mirrors.</p> <p>The mirrors are prioritized based on the order of the list. We attempt to fetch the repodata (the most important file) from the first mirror in the list. The repodata contains all the SHA256 hashes of the individual packages, so it is important to get this file from a trusted source.</p> <p>You can also specify mirrors for an entire \"host\", e.g.</p> config.toml<pre><code>[mirrors]\n\"https://conda.anaconda.org\" = [\n    \"https://prefix.dev/\"\n]\n</code></pre> <p>This will forward all request to channels on anaconda.org to prefix.dev. Channels that are not currently mirrored on prefix.dev will fail in the above example.</p>"},{"location":"reference/pixi_configuration/#oci-mirrors","title":"OCI Mirrors","text":"<p>You can also specify mirrors on the OCI registry. There is a public mirror on the Github container registry (ghcr.io) that is maintained by the conda-forge team. You can use it like this:</p> config.toml<pre><code>[mirrors]\n\"https://conda.anaconda.org/conda-forge\" = [\n    \"oci://ghcr.io/channel-mirrors/conda-forge\"\n]\n</code></pre> <p>The GHCR mirror also contains <code>bioconda</code> packages. You can search the available packages on Github.</p>"},{"location":"reference/project_configuration/","title":"Configuration","text":"<p>The <code>pixi.toml</code> is the pixi project configuration file, also known as the project manifest.</p> <p>A <code>toml</code> file is structured in different tables. This document will explain the usage of the different tables. For more technical documentation check pixi on crates.io.</p> <p>Tip</p> <p>We also support the <code>pyproject.toml</code> file. It has the same structure as the <code>pixi.toml</code> file. except that you need to prepend the tables with <code>tool.pixi</code> instead of just the table name. For example, the <code>[project]</code> table becomes <code>[tool.pixi.project]</code>. There are also some small extras that are available in the <code>pyproject.toml</code> file, checkout the pyproject.toml documentation for more information.</p>"},{"location":"reference/project_configuration/#the-project-table","title":"The <code>project</code> table","text":"<p>The minimally required information in the <code>project</code> table is:</p> <pre><code>[project]\nchannels = [\"conda-forge\"]\nname = \"project-name\"\nplatforms = [\"linux-64\"]\n</code></pre>"},{"location":"reference/project_configuration/#name","title":"<code>name</code>","text":"<p>The name of the project.</p> <pre><code>name = \"project-name\"\n</code></pre>"},{"location":"reference/project_configuration/#channels","title":"<code>channels</code>","text":"<p>This is a list that defines the channels used to fetch the packages from. If you want to use channels hosted on <code>anaconda.org</code> you only need to use the name of the channel directly.</p> <pre><code>channels = [\"conda-forge\", \"robostack\", \"bioconda\", \"nvidia\", \"pytorch\"]\n</code></pre> <p>Channels situated on the file system are also supported with absolute file paths:</p> <pre><code>channels = [\"conda-forge\", \"file:///home/user/staged-recipes/build_artifacts\"]\n</code></pre> <p>To access private or public channels on prefix.dev or Quetz use the url including the hostname:</p> <pre><code>channels = [\"conda-forge\", \"https://repo.prefix.dev/channel-name\"]\n</code></pre>"},{"location":"reference/project_configuration/#platforms","title":"<code>platforms</code>","text":"<p>Defines the list of platforms that the project supports. Pixi solves the dependencies for all these platforms and puts them in the lock file (<code>pixi.lock</code>).</p> <pre><code>platforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n</code></pre> <p>The available platforms are listed here: link</p> <p>Special macOS behavior</p> <p>macOS has two platforms: <code>osx-64</code> for Intel Macs and <code>osx-arm64</code> for Apple Silicon Macs. To support both, include both in your platforms list. Fallback: If <code>osx-arm64</code> can't resolve, use <code>osx-64</code>. Running <code>osx-64</code> on Apple Silicon uses Rosetta for Intel binaries.</p>"},{"location":"reference/project_configuration/#version-optional","title":"<code>version</code> (optional)","text":"<p>The version of the project. This should be a valid version based on the conda Version Spec. See the version documentation, for an explanation of what is allowed in a Version Spec.</p> <pre><code>version = \"1.2.3\"\n</code></pre>"},{"location":"reference/project_configuration/#authors-optional","title":"<code>authors</code> (optional)","text":"<p>This is a list of authors of the project.</p> <pre><code>authors = [\"John Doe &lt;j.doe@prefix.dev&gt;\", \"Marie Curie &lt;mss1867@gmail.com&gt;\"]\n</code></pre>"},{"location":"reference/project_configuration/#description-optional","title":"<code>description</code> (optional)","text":"<p>This should contain a short description of the project.</p> <pre><code>description = \"A simple description\"\n</code></pre>"},{"location":"reference/project_configuration/#license-optional","title":"<code>license</code> (optional)","text":"<p>The license as a valid SPDX string (e.g. MIT AND Apache-2.0)</p> <pre><code>license = \"MIT\"\n</code></pre>"},{"location":"reference/project_configuration/#license-file-optional","title":"<code>license-file</code> (optional)","text":"<p>Relative path to the license file.</p> <pre><code>license-file = \"LICENSE.md\"\n</code></pre>"},{"location":"reference/project_configuration/#readme-optional","title":"<code>readme</code> (optional)","text":"<p>Relative path to the README file.</p> <pre><code>readme = \"README.md\"\n</code></pre>"},{"location":"reference/project_configuration/#homepage-optional","title":"<code>homepage</code> (optional)","text":"<p>URL of the project homepage.</p> <pre><code>homepage = \"https://pixi.sh\"\n</code></pre>"},{"location":"reference/project_configuration/#repository-optional","title":"<code>repository</code> (optional)","text":"<p>URL of the project source repository.</p> <pre><code>repository = \"https://github.com/prefix-dev/pixi\"\n</code></pre>"},{"location":"reference/project_configuration/#documentation-optional","title":"<code>documentation</code> (optional)","text":"<p>URL of the project documentation.</p> <pre><code>documentation = \"https://pixi.sh\"\n</code></pre>"},{"location":"reference/project_configuration/#conda-pypi-map-optional","title":"<code>conda-pypi-map</code> (optional)","text":"<p>Mapping of channel name or URL to location of mapping that can be URL/Path. Mapping should be structured in <code>json</code> format where <code>conda_name</code>: <code>pypi_package_name</code>. Example:</p> local/robostack_mapping.json<pre><code>{\n  \"jupyter-ros\": \"my-name-from-mapping\",\n  \"boltons\": \"boltons-pypi\"\n}\n</code></pre> <p>If <code>conda-forge</code> is not present in <code>conda-pypi-map</code> <code>pixi</code> will use <code>prefix.dev</code> mapping for it.</p> <pre><code>conda-pypi-map = { \"conda-forge\" = \"https://example.com/mapping\", \"https://repo.prefix.dev/robostack\" = \"local/robostack_mapping.json\"}\n</code></pre>"},{"location":"reference/project_configuration/#channel-priority-optional","title":"<code>channel-priority</code> (optional)","text":"<p>This is the setting for the priority of the channels in the solver step.</p> <p>Options:</p> <ul> <li> <p><code>strict</code>: Default, The channels are used in the order they are defined in the <code>channels</code> list.     Only packages from the first channel that has the package are used.     This ensures that different variants for a single package are not mixed from different channels.     Using packages from different incompatible channels like <code>conda-forge</code> and <code>main</code> can lead to hard to debug ABI incompatibilities.</p> <p>We strongly recommend not to switch the default. - <code>disabled</code>: There is no priority, all package variants from all channels will be set per package name and solved as one. Care should be taken when using this option. Since package variants can come from any channel when you use this mode, packages might not be compatible. This can cause hard to debug ABI incompatibilities.</p> <p>We strongly discourage using this option.</p> </li> </ul> <pre><code>channel-priority = \"disabled\"\n</code></pre> <p><code>channel-priority = \"disabled\"</code> is a security risk</p> <p>Disabling channel priority may lead to unpredictable dependency resolutions. This is a possible security risk as it may lead to packages being installed from unexpected channels. It's advisable to maintain the default strict setting and order channels thoughtfully. If necessary, specify a channel directly for a dependency. <pre><code>[project]\n# Putting conda-forge first solves most issues\nchannels = [\"conda-forge\", \"channel-name\"]\n[dependencies]\npackage = {version = \"*\", channel = \"channel-name\"}\n</code></pre></p>"},{"location":"reference/project_configuration/#the-tasks-table","title":"The <code>tasks</code> table","text":"<p>Tasks are a way to automate certain custom commands in your project. For example, a <code>lint</code> or <code>format</code> step. Tasks in a pixi project are essentially cross-platform shell commands, with a unified syntax across platforms. For more in-depth information, check the Advanced tasks documentation. Pixi's tasks are run in a pixi environment using <code>pixi run</code> and are executed using the <code>deno_task_shell</code>.</p> <pre><code>[tasks]\nsimple = \"echo This is a simple task\"\ncmd = { cmd=\"echo Same as a simple task but now more verbose\"}\ndepending = { cmd=\"echo run after simple\", depends-on=\"simple\"}\nalias = { depends-on=[\"depending\"]}\ndownload = { cmd=\"curl -o file.txt https://example.com/file.txt\" , outputs=[\"file.txt\"]}\nbuild = { cmd=\"npm build\", cwd=\"frontend\", inputs=[\"frontend/package.json\", \"frontend/*.js\"]}\nrun = { cmd=\"python run.py $ARGUMENT\", env={ ARGUMENT=\"value\" }}\nformat = { cmd=\"black $INIT_CWD\" } # runs black where you run pixi run format\nclean-env = { cmd = \"python isolated.py\", clean-env = true} # Only on Unix!\n</code></pre> <p>You can modify this table using <code>pixi task</code>.</p> <p>Note</p> <p>Specify different tasks for different platforms using the target table</p> <p>Info</p> <p>If you want to hide a task from showing up with <code>pixi task list</code> or <code>pixi info</code>, you can prefix the name with <code>_</code>. For example, if you want to hide <code>depending</code>, you can rename it to <code>_depending</code>.</p>"},{"location":"reference/project_configuration/#the-system-requirements-table","title":"The <code>system-requirements</code> table","text":"<p>The system requirements are used to define minimal system specifications used during dependency resolution.</p> <p>For example, we can define a unix system with a specific minimal libc version. <pre><code>[system-requirements]\nlibc = \"2.28\"\n</code></pre> or make the project depend on a specific version of <code>cuda</code>: <pre><code>[system-requirements]\ncuda = \"12\"\n</code></pre></p> <p>The options are:</p> <ul> <li><code>linux</code>: The minimal version of the linux kernel.</li> <li><code>libc</code>: The minimal version of the libc library. Also allows specifying the family of the libc library. e.g. <code>libc = { family=\"glibc\", version=\"2.28\" }</code></li> <li><code>macos</code>: The minimal version of the macOS operating system.</li> <li><code>cuda</code>: The minimal version of the CUDA library.</li> </ul> <p>More information in the system requirements documentation.</p>"},{"location":"reference/project_configuration/#the-pypi-options-table","title":"The <code>pypi-options</code> table","text":"<p>The <code>pypi-options</code> table is used to define options that are specific to PyPI registries. These options can be specified either at the root level, which will add it to the default options feature, or on feature level, which will create a union of these options when the features are included in the environment.</p> <p>The options that can be defined are:</p> <ul> <li><code>index-url</code>: replaces the main index url.</li> <li><code>extra-index-urls</code>: adds an extra index url.</li> <li><code>find-links</code>: similar to <code>--find-links</code> option in <code>pip</code>.</li> <li><code>no-build-isolation</code>: disables build isolation, can only be set per package.</li> <li><code>index-strategy</code>: allows for specifying the index strategy to use.</li> </ul> <p>These options are explained in the sections below. Most of these options are taken directly or with slight modifications from the uv settings. If any are missing that you need feel free to create an issue requesting them.</p>"},{"location":"reference/project_configuration/#alternative-registries","title":"Alternative registries","text":"<p>Strict Index Priority</p> <p>Unlike pip, because we make use of uv, we have a strict index priority. This means that the first index is used where a package can be found. The order is determined by the order in the toml file. Where the <code>extra-index-urls</code> are preferred over the <code>index-url</code>. Read more about this on the uv docs</p> <p>Often you might want to use an alternative or extra index for your project. This can be done by adding the <code>pypi-options</code> table to your <code>pixi.toml</code> file, the following options are available:</p> <ul> <li><code>index-url</code>: replaces the main index url. If this is not set the default index used is <code>https://pypi.org/simple</code>.    Only one <code>index-url</code> can be defined per environment.</li> <li><code>extra-index-urls</code>: adds an extra index url. The urls are used in the order they are defined. And are preferred over the <code>index-url</code>. These are merged across features into an environment.</li> <li><code>find-links</code>: which can either be a path <code>{path = './links'}</code> or a url <code>{url = 'https://example.com/links'}</code>.    This is similar to the <code>--find-links</code> option in <code>pip</code>. These are merged across features into an environment.</li> </ul> <p>An example:</p> <pre><code>[pypi-options]\nindex-url = \"https://pypi.org/simple\"\nextra-index-urls = [\"https://example.com/simple\"]\nfind-links = [{path = './links'}]\n</code></pre> <p>There are some examples in the pixi repository, that make use of this feature.</p> <p>Authentication Methods</p> <p>To read about existing authentication methods for private registries, please check the PyPI Authentication section.</p>"},{"location":"reference/project_configuration/#no-build-isolation","title":"No Build Isolation","text":"<p>Even though build isolation is a good default. One can choose to not isolate the build for a certain package name, this allows the build to access the <code>pixi</code> environment. This is convenient if you want to use <code>torch</code> or something similar for your build-process.</p> <pre><code>[dependencies]\npytorch = \"2.4.0\"\n\n[pypi-options]\nno-build-isolation = [\"detectron2\"]\n\n[pypi-dependencies]\ndetectron2 = { git = \"https://github.com/facebookresearch/detectron2.git\", rev = \"5b72c27ae39f99db75d43f18fd1312e1ea934e60\"}\n</code></pre> <p>Conda dependencies define the build environment</p> <p>To use <code>no-build-isolation</code> effectively, use conda dependencies to define the build environment. These are installed before the PyPI dependencies are resolved, this way these dependencies are available during the build process. In the example above adding <code>torch</code> as a PyPI dependency would be ineffective, as it would not yet be installed during the PyPI resolution phase.</p>"},{"location":"reference/project_configuration/#index-strategy","title":"Index Strategy","text":"<p>The strategy to use when resolving against multiple index URLs. Description modified from the uv documentation:</p> <p>By default, <code>uv</code> and thus <code>pixi</code>, will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (first-match). This prevents dependency confusion attacks, whereby an attack can upload a malicious package under the same name to a secondary index.</p> <p>One index strategy per environment</p> <p>Only one <code>index-strategy</code> can be defined per environment or solve-group, otherwise, an error will be shown.</p>"},{"location":"reference/project_configuration/#possible-values","title":"Possible values:","text":"<ul> <li>\"first-index\": Only use results from the first index that returns a match for a given package name</li> <li>\"unsafe-first-match\": Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next. Meaning if the package <code>a</code> is available on index <code>x</code> and <code>y</code>, it will prefer the version from <code>x</code> unless you've requested a package version that is only available on <code>y</code>.</li> <li>\"unsafe-best-match\": Search for every package name across all indexes, preferring the best version found. If a package version is in multiple indexes, only look at the entry for the first index. So given index, <code>x</code> and <code>y</code> that both contain package <code>a</code>, it will take the best version from either <code>x</code> or <code>y</code>, but should that version be available on both indexes it will prefer <code>x</code>.</li> </ul> <p>PyPI only</p> <p>The <code>index-strategy</code> only changes PyPI package resolution and not conda package resolution.</p>"},{"location":"reference/project_configuration/#the-dependencies-tables","title":"The <code>dependencies</code> table(s)","text":"<p>This section defines what dependencies you would like to use for your project.</p> <p>There are multiple dependencies tables. The default is <code>[dependencies]</code>, which are dependencies that are shared across platforms.</p> <p>Dependencies are defined using a VersionSpec. A <code>VersionSpec</code> combines a Version with an optional operator.</p> <p>Some examples are:</p> <pre><code># Use this exact package version\npackage0 = \"1.2.3\"\n# Use 1.2.3 up to 1.3.0\npackage1 = \"~=1.2.3\"\n# Use larger than 1.2 lower and equal to 1.4\npackage2 = \"&gt;1.2,&lt;=1.4\"\n# Bigger or equal than 1.2.3 or lower not including 1.0.0\npackage3 = \"&gt;=1.2.3|&lt;1.0.0\"\n</code></pre> <p>Dependencies can also be defined as a mapping where it is using a matchspec:</p> <pre><code>package0 = { version = \"&gt;=1.2.3\", channel=\"conda-forge\" }\npackage1 = { version = \"&gt;=1.2.3\", build=\"py34_0\" }\n</code></pre> <p>Tip</p> <p>The dependencies can be easily added using the <code>pixi add</code> command line. Running <code>add</code> for an existing dependency will replace it with the newest it can use.</p> <p>Note</p> <p>To specify different dependencies for different platforms use the target table</p>"},{"location":"reference/project_configuration/#dependencies","title":"<code>dependencies</code>","text":"<p>Add any conda package dependency that you want to install into the environment. Don't forget to add the channel to the project table should you use anything different than <code>conda-forge</code>. Even if the dependency defines a channel that channel should be added to the <code>project.channels</code> list.</p> <pre><code>[dependencies]\npython = \"&gt;3.9,&lt;=3.11\"\nrust = \"1.72\"\npytorch-cpu = { version = \"~=1.1\", channel = \"pytorch\" }\n</code></pre>"},{"location":"reference/project_configuration/#pypi-dependencies","title":"<code>pypi-dependencies</code>","text":"Details regarding the PyPI integration <p>We use <code>uv</code>, which is a new fast pip replacement written in Rust.</p> <p>We integrate uv as a library, so we use the uv resolver, to which we pass the conda packages as 'locked'. This disallows uv from installing these dependencies itself, and  ensures it uses the exact version of these packages in the resolution. This is unique amongst conda based package managers, which usually just call pip from a subprocess.</p> <p>The uv resolution is included in the lock file directly.</p> <p>Pixi directly supports depending on PyPI packages, the PyPA calls a distributed package a 'distribution'. There are Source and Binary distributions both of which are supported by pixi. These distributions are installed into the environment after the conda environment has been resolved and installed. PyPI packages are not indexed on prefix.dev but can be viewed on pypi.org.</p> <p>Important considerations</p> <ul> <li>Stability: PyPI packages might be less stable than their conda counterparts. Prefer using conda packages in the <code>dependencies</code> table where possible.</li> </ul>"},{"location":"reference/project_configuration/#version-specification","title":"Version specification:","text":"<p>These dependencies don't follow the conda matchspec specification. The <code>version</code> is a string specification of the version according to PEP404/PyPA. Additionally, a list of extra's can be included, which are essentially optional dependencies. Note that this <code>version</code> is distinct from the conda MatchSpec type. See the example below to see how this is used in practice:</p> <pre><code>[dependencies]\n# When using pypi-dependencies, python is needed to resolve pypi dependencies\n# make sure to include this\npython = \"&gt;=3.6\"\n\n[pypi-dependencies]\nfastapi = \"*\"  # This means any version (the wildcard `*` is a pixi addition, not part of the specification)\npre-commit = \"~=3.5.0\" # This is a single version specifier\n# Using the toml map allows the user to add `extras`\npandas = { version = \"&gt;=1.0.0\", extras = [\"dataframe\", \"sql\"]}\n\n# git dependencies\n# With ssh\nflask = { git = \"ssh://git@github.com/pallets/flask\" }\n# With https and a specific revision\nrequests = { git = \"https://github.com/psf/requests.git\", rev = \"0106aced5faa299e6ede89d1230bd6784f2c3660\" }\n# TODO: will support later -&gt; branch = '' or tag = '' to specify a branch or tag\n\n# You can also directly add a source dependency from a path, tip keep this relative to the root of the project.\nminimal-project = { path = \"./minimal-project\", editable = true}\n\n# You can also use a direct url, to either a `.tar.gz` or `.zip`, or a `.whl` file\nclick = { url = \"https://github.com/pallets/click/releases/download/8.1.7/click-8.1.7-py3-none-any.whl\" }\n\n# You can also just the default git repo, it will checkout the default branch\npytest = { git = \"https://github.com/pytest-dev/pytest.git\"}\n</code></pre>"},{"location":"reference/project_configuration/#full-specification","title":"Full specification","text":"<p>The full specification of a PyPI dependencies that pixi supports can be split into the following fields:</p>"},{"location":"reference/project_configuration/#extras","title":"<code>extras</code>","text":"<p>A list of extras to install with the package. e.g. <code>[\"dataframe\", \"sql\"]</code> The extras field works with all other version specifiers as it is an addition to the version specifier.</p> <pre><code>pandas = { version = \"&gt;=1.0.0\", extras = [\"dataframe\", \"sql\"]}\npytest = { git = \"URL\", extras = [\"dev\"]}\nblack = { url = \"URL\", extras = [\"cli\"]}\nminimal-project = { path = \"./minimal-project\", editable = true, extras = [\"dev\"]}\n</code></pre>"},{"location":"reference/project_configuration/#version","title":"<code>version</code>","text":"<p>The version of the package to install. e.g. <code>\"&gt;=1.0.0\"</code> or <code>*</code> which stands for any version, this is pixi specific. Version is our default field so using no inline table (<code>{}</code>) will default to this field.</p> <pre><code>py-rattler = \"*\"\nruff = \"~=1.0.0\"\npytest = {version = \"*\", extras = [\"dev\"]}\n</code></pre>"},{"location":"reference/project_configuration/#git","title":"<code>git</code>","text":"<p>A git repository to install from. This support both https:// and ssh:// urls.</p> <p>Use <code>git</code> in combination with <code>rev</code> or <code>subdirectory</code>:</p> <ul> <li><code>rev</code>: A specific revision to install. e.g. <code>rev = \"0106aced5faa299e6ede89d1230bd6784f2c3660</code></li> <li><code>subdirectory</code>: A subdirectory to install from. <code>subdirectory = \"src\"</code> or <code>subdirectory = \"src/packagex\"</code></li> </ul> <pre><code># Note don't forget the `ssh://` or `https://` prefix!\npytest = { git = \"https://github.com/pytest-dev/pytest.git\"}\nrequests = { git = \"https://github.com/psf/requests.git\", rev = \"0106aced5faa299e6ede89d1230bd6784f2c3660\" }\npy-rattler = { git = \"ssh://git@github.com/mamba-org/rattler.git\", subdirectory = \"py-rattler\" }\n</code></pre>"},{"location":"reference/project_configuration/#path","title":"<code>path</code>","text":"<p>A local path to install from. e.g. <code>path = \"./path/to/package\"</code> We would advise to keep your path projects in the project, and to use a relative path.</p> <p>Set <code>editable</code> to <code>true</code> to install in editable mode, this is highly recommended as it is hard to reinstall if you're not using editable mode. e.g. <code>editable = true</code></p> <pre><code>minimal-project = { path = \"./minimal-project\", editable = true}\n</code></pre>"},{"location":"reference/project_configuration/#url","title":"<code>url</code>","text":"<p>A URL to install a wheel or sdist directly from an url.</p> <pre><code>pandas = {url = \"https://files.pythonhosted.org/packages/3d/59/2afa81b9fb300c90531803c0fd43ff4548074fa3e8d0f747ef63b3b5e77a/pandas-2.2.1.tar.gz\"}\n</code></pre> Did you know you can use: <code>add --pypi</code>? <p>Use the <code>--pypi</code> flag with the <code>add</code> command to quickly add PyPI packages from the CLI. E.g <code>pixi add --pypi flask</code></p> <p>This does not support all the features of the <code>pypi-dependencies</code> table yet.</p>"},{"location":"reference/project_configuration/#source-dependencies-sdist","title":"Source dependencies (<code>sdist</code>)","text":"<p>The Source Distribution Format is a source based format (sdist for short), that a package can include alongside the binary wheel format. Because these distributions need to be built, the need a python executable to do this. This is why python needs to be present in a conda environment. Sdists usually depend on system packages to be built, especially when compiling C/C++ based python bindings. Think for example of Python SDL2 bindings depending on the C library: SDL2. To help built these dependencies we activate the conda environment that includes these pypi dependencies before resolving. This way when a source distribution depends on <code>gcc</code> for example, it's used from the conda environment instead of the system.</p>"},{"location":"reference/project_configuration/#host-dependencies","title":"<code>host-dependencies</code>","text":"<p>This table contains dependencies that are needed to build your project but which should not be included when your project is installed as part of another project. In other words, these dependencies are available during the build but are no longer available when your project is installed. Dependencies listed in this table are installed for the architecture of the target machine.</p> <pre><code>[host-dependencies]\npython = \"~=3.10.3\"\n</code></pre> <p>Typical examples of host dependencies are:</p> <ul> <li>Base interpreters: a Python package would list <code>python</code> here and an R package would list <code>mro-base</code> or <code>r-base</code>.</li> <li>Libraries your project links against during compilation like <code>openssl</code>, <code>rapidjson</code>, or <code>xtensor</code>.</li> </ul>"},{"location":"reference/project_configuration/#build-dependencies","title":"<code>build-dependencies</code>","text":"<p>This table contains dependencies that are needed to build the project. Different from <code>dependencies</code> and <code>host-dependencies</code> these packages are installed for the architecture of the build machine. This enables cross-compiling from one machine architecture to another.</p> <pre><code>[build-dependencies]\ncmake = \"~=3.24\"\n</code></pre> <p>Typical examples of build dependencies are:</p> <ul> <li>Compilers are invoked on the build machine, but they generate code for the target machine.   If the project is cross-compiled, the architecture of the build and target machine might differ.</li> <li><code>cmake</code> is invoked on the build machine to generate additional code- or project-files which are then include in the compilation process.</li> </ul> <p>Info</p> <p>The build target refers to the machine that will execute the build. Programs and libraries installed by these dependencies will be executed on the build machine.</p> <p>For example, if you compile on a MacBook with an Apple Silicon chip but target Linux x86_64 then your build platform is <code>osx-arm64</code> and your host platform is <code>linux-64</code>.</p>"},{"location":"reference/project_configuration/#the-activation-table","title":"The <code>activation</code> table","text":"<p>The activation table is used for specialized activation operations that need to be run when the environment is activated.</p> <p>There are two types of activation operations a user can modify in the manifest:</p> <ul> <li><code>scripts</code>: A list of scripts that are run when the environment is activated.</li> <li><code>env</code>: A mapping of environment variables that are set when the environment is activated.</li> </ul> <p>These activation operations will be run before the <code>pixi run</code> and <code>pixi shell</code> commands.</p> <p>Note</p> <p>The activation operations are run by the system shell interpreter as they run before an environment is available. This means that it runs as <code>cmd.exe</code> on windows and <code>bash</code> on linux and osx (Unix). Only <code>.sh</code>, <code>.bash</code> and <code>.bat</code> files are supported.</p> <p>And the environment variables are set in the shell that is running the activation script, thus take note when using e.g. <code>$</code> or <code>%</code>.</p> <p>If you have scripts or env variable per platform use the target table.</p> <pre><code>[activation]\nscripts = [\"env_setup.sh\"]\nenv = { ENV_VAR = \"value\" }\n\n# To support windows platforms as well add the following\n[target.win-64.activation]\nscripts = [\"env_setup.bat\"]\n\n[target.linux-64.activation.env]\nENV_VAR = \"linux-value\"\n\n# You can also reference existing environment variables, but this has\n# to be done separately for unix-like operating systems and Windows\n[target.unix.activation.env]\nENV_VAR = \"$OTHER_ENV_VAR/unix-value\"\n\n[target.win.activation.env]\nENV_VAR = \"%OTHER_ENV_VAR%\\\\windows-value\"\n</code></pre>"},{"location":"reference/project_configuration/#the-target-table","title":"The <code>target</code> table","text":"<p>The target table is a table that allows for platform specific configuration. Allowing you to make different sets of tasks or dependencies per platform.</p> <p>The target table is currently implemented for the following sub-tables:</p> <ul> <li><code>activation</code></li> <li><code>dependencies</code></li> <li><code>tasks</code></li> </ul> <p>The target table is defined using <code>[target.PLATFORM.SUB-TABLE]</code>. E.g <code>[target.linux-64.dependencies]</code></p> <p>The platform can be any of:</p> <ul> <li><code>win</code>, <code>osx</code>, <code>linux</code> or <code>unix</code> (<code>unix</code> matches <code>linux</code> and <code>osx</code>)</li> <li>or any of the (more) specific target platforms, e.g. <code>linux-64</code>, <code>osx-arm64</code></li> </ul> <p>The sub-table can be any of the specified above.</p> <p>To make it a bit more clear, let's look at an example below. Currently, pixi combines the top level tables like <code>dependencies</code> with the target-specific ones into a single set. Which, in the case of dependencies, can both add or overwrite dependencies. In the example below, we have <code>cmake</code> being used for all targets but on <code>osx-64</code> or <code>osx-arm64</code> a different version of python will be selected.</p> <pre><code>[dependencies]\ncmake = \"3.26.4\"\npython = \"3.10\"\n\n[target.osx.dependencies]\npython = \"3.11\"\n</code></pre> <p>Here are some more examples:</p> <pre><code>[target.win-64.activation]\nscripts = [\"setup.bat\"]\n\n[target.win-64.dependencies]\nmsmpi = \"~=10.1.1\"\n\n[target.win-64.build-dependencies]\nvs2022_win-64 = \"19.36.32532\"\n\n[target.win-64.tasks]\ntmp = \"echo $TEMP\"\n\n[target.osx-64.dependencies]\nclang = \"&gt;=16.0.6\"\n</code></pre>"},{"location":"reference/project_configuration/#the-feature-and-environments-tables","title":"The <code>feature</code> and <code>environments</code> tables","text":"<p>The <code>feature</code> table allows you to define features that can be used to create different <code>[environments]</code>. The <code>[environments]</code> table allows you to define different environments. The design is explained in the this design document.</p> Simplest example<pre><code>[feature.test.dependencies]\npytest = \"*\"\n\n[environments]\ntest = [\"test\"]\n</code></pre> <p>This will create an environment called <code>test</code> that has <code>pytest</code> installed.</p>"},{"location":"reference/project_configuration/#the-feature-table","title":"The <code>feature</code> table","text":"<p>The <code>feature</code> table allows you to define the following fields per feature.</p> <ul> <li><code>dependencies</code>: Same as the dependencies.</li> <li><code>pypi-dependencies</code>: Same as the pypi-dependencies.</li> <li><code>pypi-options</code>: Same as the pypi-options.</li> <li><code>system-requirements</code>: Same as the system-requirements.</li> <li><code>activation</code>: Same as the activation.</li> <li><code>platforms</code>: Same as the platforms. Unless overridden, the <code>platforms</code> of the feature will be those defined at project level.</li> <li><code>channels</code>: Same as the channels. Unless overridden, the <code>channels</code> of the feature will be those defined at project level.</li> <li><code>channel-priority</code>: Same as the channel-priority.</li> <li><code>target</code>: Same as the target.</li> <li><code>tasks</code>: Same as the tasks.</li> </ul> <p>These tables are all also available without the <code>feature</code> prefix. When those are used we call them the <code>default</code> feature. This is a protected name you can not use for your own feature.</p> Cuda feature table example<pre><code>[feature.cuda]\nactivation = {scripts = [\"cuda_activation.sh\"]}\n# Results in:  [\"nvidia\", \"conda-forge\"] when the default is `conda-forge`\nchannels = [\"nvidia\"]\ndependencies = {cuda = \"x.y.z\", cudnn = \"12.0\"}\npypi-dependencies = {torch = \"==1.9.0\"}\nplatforms = [\"linux-64\", \"osx-arm64\"]\nsystem-requirements = {cuda = \"12\"}\ntasks = { warmup = \"python warmup.py\" }\ntarget.osx-arm64 = {dependencies = {mlx = \"x.y.z\"}}\n</code></pre> Cuda feature table example but written as separate tables<pre><code>[feature.cuda.activation]\nscripts = [\"cuda_activation.sh\"]\n\n[feature.cuda.dependencies]\ncuda = \"x.y.z\"\ncudnn = \"12.0\"\n\n[feature.cuda.pypi-dependencies]\ntorch = \"==1.9.0\"\n\n[feature.cuda.system-requirements]\ncuda = \"12\"\n\n[feature.cuda.tasks]\nwarmup = \"python warmup.py\"\n\n[feature.cuda.target.osx-arm64.dependencies]\nmlx = \"x.y.z\"\n\n# Channels and Platforms are not available as separate tables as they are implemented as lists\n[feature.cuda]\nchannels = [\"nvidia\"]\nplatforms = [\"linux-64\", \"osx-arm64\"]\n</code></pre>"},{"location":"reference/project_configuration/#the-environments-table","title":"The <code>environments</code> table","text":"<p>The <code>[environments]</code> table allows you to define environments that are created using the features defined in the <code>[feature]</code> tables.</p> <p>The environments table is defined using the following fields:</p> <ul> <li><code>features</code>: The features that are included in the environment. Unless <code>no-default-feature</code> is set to <code>true</code>, the default feature is implicitly included in the environment.</li> <li><code>solve-group</code>: The solve group is used to group environments together at the solve stage.   This is useful for environments that need to have the same dependencies but might extend them with additional dependencies.   For instance when testing a production environment with additional test dependencies.   These dependencies will then be the same version in all environments that have the same solve group.   But the different environments contain different subsets of the solve-groups dependencies set.</li> <li><code>no-default-feature</code>: Whether to include the default feature in that environment. The default is <code>false</code>, to include the default feature.</li> </ul> <p>Full environments table specification<pre><code>[environments]\ntest = {features = [\"test\"], solve-group = \"test\"}\nprod = {features = [\"prod\"], solve-group = \"test\"}\nlint = {features = [\"lint\"], no-default-feature = true}\n</code></pre> As shown in the example above, in the simplest of cases, it is possible to define an environment only by listing its features:</p> Simplest example<pre><code>[environments]\ntest = [\"test\"]\n</code></pre> <p>is equivalent to</p> Simplest example expanded<pre><code>[environments]\ntest = {features = [\"test\"]}\n</code></pre> <p>When an environment comprises several features (including the default feature): - The <code>activation</code> and <code>tasks</code> of the environment are the union of the <code>activation</code> and <code>tasks</code> of all its features. - The <code>dependencies</code> and <code>pypi-dependencies</code> of the environment are the union of the <code>dependencies</code> and <code>pypi-dependencies</code> of all its features. This means that if several features define a requirement for the same package, both requirements will be combined. Beware of conflicting requirements across features added to the same environment. - The <code>system-requirements</code> of the environment is the union of the <code>system-requirements</code> of all its features. If multiple features specify a requirement for the same system package, the highest version is chosen. - The <code>channels</code> of the environment is the union of the <code>channels</code> of all its features. Channel priorities can be specified in each feature, to ensure channels are considered in the right order in the environment. - The <code>platforms</code> of the environment is the intersection of the <code>platforms</code> of all its features. Be aware that the platforms supported by a feature (including the default feature) will be considered as the <code>platforms</code> defined at project level (unless overridden in the feature). This means that it is usually a good idea to set the project <code>platforms</code> to all platforms it can support across its environments.</p>"},{"location":"reference/project_configuration/#global-configuration","title":"Global configuration","text":"<p>The global configuration options are documented in the global configuration section.</p>"},{"location":"switching_from/conda/","title":"Transitioning from the <code>conda</code> or <code>mamba</code> to <code>pixi</code>","text":"<p>Welcome to the guide designed to ease your transition from <code>conda</code> or <code>mamba</code> to <code>pixi</code>. This document compares key commands and concepts between these tools, highlighting <code>pixi</code>'s unique approach to managing environments and packages. With <code>pixi</code>, you'll experience a project-based workflow, enhancing your development process, and allowing for easy sharing of your work.</p>"},{"location":"switching_from/conda/#why-pixi","title":"Why Pixi?","text":"<p><code>Pixi</code> builds upon the foundation of the conda ecosystem, introducing a project-centric approach rather than focusing solely on environments. This shift towards projects offers a more organized and efficient way to manage dependencies and run code, tailored to modern development practices.</p>"},{"location":"switching_from/conda/#key-differences-at-a-glance","title":"Key Differences at a Glance","text":"Task Conda/Mamba Pixi Installation Requires an installer Download and add to path (See installation) Creating an Environment <code>conda create -n myenv -c conda-forge python=3.8</code> <code>pixi init myenv</code> followed by <code>pixi add python=3.8</code> Activating an Environment <code>conda activate myenv</code> <code>pixi shell</code> within the project directory Deactivating an Environment <code>conda deactivate</code> <code>exit</code> from the <code>pixi shell</code> Running a Task <code>conda run -n myenv python my_program.py</code> <code>pixi run python my_program.py</code> (See run) Installing a Package <code>conda install numpy</code> <code>pixi add numpy</code> Uninstalling a Package <code>conda remove numpy</code> <code>pixi remove numpy</code> <p>No <code>base</code> environment</p> <p>Conda has a base environment, which is the default environment when you start a new shell. Pixi does not have a base environment. And requires you to install the tools you need in the project or globally. Using <code>pixi global install bat</code> will install <code>bat</code> in a global environment, which is not the same as the <code>base</code> environment in conda.</p> Activating pixi environment in the current shell <p>For some advanced use-cases, you can activate the environment in the current shell. This uses the <code>pixi shell-hook</code> which prints the activation script, which can be used to activate the environment in the current shell without <code>pixi</code> itself. <pre><code>~/myenv &gt; eval \"$(pixi shell-hook)\"\n</code></pre></p>"},{"location":"switching_from/conda/#environment-vs-project","title":"Environment vs Project","text":"<p><code>Conda</code> and <code>mamba</code> focus on managing environments, while <code>pixi</code> emphasizes projects. In <code>pixi</code>, a project is a folder containing a manifest(<code>pixi.toml</code>/<code>pyproject.toml</code>) file that describes the project, a <code>pixi.lock</code> lock-file that describes the exact dependencies, and a <code>.pixi</code> folder that contains the environment.</p> <p>This project-centric approach allows for easy sharing and collaboration, as the project folder contains all the necessary information to recreate the environment. It manages more than one environment for more than one platform in a single project, and allows for easy switching between them. (See multiple environments)</p>"},{"location":"switching_from/conda/#global-environments","title":"Global environments","text":"<p><code>conda</code> installs all environments in one global location. When this is important to you for filesystem reasons, you can use the detached-environments feature of pixi. <pre><code>pixi config set detached-environments true\n# or a specific location\npixi config set detached-environments /path/to/envs\n</code></pre> This doesn't allow you to activate the environments using <code>pixi shell -n</code> but it will make the installation of the environments go to the same folder.</p> <p><code>pixi</code> does have the <code>pixi global</code> command to install tools on your machine. (See global) This is not a replacement for <code>conda</code> but works the same as <code>pipx</code> and <code>condax</code>. It creates a single isolated environment for the given requirement and installs the binaries into the global path. <pre><code>pixi global install bat\nbat pixi.toml\n</code></pre></p> <p>Never install <code>pip</code> with <code>pixi global</code></p> <p>Installations with <code>pixi global</code> get their own isolated environment. Installing <code>pip</code> with <code>pixi global</code> will create a new isolated environment with its own <code>pip</code> binary. Using that <code>pip</code> binary will install packages in the <code>pip</code> environment, making it unreachable form anywhere as you can't activate it.</p>"},{"location":"switching_from/conda/#automated-switching","title":"Automated switching","text":"<p>With <code>pixi</code> you can import <code>environment.yml</code> files into a pixi project. (See import) <pre><code>pixi init --import environment.yml\n</code></pre> This will create a new project with the dependencies from the <code>environment.yml</code> file.</p> Exporting your environment <p>If you are working with Conda users or systems, you can export your environment to a <code>environment.yml</code> file to share them. <pre><code>pixi project export conda\n</code></pre> Additionally you can export a conda explicit specification.</p>"},{"location":"switching_from/conda/#troubleshooting","title":"Troubleshooting","text":"<p>Encountering issues? Here are solutions to some common problems when being used to the <code>conda</code> workflow:</p> <ul> <li>Dependency <code>is excluded because due to strict channel priority not using this option from: 'https://conda.anaconda.org/conda-forge/'</code>   This error occurs when the package is in multiple channels. <code>pixi</code> uses a strict channel priority. See channel priority for more information.</li> <li><code>pixi global install pip</code>, pip doesn't work.   <code>pip</code> is installed in the global isolated environment. Use <code>pixi add pip</code> in a project to install <code>pip</code> in the project environment and use that project.</li> <li><code>pixi global install &lt;Any Library&gt;</code> -&gt; <code>import &lt;Any Library&gt;</code> -&gt; <code>ModuleNotFoundError: No module named '&lt;Any Library&gt;'</code>    The library is installed in the global isolated environment. Use <code>pixi add &lt;Any Library&gt;</code> in a project to install the library in the project environment and use that project.</li> </ul>"},{"location":"switching_from/poetry/","title":"Transitioning from <code>poetry</code> to <code>pixi</code>","text":"<p>Welcome to the guide designed to ease your transition from <code>poetry</code> to <code>pixi</code>. This document compares key commands and concepts between these tools, highlighting <code>pixi</code>'s unique approach to managing environments and packages. With <code>pixi</code>, you'll experience a project-based workflow similar to <code>poetry</code> while including the <code>conda</code> ecosystem and allowing for easy sharing of your work.</p>"},{"location":"switching_from/poetry/#why-pixi","title":"Why Pixi?","text":"<p>Poetry is most-likely the closest tool to pixi in terms of project management, in the python ecosystem. On top of the PyPI ecosystem, <code>pixi</code> adds the power of the conda ecosystem, allowing for a more flexible and powerful environment management.</p>"},{"location":"switching_from/poetry/#quick-look-at-the-differences","title":"Quick look at the differences","text":"Task Poetry Pixi Creating an Environment <code>poetry new myenv</code> <code>pixi init myenv</code> Running a Task <code>poetry run which python</code> <code>pixi run which python</code> <code>pixi</code> uses a built-in cross platform shell for run where poetry uses your shell. Installing a Package <code>poetry add numpy</code> <code>pixi add numpy</code> adds the conda variant. <code>pixi add --pypi numpy</code> adds the PyPI variant. Uninstalling a Package <code>poetry remove numpy</code> <code>pixi remove numpy</code> removes the conda variant. <code>pixi remove --pypi numpy</code> removes the PyPI variant. Building a package <code>poetry build</code> We've yet to implement package building and publishing Publishing a package <code>poetry publish</code> We've yet to implement package building and publishing Reading the pyproject.toml <code>[tool.poetry]</code> <code>[tool.pixi]</code> Defining dependencies <code>[tool.poetry.dependencies]</code> <code>[tool.pixi.dependencies]</code> for conda, <code>[tool.pixi.pypi-dependencies]</code> or <code>[project.dependencies]</code> for PyPI dependencies Dependency definition - <code>numpy = \"^1.2.3\"</code>- <code>numpy = \"~1.2.3\"</code>- <code>numpy = \"*\"</code> - <code>numpy = \"&gt;=1.2.3 &lt;2.0.0\"</code>- <code>numpy = \"&gt;=1.2.3 &lt;1.3.0\"</code>- <code>numpy = \"*\"</code> Lock file <code>poetry.lock</code> <code>pixi.lock</code> Environment directory <code>~/.cache/pypoetry/virtualenvs/myenv</code> <code>./.pixi</code> Defaults to the project folder, move this using the <code>detached-environments</code>"},{"location":"switching_from/poetry/#support-both-poetry-and-pixi-in-my-project","title":"Support both <code>poetry</code> and <code>pixi</code> in my project","text":"<p>You can allow users to use <code>poetry</code> and <code>pixi</code> in the same project, they will not touch each other's parts of the configuration or system. It's best to duplicate the dependencies, basically making an exact copy of the <code>tool.poetry.dependencies</code> into <code>tool.pixi.pypi-dependencies</code>. Make sure that <code>python</code> is only defined in the <code>tool.pixi.dependencies</code> and not in the <code>tool.pixi.pypi-dependencies</code>.</p> <p>Mixing <code>pixi</code> and <code>poetry</code></p> <p>It's possible to use <code>poetry</code> in <code>pixi</code> environments but this is advised against. Pixi supports PyPI dependencies in a different way than <code>poetry</code> does, and mixing them can lead to unexpected behavior. As you can only use one package manager at a time, it's best to stick to one.</p> <p>If using poetry on top of a pixi project, you'll always need to install the <code>poetry</code> environment after the <code>pixi</code> environment. And let <code>pixi</code> handle the <code>python</code> and <code>poetry</code> installation.</p>"},{"location":"tutorials/python/","title":"Tutorial: Doing Python development with Pixi","text":"<p>In this tutorial, we will show you how to create a simple Python project with pixi. We will show some of the features that pixi provides, that are currently not a part of <code>pdm</code>, <code>poetry</code> etc.</p>"},{"location":"tutorials/python/#why-is-this-useful","title":"Why is this useful?","text":"<p>Pixi builds upon the conda ecosystem, which allows you to create a Python environment with all the dependencies you need. This is especially useful when you are working with multiple Python interpreters and bindings to C and C++ libraries. For example, GDAL from PyPI does not have binary C dependencies, but the conda package does. On the other hand, some packages are only available through PyPI, which <code>pixi</code> can also install for you. Best of both world, let's give it a go!</p>"},{"location":"tutorials/python/#pixitoml-and-pyprojecttoml","title":"<code>pixi.toml</code> and <code>pyproject.toml</code>","text":"<p>We support two manifest formats: <code>pyproject.toml</code> and <code>pixi.toml</code>. In this tutorial, we will use the <code>pyproject.toml</code> format because it is the most common format for Python projects.</p>"},{"location":"tutorials/python/#lets-get-started","title":"Let's get started","text":"<p>Let's start out by making a directory and creating a new <code>pyproject.toml</code> file.</p> <pre><code>pixi init pixi-py --format pyproject\n</code></pre> <p>This gives you the following pyproject.toml:</p> <pre><code>[project]\nname = \"pixi-py\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [{name = \"Tim de Jager\", email = \"tim@prefix.dev\"}]\nrequires-python = \"&gt;= 3.11\"\ndependencies = []\n\n[build-system]\nbuild-backend = \"hatchling.build\"\nrequires = [\"hatchling\"]\n\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\nplatforms = [\"osx-arm64\"]\n\n[tool.pixi.pypi-dependencies]\npixi-py = { path = \".\", editable = true }\n\n[tool.pixi.tasks]\n</code></pre> <p>Let's add the Python project to the tree:</p> Linux &amp; macOSWindows <pre><code>cd pixi-py # move into the project directory\nmkdir pixi_py\ntouch pixi_py/__init__.py\n</code></pre> <pre><code>cd pixi-py\nmkdir pixi_py\ntype nul &gt; pixi_py\\__init__.py\n</code></pre> <p>We now have the following directory structure:</p> <pre><code>.\n\u251c\u2500\u2500 pixi_py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>We've used a flat-layout here but pixi supports both flat- and src-layouts.</p>"},{"location":"tutorials/python/#whats-in-the-pyprojecttoml","title":"What's in the <code>pyproject.toml</code>?","text":"<p>Okay, so let's have a look at what sections have been added and how we can modify the <code>pyproject.toml</code>.</p> <p>These first entries were added to the <code>pyproject.toml</code> file:</p> <pre><code># Main pixi entry\n[tool.pixi.project]\nchannels = [\"conda-forge\"]\n# This is your machine platform by default\nplatforms = [\"osx-arm64\"]\n</code></pre> <p>The <code>channels</code> and <code>platforms</code> are added to the <code>[tool.pixi.project]</code> section. Channels like <code>conda-forge</code> manage packages similar to PyPI but allow for different packages across languages. The keyword <code>platforms</code> determines what platform the project supports.</p> <p>The <code>pixi_py</code> package itself is added as an editable dependency. This means that the package is installed in editable mode, so you can make changes to the package and see the changes reflected in the environment, without having to re-install the environment.</p> <pre><code># Editable installs\n[tool.pixi.pypi-dependencies]\npixi-py = { path = \".\", editable = true }\n</code></pre> <p>In pixi, unlike other package managers, this is explicitly stated in the <code>pyproject.toml</code> file. The main reason being so that you can choose which environment this package should be included in.</p>"},{"location":"tutorials/python/#managing-both-conda-and-pypi-dependencies-in-pixi","title":"Managing both conda and PyPI dependencies in pixi","text":"<p>Our projects usually depend on other packages.</p> <pre><code>$ pixi add black\nAdded black\n</code></pre> <p>This will result in the following addition to the <code>pyproject.toml</code>:</p> <pre><code># Dependencies\n[tool.pixi.dependencies]\nblack = \"&gt;=24.4.2,&lt;24.5\"\n</code></pre> <p>But we can also be strict about the version that should be used with <code>pixi add black=24</code>, resulting in</p> <pre><code>[tool.pixi.dependencies]\nblack = \"24.*\"\n</code></pre> <p>Now, let's add some optional dependencies:</p> <pre><code>pixi add --pypi --feature test pytest\n</code></pre> <p>Which results in the following fields added to the <code>pyproject.toml</code>: <pre><code>[project.optional-dependencies]\ntest = [\"pytest\"]\n</code></pre></p> <p>After we have added the optional dependencies to the <code>pyproject.toml</code>, pixi automatically creates a <code>feature</code>, which can contain a collection of <code>dependencies</code>, <code>tasks</code>, <code>channels</code>, and more.</p> <p>Sometimes there are packages that aren't available on conda channels but are published on PyPI. We can add these as well, which pixi will solve together with the default dependencies.</p> <pre><code>$ pixi add black --pypi\nAdded black\nAdded these as pypi-dependencies.\n</code></pre> <p>which results in the addition to the <code>dependencies</code> key in the <code>pyproject.toml</code></p> <pre><code>dependencies = [\"black\"]\n</code></pre> <p>When using the <code>pypi-dependencies</code> you can make use of the <code>optional-dependencies</code> that other packages make available. For example, <code>black</code> makes the <code>cli</code> dependencies option, which can be added with the <code>--pypi</code> keyword:</p> <pre><code>$ pixi add black[cli] --pypi\nAdded black[cli]\nAdded these as pypi-dependencies.\n</code></pre> <p>which updates the <code>dependencies</code> entry to</p> <pre><code>dependencies = [\"black[cli]\"]\n</code></pre> Optional dependencies in <code>pixi.toml</code> <p>This tutorial focuses on the use of the <code>pyproject.toml</code>, but in case you're curious, the <code>pixi.toml</code> would contain the following entry after the installation of a PyPI package including an optional dependency: <pre><code>[pypi-dependencies]\nblack = { version = \"*\", extras = [\"cli\"] }\n</code></pre></p>"},{"location":"tutorials/python/#installation-pixi-install","title":"Installation: <code>pixi install</code>","text":"<p>Now let's <code>install</code> the project with <code>pixi install</code>:</p> <pre><code>$ pixi install\n\u2714 Project in /path/to/pixi-py is ready to use!\n</code></pre> <p>We now have a new directory called <code>.pixi</code> in the project root. This directory contains the environment that was created when we ran <code>pixi install</code>. The environment is a conda environment that contains the dependencies that we specified in the <code>pyproject.toml</code> file. We can also install the test environment with <code>pixi install -e test</code>. We can use these environments for executing code.</p> <p>We also have a new file called <code>pixi.lock</code> in the project root. This file contains the exact versions of the dependencies that were installed in the environment across platforms.</p>"},{"location":"tutorials/python/#whats-in-the-environment","title":"What's in the environment?","text":"<p>Using <code>pixi list</code>, you can see what's in the environment, this is essentially a nicer view on the lock file:</p> <pre><code>$ pixi list\nPackage          Version       Build               Size       Kind   Source\nbzip2            1.0.8         h93a5062_5          119.5 KiB  conda  bzip2-1.0.8-h93a5062_5.conda\nblack            24.4.2                            3.8 MiB    pypi   black-24.4.2-cp312-cp312-win_amd64.http.whl\nca-certificates  2024.2.2      hf0a4a13_0          152.1 KiB  conda  ca-certificates-2024.2.2-hf0a4a13_0.conda\nlibexpat         2.6.2         hebf3989_0          62.2 KiB   conda  libexpat-2.6.2-hebf3989_0.conda\nlibffi           3.4.2         h3422bc3_5          38.1 KiB   conda  libffi-3.4.2-h3422bc3_5.tar.bz2\nlibsqlite        3.45.2        h091b4b1_0          806 KiB    conda  libsqlite-3.45.2-h091b4b1_0.conda\nlibzlib          1.2.13        h53f4e23_5          47 KiB     conda  libzlib-1.2.13-h53f4e23_5.conda\nncurses          6.4.20240210  h078ce10_0          801 KiB    conda  ncurses-6.4.20240210-h078ce10_0.conda\nopenssl          3.2.1         h0d3ecfb_1          2.7 MiB    conda  openssl-3.2.1-h0d3ecfb_1.conda\npython           3.12.3        h4a7b5fc_0_cpython  12.6 MiB   conda  python-3.12.3-h4a7b5fc_0_cpython.conda\nreadline         8.2           h92ec313_1          244.5 KiB  conda  readline-8.2-h92ec313_1.conda\ntk               8.6.13        h5083fa2_1          3 MiB      conda  tk-8.6.13-h5083fa2_1.conda\ntzdata           2024a         h0c530f3_0          117 KiB    conda  tzdata-2024a-h0c530f3_0.conda\npixi-py          0.1.0                                        pypi   . (editable)\nxz               5.2.6         h57fd34a_0          230.2 KiB  conda  xz-5.2.6-h57fd34a_0.tar.bz2\n</code></pre> <p>Python</p> <p>The Python interpreter is also installed in the environment. This is because the Python interpreter version is read from the <code>requires-python</code> field in the <code>pyproject.toml</code> file. This is used to determine the Python version to install in the environment. This way, pixi automatically manages/bootstraps the Python interpreter for you, so no more <code>brew</code>, <code>apt</code> or other system install steps.</p> <p>Here, you can see the different conda and Pypi packages listed. As you can see, the <code>pixi-py</code> package that we are working on is installed in editable mode. Every environment in pixi is isolated but reuses files that are hard-linked from a central cache directory. This means that you can have multiple environments with the same packages but only have the individual files stored once on disk.</p> <p>We can create the <code>default</code> and <code>test</code> environments based on our own <code>test</code> feature from the <code>optional-dependency</code>:</p> <pre><code>pixi project environment add default --solve-group default\npixi project environment add test --feature test --solve-group default\n</code></pre> <p>Which results in:</p> <pre><code># Environments\n[tool.pixi.environments]\ndefault = { solve-group = \"default\" }\ntest = { features = [\"test\"], solve-group = \"default\" }\n</code></pre> Solve Groups <p>Solve groups are a way to group dependencies together. This is useful when you have multiple environments that share the same dependencies. For example, maybe <code>pytest</code> is a dependency that influences the dependencies of the <code>default</code> environment. By putting these in the same solve group, you ensure that the versions in <code>test</code> and <code>default</code> are exactly the same.</p> <p>The <code>default</code> environment is created when you run <code>pixi install</code>. The <code>test</code> environment is created from the optional dependencies in the <code>pyproject.toml</code> file. You can execute commands in this environment with e.g. <code>pixi run -e test python</code></p>"},{"location":"tutorials/python/#getting-code-to-run","title":"Getting code to run","text":"<p>Let's add some code to the <code>pixi-py</code> package. We will add a new function to the <code>pixi_py/__init__.py</code> file:</p> <pre><code>from rich import print\n\ndef hello():\n    return \"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\"\n\ndef say_hello():\n    print(*hello())\n</code></pre> <p>Now add the <code>rich</code> dependency from PyPI using: <code>pixi add --pypi rich</code>.</p> <p>Let's see if this works by running:</p> <pre><code>pixi r python -c \"import pixi_py; pixi_py.say_hello()\"\nHello, World! \ud83e\udddb\n</code></pre> Slow? <p>This might be slow(2 minutes) the first time because pixi installs the project, but it will be near instant the second time.</p> <p>Pixi runs the self installed Python interpreter. Then, we are importing the <code>pixi_py</code> package, which is installed in editable mode. The code calls the <code>say_hello</code> function that we just added. And it works! Cool!</p>"},{"location":"tutorials/python/#testing-this-code","title":"Testing this code","text":"<p>Okay, so let's add a test for this function. Let's add a <code>tests/test_me.py</code> file in the root of the project.</p> <p>Giving us the following project structure:</p> <pre><code>.\n\u251c\u2500\u2500 pixi.lock\n\u251c\u2500\u2500 pixi_py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests/test_me.py\n</code></pre> <pre><code>from pixi_py import hello\n\ndef test_pixi_py():\n    assert hello() == (\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\")\n</code></pre> <p>Let's add an easy task for running the tests.</p> <pre><code>$ pixi task add --feature test test \"pytest\"\n\u2714 Added task `test`: pytest .\n</code></pre> <p>So pixi has a task system to make it easy to run commands. Similar to <code>npm</code> scripts or something you would specify in a <code>Justfile</code>.</p> Pixi tasks <p>Tasks are actually a pretty cool pixi feature that is powerful and runs in a cross-platform shell. You can do caching, dependencies and more. Read more about tasks in the tasks section.</p> <pre><code>$ pixi r test\n\u2728 Pixi task (test): pytest .\n================================================================================================= test session starts =================================================================================================\nplatform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0\nrootdir: /private/tmp/pixi-py\nconfigfile: pyproject.toml\ncollected 1 item\n\ntest_me.py .                                                                                                                                                                                                    [100%]\n\n================================================================================================== 1 passed in 0.00s =================================================================================================\n</code></pre> <p>Neat! It seems to be working!</p>"},{"location":"tutorials/python/#test-vs-default-environment","title":"Test vs Default environment","text":"<p>Let's compare the output of the test and default environments...</p> <pre><code>pixi list -e test\n# vs. default environment\npixi list\n</code></pre> <p>We see that the test environment has:</p> <pre><code>package          version       build               size       kind   source\n...\npytest           8.1.1                             1.1 mib    pypi   pytest-8.1.1-py3-none-any.whl\n...\n</code></pre> <p>However, the default environment is missing this package. This way, you can finetune your environments to only have the packages that are needed for that environment. E.g. you could also have a <code>dev</code> environment that has <code>pytest</code> and <code>ruff</code> installed, but you could omit these from the <code>prod</code> environment. There is a docker example that shows how to set up a minimal <code>prod</code> environment and copy from there.</p>"},{"location":"tutorials/python/#replacing-pypi-packages-with-conda-packages","title":"Replacing PyPI packages with conda packages","text":"<p>Last thing, pixi provides the ability for <code>pypi</code> packages to depend on <code>conda</code> packages. Let's confirm this with <code>pixi list</code>:</p> <pre><code>$ pixi list\nPackage          Version       Build               Size       Kind   Source\n...\npygments         2.17.2                            4.1 MiB    pypi   pygments-2.17.2-py3-none-any.http.whl\n...\n</code></pre> <p>Let's explicitly add <code>pygments</code> to the <code>pyproject.toml</code> file. Which is a dependency of the <code>rich</code> package.</p> <pre><code>pixi add pygments\n</code></pre> <p>This will add the following to the <code>pyproject.toml</code> file:</p> <pre><code>[tool.pixi.dependencies]\npygments = \"&gt;=2.17.2,&lt;2.18\"\n</code></pre> <p>We can now see that the <code>pygments</code> package is now installed as a conda package.</p> <pre><code>$ pixi list\nPackage          Version       Build               Size       Kind   Source\n...\npygments         2.17.2        pyhd8ed1ab_0        840.3 KiB  conda  pygments-2.17.2-pyhd8ed1ab_0.conda\n</code></pre> <p>This way, PyPI dependencies and conda dependencies can be mixed and matched to seamlessly interoperate.</p> <pre><code>$  pixi r python -c \"import pixi_py; pixi_py.say_hello()\"\nHello, World! \ud83e\udddb\n</code></pre> <p>And it still works!</p>"},{"location":"tutorials/python/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've seen how easy it is to use a <code>pyproject.toml</code> to manage your pixi dependencies and environments. We have also explored how to use PyPI and conda dependencies seamlessly together in the same project and install optional dependencies to manage Python packages.</p> <p>Hopefully, this provides a flexible and powerful way to manage your Python projects and a fertile base for further exploration with Pixi.</p> <p>Thanks for reading! Happy Coding \ud83d\ude80</p> <p>Any questions? Feel free to reach out or share this tutorial on X, join our Discord, send us an e-mail or follow our GitHub.</p>"},{"location":"tutorials/ros2/","title":"Tutorial: Develop a ROS 2 package with <code>pixi</code>","text":"<p>In this tutorial, we will show you how to develop a ROS 2 package using <code>pixi</code>. The tutorial is written to be executed from top to bottom, missing steps might result in errors.</p> <p>The audience for this tutorial is developers who are familiar with ROS 2 and how are interested to try pixi for their development workflow.</p>"},{"location":"tutorials/ros2/#prerequisites","title":"Prerequisites","text":"<ul> <li>You need to have <code>pixi</code> installed. If you haven't installed it yet, you can follow the instructions in the installation guide.   The crux of this tutorial is to show you only need pixi!</li> <li>On Windows, it's advised to enable Developer mode. Go to Settings -&gt; Update &amp; Security -&gt; For developers -&gt; Developer mode.</li> </ul> <p>If you're new to pixi, you can check out the basic usage guide. This will teach you the basics of pixi project within 3 minutes.</p>"},{"location":"tutorials/ros2/#create-a-pixi-project","title":"Create a pixi project.","text":"<pre><code>pixi init my_ros2_project -c robostack-staging -c conda-forge\ncd my_ros2_project\n</code></pre> <p>It should have created a directory structure like this:</p> <pre><code>my_ros2_project\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 pixi.toml\n</code></pre> <p>The <code>pixi.toml</code> file is the manifest file for your project. It should look like this:</p> pixi.toml<pre><code>[project]\nname = \"my_ros2_project\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [\"User Name &lt;user.name@email.url&gt;\"]\nchannels = [\"robostack-staging\", \"conda-forge\"]\n# Your project can support multiple platforms, the current platform will be automatically added.\nplatforms = [\"linux-64\"]\n\n[tasks]\n\n[dependencies]\n</code></pre> <p>The <code>channels</code> you added to the <code>init</code> command are repositories of packages, you can search in these repositories through our prefix.dev website. The <code>platforms</code> are the systems you want to support, in pixi you can support multiple platforms, but you have to define which platforms, so pixi can test if those are supported for your dependencies. For the rest of the fields, you can fill them in as you see fit.</p>"},{"location":"tutorials/ros2/#add-ros-2-dependencies","title":"Add ROS 2 dependencies","text":"<p>To use a pixi project you don't need any dependencies on your system, all the dependencies you need should be added through pixi, so other users can use your project without any issues.</p> <p>Let's start with the <code>turtlesim</code> example</p> <pre><code>pixi add ros-humble-desktop ros-humble-turtlesim\n</code></pre> <p>This will add the <code>ros-humble-desktop</code> and <code>ros-humble-turtlesim</code> packages to your manifest. Depending on your internet speed this might take a minute, as it will also install ROS in your project folder (<code>.pixi</code>).</p> <p>Now run the <code>turtlesim</code> example.</p> <pre><code>pixi run ros2 run turtlesim turtlesim_node\n</code></pre> <p>Or use the <code>shell</code> command to start an activated environment in your terminal.</p> <pre><code>pixi shell\nros2 run turtlesim turtlesim_node\n</code></pre> <p>Congratulations you have ROS 2 running on your machine with pixi!</p> Some more fun with the turtle <p>To control the turtle you can run the following command in a new terminal <pre><code>cd my_ros2_project\npixi run ros2 run turtlesim turtle_teleop_key\n</code></pre></p> <p>Now you can control the turtle with the arrow keys on your keyboard. </p>"},{"location":"tutorials/ros2/#add-a-custom-python-node","title":"Add a custom Python node","text":"<p>As ros works with custom nodes, let's add a custom node to our project.</p> <pre><code>pixi run ros2 pkg create --build-type ament_python --destination-directory src --node-name my_node my_package\n</code></pre> <p>To build the package we need some more dependencies:</p> <pre><code>pixi add colcon-common-extensions \"setuptools&lt;=58.2.0\"\n</code></pre> <p>Add the created initialization script for the ros workspace to your manifest file.</p> <p>Then run the build command</p> <pre><code>pixi run colcon build\n</code></pre> <p>This will create a sourceable script in the <code>install</code> folder, you can source this script through an activation script to use your custom node. Normally this would be the script you add to your <code>.bashrc</code> but now you tell pixi to use it.</p> Linux &amp; macOSWindows pixi.toml<pre><code>[activation]\nscripts = [\"install/setup.sh\"]\n</code></pre> pixi.toml<pre><code>[activation]\nscripts = [\"install/setup.bat\"]\n</code></pre> Multi platform support <p>You can add multiple activation scripts for different platforms, so you can support multiple platforms with one project. Use the following example to add support for both Linux and Windows, using the target syntax.</p> <pre><code>[project]\nplatforms = [\"linux-64\", \"win-64\"]\n\n[activation]\nscripts = [\"install/setup.sh\"]\n[target.win-64.activation]\nscripts = [\"install/setup.bat\"]\n</code></pre> <p>Now you can run your custom node with the following command</p> <pre><code>pixi run ros2 run my_package my_node\n</code></pre>"},{"location":"tutorials/ros2/#simplify-the-user-experience","title":"Simplify the user experience","text":"<p>In <code>pixi</code> we have a feature called <code>tasks</code>, this allows you to define a task in your manifest file and run it with a simple command. Let's add a task to run the <code>turtlesim</code> example and the custom node.</p> <pre><code>pixi task add sim \"ros2 run turtlesim turtlesim_node\"\npixi task add build \"colcon build --symlink-install\"\npixi task add hello \"ros2 run my_package my_node\"\n</code></pre> <p>Now you can run these task by simply running</p> <pre><code>pixi run sim\npixi run build\npixi run hello\n</code></pre> Advanced task usage <p>Tasks are a powerful feature in pixi.</p> <ul> <li>You can add <code>depends-on</code> to the tasks to create a task chain.</li> <li>You can add <code>cwd</code> to the tasks to run the task in a different directory from the root of the project.</li> <li>You can add <code>inputs</code> and <code>outputs</code> to the tasks to create a task that only runs when the inputs are changed.</li> <li>You can use the <code>target</code> syntax to run specific tasks on specific machines.</li> </ul> <pre><code>[tasks]\nsim = \"ros2 run turtlesim turtlesim_node\"\nbuild = {cmd = \"colcon build --symlink-install\", inputs = [\"src\"]}\nhello = { cmd = \"ros2 run my_package my_node\", depends-on = [\"build\"] }\n</code></pre>"},{"location":"tutorials/ros2/#build-a-c-node","title":"Build a C++ node","text":"<p>To build a C++ node you need to add the <code>ament_cmake</code> and some other build dependencies to your manifest file.</p> <pre><code>pixi add ros-humble-ament-cmake-auto compilers pkg-config cmake ninja\n</code></pre> <p>Now you can create a C++ node with the following command</p> <pre><code>pixi run ros2 pkg create --build-type ament_cmake --destination-directory src --node-name my_cpp_node my_cpp_package\n</code></pre> <p>Now you can build it again and run it with the following commands</p> <pre><code># Passing arguments to the build command to build with Ninja, add them to the manifest if you want to default to ninja.\npixi run build --cmake-args -G Ninja\npixi run ros2 run my_cpp_package my_cpp_node\n</code></pre> Tip <p>Add the cpp task to the manifest file to simplify the user experience.</p> <pre><code>pixi task add hello-cpp \"ros2 run my_cpp_package my_cpp_node\"\n</code></pre>"},{"location":"tutorials/ros2/#conclusion","title":"Conclusion","text":"<p>In this tutorial, we showed you how to create a Python &amp; CMake ROS2 project using <code>pixi</code>. We also showed you how to add dependencies to your project using <code>pixi</code>, and how to run your project using <code>pixi run</code>. This way you can make sure that your project is reproducible on all your machines that have <code>pixi</code> installed.</p>"},{"location":"tutorials/ros2/#show-off-your-work","title":"Show Off Your Work!","text":"<p>Finished with your project? We'd love to see what you've created! Share your work on social media using the hashtag #pixi and tag us @prefix_dev. Let's inspire the community together!</p>"},{"location":"tutorials/ros2/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"tutorials/ros2/#what-happens-with-rosdep","title":"What happens with <code>rosdep</code>?","text":"<p>Currently, we don't support <code>rosdep</code> in a pixi environment, so you'll have to add the packages using <code>pixi add</code>. <code>rosdep</code> will call <code>conda install</code> which isn't supported in a pixi environment.</p>"},{"location":"tutorials/rust/","title":"Tutorial: Develop a Rust package using <code>pixi</code>","text":"<p>In this tutorial, we will show you how to develop a Rust package using <code>pixi</code>. The tutorial is written to be executed from top to bottom, missing steps might result in errors.</p> <p>The audience for this tutorial is developers who are familiar with Rust and <code>cargo</code> and how are interested to try pixi for their development workflow. The benefit would be within a rust workflow that you lock both rust and the C/System dependencies your project might be using. E.g tokio users will almost most definitely use <code>openssl</code>.</p> <p>If you're new to pixi, you can check out the basic usage guide. This will teach you the basics of pixi project within 3 minutes.</p>"},{"location":"tutorials/rust/#prerequisites","title":"Prerequisites","text":"<ul> <li>You need to have <code>pixi</code> installed. If you haven't installed it yet, you can follow the instructions in the installation guide.   The crux of this tutorial is to show you only need pixi!</li> </ul>"},{"location":"tutorials/rust/#create-a-pixi-project","title":"Create a pixi project.","text":"<pre><code>pixi init my_rust_project\ncd my_rust_project\n</code></pre> <p>It should have created a directory structure like this:</p> <pre><code>my_rust_project\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 pixi.toml\n</code></pre> <p>The <code>pixi.toml</code> file is the manifest file for your project. It should look like this:</p> pixi.toml<pre><code>[project]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [\"User Name &lt;user.name@email.url&gt;\"]\nchannels = [\"conda-forge\"]\nplatforms = [\"linux-64\"] # (1)!\n\n[tasks]\n\n[dependencies]\n</code></pre> <ol> <li>The <code>platforms</code> is set to your system's platform by default. You can change it to any platform you want to support. e.g. <code>[\"linux-64\", \"osx-64\", \"osx-arm64\", \"win-64\"]</code>.</li> </ol>"},{"location":"tutorials/rust/#add-rust-dependencies","title":"Add Rust dependencies","text":"<p>To use a pixi project you don't need any dependencies on your system, all the dependencies you need should be added through pixi, so other users can use your project without any issues. <pre><code>pixi add rust\n</code></pre></p> <p>This will add the <code>rust</code> package to your <code>pixi.toml</code> file under <code>[dependencies]</code>. Which includes the <code>rust</code> toolchain, and <code>cargo</code>.</p>"},{"location":"tutorials/rust/#add-a-cargo-project","title":"Add a <code>cargo</code> project","text":"<p>Now that you have rust installed, you can create a <code>cargo</code> project in your <code>pixi</code> project. <pre><code>pixi run cargo init\n</code></pre></p> <p><code>pixi run</code> is pixi's way to run commands in the <code>pixi</code> environment, it will make sure that the environment is set up correctly for the command to run. It runs its own cross-platform shell, if you want more information checkout the <code>tasks</code> documentation. You can also activate the environment in your own shell by running <code>pixi shell</code>, after that you don't need <code>pixi run ...</code> anymore.</p> <p>Now we can build a <code>cargo</code> project using <code>pixi</code>. <pre><code>pixi run cargo build\n</code></pre> To simplify the build process, you can add a <code>build</code> task to your <code>pixi.toml</code> file using the following command: <pre><code>pixi task add build \"cargo build\"\n</code></pre> Which creates this field in the <code>pixi.toml</code> file: pixi.toml<pre><code>[tasks]\nbuild = \"cargo build\"\n</code></pre></p> <p>And now you can build your project using: <pre><code>pixi run build\n</code></pre></p> <p>You can also run your project using: <pre><code>pixi run cargo run\n</code></pre> Which you can simplify with a task again. <pre><code>pixi task add start \"cargo run\"\n</code></pre></p> <p>So you should get the following output: <pre><code>pixi run start\nHello, world!\n</code></pre></p> <p>Congratulations, you have a Rust project running on your machine with pixi!</p>"},{"location":"tutorials/rust/#next-steps-why-is-this-useful-when-there-is-rustup","title":"Next steps, why is this useful when there is <code>rustup</code>?","text":"<p>Cargo is not a binary package manager, but a source-based package manager. This means that you need to have the Rust compiler installed on your system to use it. And possibly other dependencies that are not included in the <code>cargo</code> package manager. For example, you might need to install <code>openssl</code> or <code>libssl-dev</code> on your system to build a package. This is the case for <code>pixi</code> as well, but <code>pixi</code> will install these dependencies in your project folder, so you don't have to worry about them.</p> <p>Add the following dependencies to your cargo project: <pre><code>pixi run cargo add git2\n</code></pre></p> <p>If your system is not preconfigured to build C and have the <code>libssl-dev</code> package installed you will not be able to build the project: <pre><code>pixi run build\n...\nCould not find directory of OpenSSL installation, and this `-sys` crate cannot\nproceed without this knowledge. If OpenSSL is installed and this crate had\ntrouble finding it,  you can set the `OPENSSL_DIR` environment variable for the\ncompilation process.\n\nMake sure you also have the development packages of openssl installed.\nFor example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.\n\nIf you're in a situation where you think the directory *should* be found\nautomatically, please open a bug at https://github.com/sfackler/rust-openssl\nand include information about your system as well as this message.\n\n$HOST = x86_64-unknown-linux-gnu\n$TARGET = x86_64-unknown-linux-gnu\nopenssl-sys = 0.9.102\n\n\nIt looks like you're compiling on Linux and also targeting Linux. Currently this\nrequires the `pkg-config` utility to find OpenSSL but unfortunately `pkg-config`\ncould not be found. If you have OpenSSL installed you can likely fix this by\ninstalling `pkg-config`.\n...\n</code></pre> You can fix this, by adding the necessary dependencies for building git2, with pixi: <pre><code>pixi add openssl pkg-config compilers\n</code></pre></p> <p>Now you should be able to build your project again: <pre><code>pixi run build\n...\n   Compiling git2 v0.18.3\n   Compiling my_rust_project v0.1.0 (/my_rust_project)\n    Finished dev [unoptimized + debuginfo] target(s) in 7.44s\n     Running `target/debug/my_rust_project`\n</code></pre></p>"},{"location":"tutorials/rust/#extra-add-more-tasks","title":"Extra: Add more tasks","text":"<p>You can add more tasks to your <code>pixi.toml</code> file to simplify your workflow.</p> <p>For example, you can add a <code>test</code> task to run your tests: <pre><code>pixi task add test \"cargo test\"\n</code></pre></p> <p>And you can add a <code>clean</code> task to clean your project: <pre><code>pixi task add clean \"cargo clean\"\n</code></pre></p> <p>You can add a formatting task to your project: <pre><code>pixi task add fmt \"cargo fmt\"\n</code></pre></p> <p>You can extend these tasks to run multiple commands with the use of the <code>depends-on</code> field. <pre><code>pixi task add lint \"cargo clippy\" --depends-on fmt\n</code></pre></p>"},{"location":"tutorials/rust/#conclusion","title":"Conclusion","text":"<p>In this tutorial, we showed you how to create a Rust project using <code>pixi</code>. We also showed you how to add dependencies to your project using <code>pixi</code>. This way you can make sure that your project is reproducible on any system that has <code>pixi</code> installed.</p>"},{"location":"tutorials/rust/#show-off-your-work","title":"Show Off Your Work!","text":"<p>Finished with your project? We'd love to see what you've created! Share your work on social media using the hashtag #pixi and tag us @prefix_dev. Let's inspire the community together!</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#0340-2024-10-21","title":"[0.34.0] - 2024-10-21","text":""},{"location":"CHANGELOG/#highlights","title":"\u2728 Highlights","text":"<ul> <li><code>pixi global install</code> now takes a flag <code>--with</code>, inspired by <code>uv tool install</code>. If you only want to add dependencies without exposing them, you can now run <code>pixi global install ipython --with numpy --with matplotlib</code></li> <li>Improved the output of <code>pixi global</code> subcommands</li> <li>Many bug fixes</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Add timeouts by @Hofer-Julian in #2311</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Global update should add new executables by @nichmor in #2298</li> </ul> <ul> <li>Add <code>pixi global install --with</code> by @Hofer-Julian in #2332</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Document where <code>pixi-global.toml</code> can be found by @Hofer-Julian in #2304</li> </ul> <ul> <li>Add ros noetic example by @ruben-arts in #2271</li> </ul> <ul> <li>Add nichita and julian to CITATION.cff by @Hofer-Julian in #2327</li> </ul> <ul> <li>Improve keyring documentation to use pixi global by @olivier-lacroix in #2318</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li><code>pixi global upgrade-all</code> error message by @Hofer-Julian in #2296</li> </ul> <ul> <li>Select correct run environment by @ruben-arts in #2301</li> </ul> <ul> <li>Adapt channels to work with newest rattler-build version by @Hofer-Julian in #2306</li> </ul> <ul> <li>Hide obsolete commands in help page of <code>pixi global</code> by @chawyehsu in #2320</li> </ul> <ul> <li>Typecheck all tests by @Hofer-Julian in #2328</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>Improve upload errors by @ruben-arts in #2303</li> </ul>"},{"location":"CHANGELOG/#new-contributors","title":"New Contributors","text":"<ul> <li>@gerlero made their first contribution in #2300</li> </ul>"},{"location":"CHANGELOG/#0330-2024-10-16","title":"[0.33.0] - 2024-10-16","text":""},{"location":"CHANGELOG/#highlights_1","title":"\u2728 Highlights","text":"<p>This is the first release with the new <code>pixi global</code> implementation. It's a full reimplementation of <code>pixi global</code> where it now uses a manifest file just like <code>pixi</code> projects. This way you can declare your environments and save them to a VCS.</p> <p>It also brings features like, adding dependencies to a global environment, and exposing multiple binaries from the same environment that are not part of the main installed packages.</p> <p>Test it out with: <pre><code># Normal feature\npixi global install ipython\n\n# New features\npixi global install \\\n    --environment science \\           # Defined the environment name\n    --expose scipython=ipython \\      # Expose binaries under custom names\n    ipython scipy                     # Define multiple dependencies for one environment\n</code></pre></p> <p>This should result in a manifest in <code>$HOME/.pixi/manifests/pixi-global.toml</code>: <pre><code>version = 1\n\n[envs.ipython]\nchannels = [\"conda-forge\"]\ndependencies = { ipython = \"*\" }\nexposed = { ipython = \"ipython\", ipython3 = \"ipython3\" }\n\n[envs.science]\nchannels = [\"conda-forge\"]\ndependencies = { ipython = \"*\", scipy = \"*\" }\nexposed = { scipython = \"ipython\" }\n</code></pre></p>"},{"location":"CHANGELOG/#documentation_1","title":"\ud83d\udcd6 Documentation","text":"<p>Checkout the updated documentation on this new feature: - Main documentation on this tag: https://pixi.sh/v0.33.0/ - Global CLI documentation: https://pixi.sh/v0.33.0/reference/cli/#global - The implementation documentation: https://pixi.sh/v0.33.0/features/global_tools/ - The initial design proposal: https://pixi.sh/v0.33.0/design_proposals/pixi_global_manifest/</p>"},{"location":"CHANGELOG/#0322-2024-10-16","title":"[0.32.2] - 2024-10-16","text":""},{"location":"CHANGELOG/#highlights_2","title":"\u2728 Highlights","text":"<ul> <li><code>pixi self-update</code> will only work on the binaries from the GitHub releases, avoiding accidentally breaking the installation.</li> <li>We now support <code>gcs://</code> conda registries.</li> <li>No more broken PowerShell after using <code>pixi shell</code>.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Add support for <code>gcs://</code> conda registries by @clement-chaneching in #2263</li> </ul>"},{"location":"CHANGELOG/#documentation_2","title":"Documentation","text":"<ul> <li>Small fixes in tutorials/python.md by @carschandler in #2252</li> <li>Update <code>pixi list</code> docs by @Hofer-Julian in #2269</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Bind ctrl c listener so that it doesn't interfere on powershell by @wolfv in #2260</li> <li>Explicitly run default environment by @ruben-arts in #2273</li> <li>Parse env name on adding by @ruben-arts in #2279</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>Make self-update a compile time feature by @freundTech in #2213</li> </ul>"},{"location":"CHANGELOG/#new-contributors_1","title":"New Contributors","text":"<ul> <li>@clement-chaneching made their first contribution in #2263</li> <li>@freundTech made their first contribution in #2213</li> </ul>"},{"location":"CHANGELOG/#0321-2024-10-08","title":"[0.32.1] - 2024-10-08","text":""},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>Bump Rust version to <code>1.81</code> by @wolfv in #2227</li> </ul>"},{"location":"CHANGELOG/#documentation_3","title":"Documentation","text":"<ul> <li>Pixi-pack, docker, devcontainer by @pavelzw in #2220</li> </ul>"},{"location":"CHANGELOG/#0320-2024-10-08","title":"[0.32.0] - 2024-10-08","text":""},{"location":"CHANGELOG/#highlights_3","title":"\u2728 Highlights","text":"<p>The biggest fix in this PR is the move to the latest rattler as it came with some major bug fixes for macOS and Rust 1.81 compatibility.</p>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Correctly implement total ordering for dependency provider by @tdejager in rattler/#892</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed self-clobber issue when up/down grading packages by @wolfv in rattler/#893</li> <li>Check environment name before returning not found print by @ruben-arts in #2198</li> <li>Turn off symlink follow for task cache by @ruben-arts in #2209</li> </ul>"},{"location":"CHANGELOG/#0310-2024-10-03","title":"[0.31.0] - 2024-10-03","text":""},{"location":"CHANGELOG/#highlights_4","title":"\u2728 Highlights","text":"<p>Thanks to our maintainer @baszamstra! He sped up the resolver for all cases we could think of in #2162 Check the result of times it takes to solve the environments in our test set: </p>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Add <code>nodefaults</code> to imported conda envs by @ruben-arts in #2097</li> <li>Add newline to <code>.gitignore</code> by @ruben-arts in #2095</li> <li>Add <code>--no-activation</code> option to prevent env activation during global install/upgrade by @183amir in #1980</li> <li>Add <code>--priority</code> arg to <code>project channel add</code> by @minrk in #2086</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Use pixi spec for conda environment yml by @ruben-arts in #2096</li> <li>Update rattler by @nichmor in #2120</li> <li>Update README.md by @ruben-arts in #2129</li> <li>Follow symlinks while walking files by @0xbe7a in #2141</li> </ul>"},{"location":"CHANGELOG/#documentation_4","title":"Documentation","text":"<ul> <li>Adapt wording in pixi global proposal by @Hofer-Julian in #2098</li> <li>Community: add array-api-extra by @lucascolley in #2107</li> <li><code>pixi global</code> mention <code>no-activation</code> by @Hofer-Julian in #2109</li> <li>Add minimal constructor example by @bollwyvl in #2102</li> <li>Update global manifest <code>install</code> by @Hofer-Julian in #2128</li> <li>Add description for <code>pixi update --json</code> by @scottamain in #2160</li> <li>Fixes backticks for doc strings by @rachfop in #2174</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Sort exported conda explicit spec topologically by @synapticarbors in #2101</li> <li><code>--import env_file</code> breaks channel priority by @fecet in #2113</li> <li>Allow exact yanked pypi packages by @nichmor in #2116</li> <li>Check if files are same in <code>self-update</code> by @apoorvkh in #2132</li> <li><code>get_or_insert_nested_table</code> by @Hofer-Julian in #2167</li> <li>Improve <code>install.sh</code> PATH handling and general robustness by @Arcitec in #2189</li> <li>Output tasks on <code>pixi run</code> without input by @ruben-arts in #2193</li> </ul>"},{"location":"CHANGELOG/#performance","title":"Performance","text":"<ul> <li>Significantly speed up conda resolution by @baszalmstra in #2162</li> </ul>"},{"location":"CHANGELOG/#new-contributors_2","title":"New Contributors","text":"<ul> <li>@Arcitec made their first contribution in #2189</li> <li>@rachfop made their first contribution in #2174</li> <li>@scottamain made their first contribution in #2160</li> <li>@apoorvkh made their first contribution in #2132</li> <li>@0xbe7a made their first contribution in #2141</li> <li>@fecet made their first contribution in #2113</li> <li>@minrk made their first contribution in #2086</li> <li>@183amir made their first contribution in #1980</li> <li>@lucascolley made their first contribution in #2107</li> </ul>"},{"location":"CHANGELOG/#0300-2024-09-19","title":"[0.30.0] - 2024-09-19","text":""},{"location":"CHANGELOG/#highlights_5","title":"\u2728 Highlights","text":"<p>I want to thank @synapticarbors and @abkfenris for starting the work on <code>pixi project export</code>. Pixi now supports the export of a conda <code>environment.yml</code> file and a conda explicit specification file. This is a great addition to the project and will help users to share their projects with other non pixi users.</p>"},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Export conda explicit specification file from project by @synapticarbors in #1873</li> <li>Add flag to <code>pixi search</code> by @Hofer-Julian in #2018</li> <li>Adds the ability to set the index strategy by @tdejager in #1986</li> <li>Export conda <code>environment.yml</code> by @abkfenris in #2003</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Improve examples/docker by @jennydaman in #1965</li> <li>Minimal pre-commit tasks by @Hofer-Julian in #1984</li> <li>Improve error and feedback when target does not exist by @tdejager in #1961</li> <li>Move the rectangle using a mouse in SDL by @certik in #2069</li> </ul>"},{"location":"CHANGELOG/#documentation_5","title":"Documentation","text":"<ul> <li>Update cli.md by @xela-95 in #2047</li> <li>Update <code>system-requirements</code> information by @ruben-arts in #2079</li> <li>Append to file syntax in task docs by @nicornk in #2013</li> <li>Change documentation of pixi upload to refer to correct API endpoint by @traversaro in #2074</li> </ul>"},{"location":"CHANGELOG/#testing","title":"Testing","text":"<ul> <li>Add downstream nerfstudio test by @tdejager in #1996</li> <li>Run pytests in parallel by @tdejager in #2027</li> <li>Testing common wheels by @tdejager in #2031</li> </ul>"},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Lock file is always outdated for pypi path dependencies by @nichmor in #2039</li> <li>Fix error message for export conda explicit spec by @synapticarbors in #2048</li> <li>Use <code>conda-pypi-map</code> for feature channels by @nichmor in #2038</li> <li>Constrain feature platforms in schema by @bollwyvl in #2055</li> <li>Split tag creation functions by @tdejager in #2062</li> <li>Tree print to pipe by @ruben-arts in #2064</li> <li><code>subdirectory</code> in pypi url by @ruben-arts in #2065</li> <li>Create a GUI application on Windows, not Console by @certik in #2067</li> <li>Make dashes underscores in python package names by @ruben-arts in #2073</li> <li>Give better errors on broken <code>pyproject.toml</code> by @ruben-arts in #2075</li> </ul>"},{"location":"CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>Stop duplicating <code>strip_channel_alias</code> from rattler by @Hofer-Julian in #2017</li> <li>Follow-up wheels tests by @Hofer-Julian in #2063</li> <li>Integration test suite by @Hofer-Julian in #2081</li> <li>Remove <code>psutils</code> by @Hofer-Julian in #2083</li> <li>Add back older caching method by @tdejager in #2046</li> <li>Release script by @Hofer-Julian in #1978</li> <li>Activation script by @Hofer-Julian in #2014</li> <li>Pins python version in add_pypi_functionality by @tdejager in #2040</li> <li>Improve the lock_file_usage flags and behavior. by @ruben-arts in #2078</li> <li>Move matrix to workflow that it is used in by @tdejager in #1987</li> <li>Refactor manifest into more generic approach by @nichmor in #2015</li> </ul>"},{"location":"CHANGELOG/#new-contributors_3","title":"New Contributors","text":"<ul> <li>@certik made their first contribution in #2069</li> <li>@xela-95 made their first contribution in #2047</li> <li>@nicornk made their first contribution in #2013</li> <li>@jennydaman made their first contribution in #1965</li> </ul>"},{"location":"CHANGELOG/#0290-2024-09-04","title":"[0.29.0] - 2024-09-04","text":""},{"location":"CHANGELOG/#highlights_6","title":"\u2728 Highlights","text":"<ul> <li>Add build-isolation options, for more details check out our docs</li> <li>Allow to use virtual package overrides from environment variables (PR)</li> <li>Many bug fixes</li> </ul>"},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Add build-isolation options by @tdejager in #1909</li> </ul> <ul> <li>Add release script by @Hofer-Julian in #1971</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Use rustls-tls instead of native-tls per default by @Hofer-Julian in #1929</li> </ul> <ul> <li>Upgrade to uv 0.3.4 by @tdejager in #1936</li> </ul> <ul> <li>Upgrade to uv 0.4.0 by @tdejager in #1944</li> </ul> <ul> <li>Better error for when the target or platform are missing by @tdejager in #1959</li> </ul> <ul> <li>Improve integration tests by @Hofer-Julian in #1958</li> </ul> <ul> <li>Improve release script by @Hofer-Julian in #1974</li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Update env variables in installation docs by @lev112 in #1937</li> </ul> <ul> <li>Always overwrite when pixi adding the dependency by @ruben-arts in #1935</li> </ul> <ul> <li>Typo in schema.json by @SobhanMP in #1948</li> </ul> <ul> <li>Using file url as mapping by @nichmor in #1930</li> </ul> <ul> <li>Offline mapping should not request by @nichmor in #1968</li> </ul> <ul> <li><code>pixi init</code> for <code>pyproject.toml</code> by @Hofer-Julian in #1947</li> </ul> <ul> <li>Use two in memory indexes, for resolve and builds by @tdejager in #1969</li> </ul> <ul> <li>Minor issues and todos by @KGrewal1 in #1963</li> </ul>"},{"location":"CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>Improve integration tests by @Hofer-Julian in #1942</li> </ul>"},{"location":"CHANGELOG/#new-contributors_4","title":"New Contributors","text":"<ul> <li>@SobhanMP made their first contribution in #1948</li> <li>@lev112 made their first contribution in #1937</li> </ul>"},{"location":"CHANGELOG/#0282-2024-08-28","title":"[0.28.2] - 2024-08-28","text":""},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Use mold on linux by @Hofer-Julian in #1914</li> </ul>"},{"location":"CHANGELOG/#documentation_6","title":"Documentation","text":"<ul> <li>Fix global manifest by @Hofer-Julian in #1912</li> <li>Document azure keyring usage by @tdejager in #1913</li> </ul>"},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Let <code>init</code> add dependencies independent of target and don't install by @ruben-arts in #1916</li> <li>Enable use of manylinux wheeltags once again by @tdejager in #1925</li> <li>The bigger runner by @ruben-arts in #1902</li> </ul>"},{"location":"CHANGELOG/#0281-2024-08-26","title":"[0.28.1] - 2024-08-26","text":""},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Uv upgrade to 0.3.2 by @tdejager in #1900</li> </ul>"},{"location":"CHANGELOG/#documentation_7","title":"Documentation","text":"<ul> <li>Add <code>keyrings.artifacts</code> to the list of project built with <code>pixi</code> by @jslorrma in #1908</li> </ul>"},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Use default indexes if non where given by the lockfile by @ruben-arts in #1910</li> </ul>"},{"location":"CHANGELOG/#new-contributors_5","title":"New Contributors","text":"<ul> <li>@jslorrma made their first contribution in #1908</li> </ul>"},{"location":"CHANGELOG/#0280-2024-08-22","title":"[0.28.0] - 2024-08-22","text":""},{"location":"CHANGELOG/#highlights_7","title":"\u2728 Highlights","text":"<ul> <li>Bug Fixes: Major fixes in general but especially for PyPI installation issues and better error messaging.</li> <li>Compatibility: Default Linux version downgraded to 4.18 for broader support.</li> <li>New Features: Added INIT_CWD in pixi run, improved logging, and more cache options.</li> </ul>"},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Add <code>INIT_CWD</code> to activated env <code>pixi run</code> by @ruben-arts in #1798</li> <li>Add context to error when parsing conda-meta files by @baszalmstra in #1854</li> <li>Add some logging for when packages are actually overridden by conda by @tdejager in #1874</li> <li>Add package when extra is added by @ruben-arts in #1856</li> </ul>"},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Use new gateway to get the repodata for global install by @nichmor in #1767</li> <li>Pixi global proposal by @Hofer-Julian in #1757</li> <li>Upgrade to new uv 0.2.37 by @tdejager in #1829</li> <li>Use new gateway for pixi search by @nichmor in #1819</li> <li>Extend pixi clean cache with more cache options by @ruben-arts in #1872</li> <li>Downgrade <code>__linux</code> default to <code>4.18</code> by @ruben-arts in #1887</li> </ul>"},{"location":"CHANGELOG/#documentation_8","title":"Documentation","text":"<ul> <li>Fix instructions for update github actions by @Hofer-Julian in #1774</li> <li>Fix fish completion script by @dennis-wey in #1789</li> <li>Expands the environment variable examples in the reference section by @travishathaway in #1779</li> <li>Community feedback <code>pixi global</code> by @Hofer-Julian in #1800</li> <li>Additions to the pixi global proposal by @Hofer-Julian in #1803</li> <li>Stop using invalid environment name in pixi global proposal by @Hofer-Julian in #1826</li> <li>Extend <code>pixi global</code> proposal by @Hofer-Julian in #1861</li> <li>Make <code>channels</code> required in <code>pixi global</code> manifest by @Hofer-Julian in #1868</li> <li>Fix linux minimum version in project_configuration docs by @traversaro in #1888</li> </ul>"},{"location":"CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>Try to increase <code>rlimit</code> by @baszalmstra in #1766</li> <li>Add test for invalid environment names by @Hofer-Julian in #1825</li> <li>Show global config in info command by @ruben-arts in #1807</li> <li>Correct documentation of PIXI_ENVIRONMENT_PLATFORMS by @traversaro in #1842</li> <li>Format in docs/features/environment.md by @cdeil in #1846</li> <li>Make proper use of <code>NamedChannelOrUrl</code> by @ruben-arts in #1820</li> <li>Trait impl override by @baszalmstra in #1848</li> <li>Tame <code>pixi search</code> by @baszalmstra in #1849</li> <li>Fix <code>pixi tree -i</code> duplicate output by @baszalmstra in #1847</li> <li>Improve spec parsing error messages by @baszalmstra in #1786</li> <li>Parse matchspec from CLI Lenient by @baszalmstra in #1852</li> <li>Improve parsing of pypi-dependencies by @baszalmstra in #1851</li> <li>Don't enforce system requirements for task tests by @baszalmstra in #1855</li> <li>Satisfy when there are no pypi packages in the lockfile by @ruben-arts in #1862</li> <li>Ssh url should not contain colon by @baszalmstra in #1865</li> <li><code>find-links</code> with manifest-path by @baszalmstra in #1864</li> <li>Increase stack size in debug mode on windows by @baszalmstra in #1867</li> <li>Solve-group-envs should reside in <code>.pixi</code> folder by @baszalmstra in #1866</li> <li>Move package-override logging by @tdejager in #1883</li> <li>Pinning logic for minor and major by @baszalmstra in #1885</li> <li>Docs manifest tests by @ruben-arts in #1879</li> </ul>"},{"location":"CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>Encapsulate channel resolution logic for CLI by @olivier-lacroix in #1781</li> <li>Move to <code>pub(crate) fn</code> in order to detect and remove unused functions by @Hofer-Julian in #1805</li> <li>Only compile <code>TaskNode::full_command</code> for tests by @Hofer-Julian in #1809</li> <li>Derive <code>Default</code> for more structs by @Hofer-Julian in #1824</li> <li>Rename <code>get_up_to_date_prefix</code> to <code>update_prefix</code> by @Hofer-Julian in #1837</li> <li>Make <code>HasSpecs</code> implementation more functional by @Hofer-Julian in #1863</li> </ul>"},{"location":"CHANGELOG/#new-contributors_6","title":"New Contributors","text":"<ul> <li>@cdeil made their first contribution in #1846</li> </ul>"},{"location":"CHANGELOG/#0271-2024-08-09","title":"[0.27.1] - 2024-08-09","text":""},{"location":"CHANGELOG/#documentation_9","title":"Documentation","text":"<ul> <li>Fix mlx feature in \"multiple machines\" example by @rgommers in #1762</li> <li>Update some of the cli and add osx rosetta mention by @ruben-arts in #1760</li> <li>Fix typo by @pavelzw in #1771</li> </ul>"},{"location":"CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>User agent string was wrong by @wolfv in #1759</li> <li>Dont accidentally wipe pyproject.toml on <code>init</code> by @ruben-arts in #1775</li> </ul>"},{"location":"CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>Add <code>pixi_spec</code> crate by @baszalmstra in #1741</li> </ul>"},{"location":"CHANGELOG/#new-contributors_7","title":"New Contributors","text":"<ul> <li>@rgommers made their first contribution in #1762</li> </ul>"},{"location":"CHANGELOG/#0270-2024-08-07","title":"[0.27.0] - 2024-08-07","text":""},{"location":"CHANGELOG/#highlights_8","title":"\u2728 Highlights","text":"<p>This release contains a lot of refactoring and improvements to the codebase, in preparation for future features and improvements. Including with that we've fixed a ton of bugs. To make sure we're not breaking anything we've added a lot of tests and CI checks. But let us know if you find any issues!</p> <p>As a reminder, you can update pixi using <code>pixi self-update</code> and move to a specific version, including backwards, with <code>pixi self-update --version 0.27.0</code>.</p>"},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Add <code>pixi run</code> completion for <code>fish</code> shell by @dennis-wey in #1680</li> </ul>"},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Move examples from setuptools to hatchling by @Hofer-Julian in #1692</li> <li>Let <code>pixi init</code> create hatchling pyproject.toml by @Hofer-Julian in #1693</li> <li>Make <code>[project]</code> table optional for <code>pyproject.toml</code> manifests by @olivier-lacroix in #1732</li> </ul>"},{"location":"CHANGELOG/#documentation_10","title":"Documentation","text":"<ul> <li>Improve the <code>fish</code> completions location by @tdejager in #1647</li> <li>Explain why we use <code>hatchling</code> by @Hofer-Julian</li> <li>Update install CLI doc now that the <code>update</code> command exist by @olivier-lacroix in #1690</li> <li>Mention <code>pixi exec</code> in GHA docs by @pavelzw in #1724</li> <li>Update to correct spelling by @ahnsn in #1730</li> <li>Ensure <code>hatchling</code> is used everywhere in documentation by @olivier-lacroix in #1733</li> <li>Add readme to WASM example by @wolfv in #1703</li> <li>Fix typo by @pavelzw in #1660</li> <li>Fix typo by @DimitriPapadopoulos in #1743</li> <li>Fix typo by @SeaOtocinclus in #1651</li> </ul>"},{"location":"CHANGELOG/#testing_1","title":"Testing","text":"<ul> <li>Added script and tasks for testing examples by @tdejager in #1671</li> <li>Add simple integration tests by @ruben-arts in #1719</li> </ul>"},{"location":"CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>Prepend pixi to path instead of appending by @vigneshmanick in #1644</li> <li>Add manifest tests and run them in ci by @ruben-arts in #1667</li> <li>Use hashed pypi mapping by @baszalmstra in #1663</li> <li>Depend on <code>pep440_rs</code> from crates.io and use replace by @baszalmstra in #1698</li> <li><code>pixi add</code> with more than just package name and version by @ruben-arts in #1704</li> <li>Ignore pypi logic on non pypi projects by @ruben-arts in #1705</li> <li>Fix and refactor <code>--no-lockfile-update</code> by @ruben-arts in #1683</li> <li>Changed example to use hatchling by @tdejager in #1729</li> <li>Todo clean up by @KGrewal1 in #1735</li> <li>Allow for init to <code>pixi.toml</code> when <code>pyproject.toml</code> is available. by @ruben-arts in #1640</li> <li>Test on <code>macos-13</code> by @ruben-arts in #1739</li> <li>Make sure pixi vars are available before <code>activation.env</code> vars are by @ruben-arts in #1740</li> <li>Authenticate exec package download by @olivier-lacroix in #1751</li> </ul>"},{"location":"CHANGELOG/#refactor_6","title":"Refactor","text":"<ul> <li>Extract <code>pixi_manifest</code> by @baszalmstra in #1656</li> <li>Delay channel config url evaluation by @baszalmstra in #1662</li> <li>Split out pty functionality by @tdejager in #1678</li> <li>Make project manifest loading DRY and consistent by @olivier-lacroix in #1688</li> <li>Refactor channel add and remove CLI commands by @olivier-lacroix in #1689</li> <li>Refactor <code>pixi::consts</code> and <code>pixi::config</code> into separate crates by @tdejager in #1684</li> <li>Move dependencies to <code>pixi_manifest</code> by @tdejager in #1700</li> <li>Moved pypi environment modifiers by @tdejager in #1699</li> <li>Split <code>HasFeatures</code> by @tdejager in #1712</li> <li>Move, splits and renames the <code>HasFeatures</code> trait by @tdejager in #1717</li> <li>Merge <code>utils</code> by @tdejager in #1718</li> <li>Move <code>fancy</code> to its own crate by @tdejager in #1722</li> <li>Move <code>config</code> to repodata functions by @tdejager in #1723</li> <li>Move <code>pypi-mapping</code> to its own crate by @tdejager in #1725</li> <li>Split <code>utils</code> into 2 crates by @tdejager in #1736</li> <li>Add progress bar as a crate by @nichmor in #1727</li> <li>Split up <code>pixi_manifest</code> lib by @tdejager in #1661</li> </ul>"},{"location":"CHANGELOG/#new-contributors_8","title":"New Contributors","text":"<ul> <li>@DimitriPapadopoulos made their first contribution in #1743</li> <li>@KGrewal1 made their first contribution in #1735</li> <li>@ahnsn made their first contribution in #1730</li> <li>@dennis-wey made their first contribution in #1680</li> </ul>"},{"location":"CHANGELOG/#0261-2024-07-22","title":"[0.26.1] - 2024-07-22","text":""},{"location":"CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li>Make sure we also build the msi installer by @ruben-arts in #1645</li> </ul>"},{"location":"CHANGELOG/#0260-2024-07-19","title":"[0.26.0] - 2024-07-19","text":""},{"location":"CHANGELOG/#highlights_9","title":"\u2728 Highlights","text":"<ul> <li>Specify how pixi pins your dependencies with the <code>pinning-strategy</code> in the config. e.g. <code>semver</code> -&gt; <code>&gt;=1.2.3,&lt;2</code> and <code>no-pin</code> -&gt; <code>*</code>)  #1516</li> <li>Specify how pixi solves multiple channels with <code>channel-priority</code> in the manifest. #1631</li> </ul>"},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Add short options to config location flags by @ruben-arts in #1586</li> <li>Add a file guard to indicate if an environment is being installed by @baszalmstra in #1593</li> <li>Add <code>pinning-strategy</code> to the configuration by @ruben-arts in #1516</li> <li>Add <code>channel-priority</code> to the manifest and solve by @ruben-arts in #1631</li> <li>Add <code>nushell</code> completion by @Hofer-Julian in #1599</li> <li>Add <code>nushell</code> completions for <code>pixi run</code> by @Hofer-Julian in #1627</li> <li>Add completion for <code>pixi run --environment</code> for nushell by @Hofer-Julian in #1636</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Upgrade uv 0.2.18 by @tdejager in #1540</li> <li>Refactor <code>pyproject.toml</code> parser by @nichmor in #1592</li> <li>Interactive warning for packages in <code>pixi global install</code> by @ruben-arts in #1626</li> </ul>"},{"location":"CHANGELOG/#documentation_11","title":"Documentation","text":"<ul> <li>Add WASM example with JupyterLite by @wolfv in #1623</li> <li>Added LLM example by @ytjhai in #1545</li> <li>Add note to mark directory as excluded in pixi-pycharm by @pavelzw in #1579</li> <li>Add changelog to docs by @vigneshmanick in #1574</li> <li>Updated the values of the system requirements by @tdejager in #1575</li> <li>Tell cargo install which bin to install by @ruben-arts in #1584</li> <li>Update conflict docs for <code>cargo add</code> by @Hofer-Julian in #1600</li> <li>Revert \"Update conflict docs for <code>cargo add</code> \" by @Hofer-Julian in #1605</li> <li>Add reference documentation for the exec command by @baszalmstra in #1587</li> <li>Add transitioning docs for <code>poetry</code> and <code>conda</code> by @ruben-arts in #1624</li> <li>Add pixi-pack by @pavelzw in #1629</li> <li>Use '-' instead of '_' for package name by @olivier-lacroix in #1628</li> </ul>"},{"location":"CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>Flaky task test by @tdejager in #1581</li> <li>Pass command line arguments verbatim by @baszalmstra in #1582</li> <li>Run clippy on all targets by @Hofer-Julian in #1588</li> <li>Pre-commit install pixi task by @Hofer-Julian in #1590</li> <li>Add <code>clap_complete_nushell</code> to dependencies by @Hofer-Julian in #1625</li> <li>Write to <code>stdout</code> for machine readable output by @Hofer-Julian in #1639</li> </ul>"},{"location":"CHANGELOG/#refactor_7","title":"Refactor","text":"<ul> <li>Migrate to workspace by @baszalmstra in #1597</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Remove double manifest warning by @tdejager in #1580</li> </ul>"},{"location":"CHANGELOG/#new-contributors_9","title":"New Contributors","text":"<ul> <li>@ytjhai made their first contribution in #1545</li> </ul>"},{"location":"CHANGELOG/#0250-2024-07-05","title":"[0.25.0] - 2024-07-05","text":""},{"location":"CHANGELOG/#highlights_10","title":"\u2728 Highlights","text":"<ul> <li><code>pixi exec</code> command, execute commands in temporary environments, useful for testing in short-lived sessions.</li> <li>We've bumped the default system-requirements to higher defaults: glibc (2.17 -&gt; 2.28), osx64 (10.15 -&gt; 13.0), osx-arm64 (11.0 -&gt; 13.0). Let us know if this causes any issues. To keep the previous values please use a <code>system-requirements</code> table, this is explained here</li> </ul>"},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Bump system requirements by @wolfv in #1553</li> <li>Better error when exec is missing a cmd by @tdejager in #1565</li> <li>Make exec use authenticated client by @tdejager in #1568</li> </ul>"},{"location":"CHANGELOG/#documentation_12","title":"Documentation","text":"<ul> <li>Automatic updating using github actions by @pavelzw in #1456</li> <li>Describe the --change-ps1 option for pixi shell by @Yura52 in #1536</li> <li>Add some other quantco repos by @pavelzw in #1542</li> <li>Add example using <code>geos-rs</code> by @Hofer-Julian in #1563</li> </ul>"},{"location":"CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>Tiny error in basic_usage.md by @Sjouks in #1513</li> <li>Lazy initialize client by @baszalmstra in #1511</li> <li>URL typos in rtd examples by @kklein in #1538</li> <li>Fix satisfiability for short sha hashes by @tdejager in #1530</li> <li>Wrong path passed to dynamic check by @tdejager in #1552</li> <li>Don't error if no tasks is available on platform by @hoxbro in #1550</li> </ul>"},{"location":"CHANGELOG/#refactor_8","title":"Refactor","text":"<ul> <li>Add to use update code by @baszalmstra in #1508</li> </ul>"},{"location":"CHANGELOG/#new-contributors_10","title":"New Contributors","text":"<ul> <li>@kklein made their first contribution in #1538</li> <li>@Yura52 made their first contribution in #1536</li> <li>@Sjouks made their first contribution in #1513</li> </ul>"},{"location":"CHANGELOG/#0242-2024-06-14","title":"[0.24.2] - 2024-06-14","text":""},{"location":"CHANGELOG/#documentation_13","title":"Documentation","text":"<ul> <li>Add readthedocs examples  by @bollwyvl in #1423</li> <li>Fix typo in  project_configuration.md  by @RaulPL in #1502</li> </ul>"},{"location":"CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>Too much shell variables in activation of <code>pixi shell</code>  by @ruben-arts in #1507</li> </ul>"},{"location":"CHANGELOG/#0241-2024-06-12","title":"[0.24.1] - 2024-06-12","text":""},{"location":"CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>Replace http code %2b with + by @ruben-arts in #1500</li> </ul>"},{"location":"CHANGELOG/#0240-2024-06-12","title":"[0.24.0] - 2024-06-12","text":""},{"location":"CHANGELOG/#highlights_11","title":"\u2728 Highlights","text":"<ul> <li>You can now run in a more isolated environment on <code>unix</code> machines, using <code>pixi run --clean-env TASK_NAME</code>.</li> <li>You can new easily clean your environment with <code>pixi clean</code> or the cache with <code>pixi clean cache</code></li> </ul>"},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Add <code>pixi clean</code> command by @ruben-arts in #1325</li> <li>Add <code>--clean-env</code> flag to tasks and run command by @ruben-arts in #1395</li> <li>Add <code>description</code> field to <code>task</code> by @jjjermiah in #1479</li> <li>Add pixi file to the environment to add pixi specific details by @ruben-arts in #1495</li> </ul>"},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Project environment cli by @baszalmstra in #1433</li> <li>Update task list console output by @vigneshmanick in #1443</li> <li>Upgrade uv by @tdejager in #1436</li> <li>Sort packages in <code>list_global_packages</code> by @dhirschfeld in #1458</li> <li>Added test for special chars wheel filename by @tdejager in #1454</li> </ul>"},{"location":"CHANGELOG/#documentation_14","title":"Documentation","text":"<ul> <li>Improve multi env tasks documentation by @ruben-arts in #1494</li> </ul>"},{"location":"CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>Use the activated environment when running a task by @tdejager in #1461</li> <li>Fix authentication pypi-deps for download from lockfile by @tdejager in #1460</li> <li>Display channels correctly in <code>pixi info</code> by @ruben-arts in #1459</li> <li>Render help for <code>--frozen</code> by @ruben-arts in #1468</li> <li>Don't record purl for non conda-forge channels by @nichmor in #1451</li> <li>Use best_platform to verify the run platform by @ruben-arts in #1472</li> <li>Creation of parent dir of symlink by @ruben-arts in #1483</li> <li><code>pixi install --all</code> output missing newline by @vigneshmanick in #1487</li> <li>Don't error on already existing dependency by @ruben-arts in #1449</li> <li>Remove debug true in release by @ruben-arts in #1477</li> </ul>"},{"location":"CHANGELOG/#new-contributors_11","title":"New Contributors","text":"<ul> <li>@dhirschfeld made their first contribution in #1458</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0230-2024-05-27","title":"[0.23.0] - 2024-05-27","text":""},{"location":"CHANGELOG/#highlights_12","title":"\u2728 Highlights","text":"<ul> <li>This release adds two new commands <code>pixi config</code> and <code>pixi update</code><ul> <li><code>pixi config</code> allows you to <code>edit</code>, <code>set</code>, <code>unset</code>, <code>append</code>, <code>prepend</code> and <code>list</code> your local/global or system configuration.</li> <li><code>pixi update</code> re-solves the full lockfile or use <code>pixi update PACKAGE</code> to only update <code>PACKAGE</code>, making sure your project is using the latest versions that the manifest allows for.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Add <code>pixi config</code> command by @chawyehsu in #1339</li> <li>Add <code>pixi list --explicit</code> flag command by @jjjermiah in #1403</li> <li>Add <code>[activation.env]</code> table for environment variables by @ruben-arts in #1156</li> <li>Allow installing multiple envs, including <code>--all</code> at once by @tdejager in #1413</li> <li>Add <code>pixi update</code> command to re-solve the lockfile by @baszalmstra in #1431 (fixes 20 :thumbsup:)</li> <li>Add <code>detached-environments</code> to the config, move environments outside the project folder by @ruben-arts in #1381 (fixes 11 :thumbsup:)</li> </ul>"},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Use the gateway to fetch repodata by @baszalmstra in #1307</li> <li>Switch to compressed mapping by @nichmor in #1335</li> <li>Warn on pypi conda clobbering by @nichmor in #1353</li> <li>Align <code>remove</code> arguments with <code>add</code> by @olivier-lacroix in #1406</li> <li>Add backward compat logic for older lock files by @nichmor in #1425</li> </ul>"},{"location":"CHANGELOG/#documentation_15","title":"Documentation","text":"<ul> <li>Fix small screen by removing getting started section. by @ruben-arts in #1393</li> <li>Improve caching docs by @ruben-arts in #1422</li> <li>Add example, python library using gcp upload by @tdejager in #1380</li> <li>Correct typos with <code>--no-lockfile-update</code>. by @tobiasraabe in #1396</li> </ul>"},{"location":"CHANGELOG/#fixed_17","title":"Fixed","text":"<ul> <li>Trim channel url when filter packages_for_prefix_mapping by @zen-xu in #1391</li> <li>Use the right channels when upgrading global packages by @olivier-lacroix in #1326</li> <li>Fish prompt display looks wrong in tide by @tfriedel in #1424</li> <li>Use local mapping instead of remote by @nichmor in #1430</li> </ul>"},{"location":"CHANGELOG/#refactor_9","title":"Refactor","text":"<ul> <li>Remove unused fetch_sparse_repodata by @olivier-lacroix in #1411</li> <li>Remove project level method that are per environment by @olivier-lacroix in #1412</li> <li>Update lockfile functionality for reusability by @baszalmstra in #1426</li> </ul>"},{"location":"CHANGELOG/#new-contributors_12","title":"New Contributors","text":"<ul> <li>@tfriedel made their first contribution in #1424</li> <li>@jjjermiah made their first contribution in #1403</li> <li>@tobiasraabe made their first contribution in #1396</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0220-2024-05-13","title":"[0.22.0] - 2024-05-13","text":""},{"location":"CHANGELOG/#highlights_13","title":"\u2728 Highlights","text":"<ul> <li>Support for source pypi dependencies through the cli:<ul> <li><code>pixi add --pypi 'package @ package.whl'</code>, perfect for adding just build wheels to your environment in CI.</li> <li><code>pixi add --pypi 'package_from_git @ git+https://github.com/org/package.git'</code>, to add a package from a git repository.</li> <li><code>pixi add --pypi 'package_from_path @ file:///path/to/package' --editable</code>, to add a package from a local path.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Implement more functions for <code>pixi add --pypi</code> by @wolfv in #1244</li> </ul>"},{"location":"CHANGELOG/#documentation_16","title":"Documentation","text":"<ul> <li>Update <code>install</code> cli doc by @vigneshmanick in #1336</li> <li>Replace empty default example with no-default-feature by @beenje in #1352</li> <li>Document the add &amp; remove cli behaviour with pyproject.toml manifest by @olivier-lacroix in #1338</li> <li>Add environment activation to GitHub actions docs by @pavelzw in #1371</li> <li>Clarify in CLI that run can also take commands by @twrightsman in #1368</li> </ul>"},{"location":"CHANGELOG/#fixed_18","title":"Fixed","text":"<ul> <li>Automated update of install script in pixi.sh by @ruben-arts in #1351</li> <li>Wrong description on <code>pixi project help</code> by @notPlancha in #1358</li> <li>Don't need a python interpreter when not having <code>pypi</code> dependencies. by @ruben-arts in #1366</li> <li>Don't error on not editable not path by @ruben-arts in #1365</li> <li>Align shell-hook cli with shell by @ruben-arts in #1364</li> <li>Only write prefix file if needed by @ruben-arts in #1363</li> </ul>"},{"location":"CHANGELOG/#refactor_10","title":"Refactor","text":"<ul> <li>Lock-file resolve functionality in separated modules by @tdejager in #1337</li> <li>Use generic for RepoDataRecordsByName and PypiRecordsByName by @olivier-lacroix in #1341</li> </ul>"},{"location":"CHANGELOG/#new-contributors_13","title":"New Contributors","text":"<ul> <li>@twrightsman made their first contribution in #1368</li> <li>@notPlancha made their first contribution in #1358</li> <li>@vigneshmanick made their first contribution in #1336</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0211-2024-05-07","title":"[0.21.1] - 2024-05-07","text":""},{"location":"CHANGELOG/#fixed_19","title":"Fixed","text":"<ul> <li>Use read timeout, not global timeout by @wolfv in #1329</li> <li>Channel priority logic by @ruben-arts in #1332</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0210-2024-05-06","title":"[0.21.0] - 2024-05-06","text":""},{"location":"CHANGELOG/#highlights_14","title":"\u2728 Highlights","text":"<ul> <li>This release adds support for configuring PyPI settings globally, to use alternative PyPI indexes and load credentials with keyring.</li> <li>We now support cross-platform running, for <code>osx-64</code> on <code>osx-arm64</code> and <code>wasm</code> environments.</li> <li>There is now a <code>no-default-feature</code> option to simplify usage of environments.</li> </ul>"},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Add pypi config for global local config file + keyring support by @wolfv in #1279</li> <li>Allow for cross-platform running, for <code>osx-64</code> on <code>osx-arm64</code> and <code>wasm</code> environments by @wolfv in #1020</li> </ul>"},{"location":"CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>Add <code>no-default-feature</code> option to environments by @olivier-lacroix in #1092</li> <li>Add <code>/etc/pixi/config.toml</code> to global configuration search paths by @pavelzw in #1304</li> <li>Change global config fields to kebab-case by @tdejager in #1308</li> <li>Show all available task with <code>task list</code> by @Hoxbro in #1286</li> <li>Allow to emit activation environment variables as JSON by @borchero in #1317</li> <li>Use locked pypi packages as preferences in the pypi solve to get minimally updating lock files by @ruben-arts in #1320</li> <li>Allow to upgrade several global packages at once by @olivier-lacroix in #1324</li> </ul>"},{"location":"CHANGELOG/#documentation_17","title":"Documentation","text":"<ul> <li>Typo in tutorials python by @carschandler in #1297</li> <li>Python Tutorial: Dependencies, PyPI, Order, Grammar by @JesperDramsch in #1313</li> </ul>"},{"location":"CHANGELOG/#fixed_20","title":"Fixed","text":"<ul> <li>Schema version and add it to tbump by @ruben-arts in #1284</li> <li>Make integration test fail in ci and fix ssh issue by @ruben-arts in #1301</li> <li>Automate adding install scripts to the docs by @ruben-arts in #1302</li> <li>Do not always request for prefix mapping by @nichmor in #1300</li> <li>Align CLI aliases and add missing by @ruben-arts in #1316</li> <li>Alias <code>depends_on</code> to <code>depends-on</code> by @ruben-arts in #1310</li> <li>Add error if channel or platform doesn't exist on remove by @ruben-arts in #1315</li> <li>Allow spec in <code>pixi q</code> instead of only name by @ruben-arts in #1314</li> <li>Remove dependency on sysroot for linux by @ruben-arts in #1319</li> <li>Fix linking symlink issue, by updating to the latest <code>rattler</code> by @baszalmstra in #1327</li> </ul>"},{"location":"CHANGELOG/#refactor_11","title":"Refactor","text":"<ul> <li>Use IndexSet instead of Vec for collections of unique elements by @olivier-lacroix in #1289</li> <li>Use generics over PyPiDependencies and CondaDependencies by @olivier-lacroix in #1303</li> </ul>"},{"location":"CHANGELOG/#new-contributors_14","title":"New Contributors","text":"<ul> <li>@borchero made their first contribution in #1317</li> <li>@JesperDramsch made their first contribution in #1313</li> <li>@Hoxbro made their first contribution in #1286</li> <li>@carschandler made their first contribution in #1297</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0201-2024-04-26","title":"[0.20.1] - 2024-04-26","text":""},{"location":"CHANGELOG/#highlights_15","title":"\u2728 Highlights","text":"<ul> <li>Big improvements on the pypi-editable installs.</li> </ul>"},{"location":"CHANGELOG/#fixed_21","title":"Fixed","text":"<ul> <li>Editable non-satisfiable by @baszalmstra in #1251</li> <li>Satisfiability with pypi extras by @baszalmstra in #1253</li> <li>Change global install activation script permission from 0o744 -&gt; 0o755 by @zen-xu in #1250</li> <li>Avoid creating Empty TOML tables by @olivier-lacroix in #1270</li> <li>Uses the special-case uv path handling for both built and source by @tdejager in #1263</li> <li>Modify test before attempting to write to .bash_profile in install.sh by @bruchim-cisco in #1267</li> <li>Parse properly 'default' as environment Cli argument by @olivier-lacroix in #1247</li> <li>Apply <code>schema.json</code> normalization, add to docs by @bollwyvl in #1265</li> <li>Improve absolute path satisfiability by @tdejager in #1252</li> <li>Improve parse deno error and make task a required field in the cli by @ruben-arts in #1260</li> </ul>"},{"location":"CHANGELOG/#new-contributors_15","title":"New Contributors","text":"<ul> <li>@bollwyvl made their first contribution in #1265</li> <li>@bruchim-cisco made their first contribution in #1267</li> <li>@zen-xu made their first contribution in #1250</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0200-2024-04-19","title":"[0.20.0] - 2024-04-19","text":""},{"location":"CHANGELOG/#highlights_16","title":"\u2728 Highlights","text":"<ul> <li>We now support <code>env</code> variables in the <code>task</code> definition, these can also be used as default values for parameters in your task which you can overwrite with your shell's env variables. e.g. <code>task = { cmd = \"task to run\", env = { VAR=\"value1\", PATH=\"my/path:$PATH\" } }</code></li> <li>We made a big effort on fixing issues and improving documentation!</li> </ul>"},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>Add <code>env</code> to the tasks to specify tasks specific environment variables by @wolfv in https://github.com/prefix-dev/pixi/pull/972</li> </ul>"},{"location":"CHANGELOG/#changed_15","title":"Changed","text":"<ul> <li>Add <code>--pyproject</code> option to <code>pixi init</code> with a pyproject.toml by @olivier-lacroix in #1188</li> <li>Upgrade to new uv version 0.1.32 by @tdejager in #1208</li> </ul>"},{"location":"CHANGELOG/#documentation_18","title":"Documentation","text":"<ul> <li>Document <code>pixi.lock</code> by @ruben-arts in #1209</li> <li>Document channel <code>priority</code> definition by @ruben-arts in #1234</li> <li>Add rust tutorial including openssl example by @ruben-arts in #1155</li> <li>Add python tutorial to documentation by @tdejager in #1179</li> <li>Add JupyterLab integration docs by @renan-r-santos in #1147</li> </ul> <ul> <li>Add Windows support for PyCharm integration by @pavelzw in #1192</li> <li>Setup_pixi for local pixi installation by @ytausch in #1181</li> <li>Update pypi docs by @Hofer-Julian in #1215</li> <li>Fix order of <code>--no-deps</code> when pip installing in editable mode by @glemaitre in #1220</li> <li>Fix frozen documentation by @ruben-arts in #1167</li> </ul>"},{"location":"CHANGELOG/#fixed_22","title":"Fixed","text":"<ul> <li>Small typo in list cli by @tdejager in #1169</li> <li>Issue with invalid solve group by @baszalmstra in #1190</li> <li>Improve error on parsing lockfile by @ruben-arts in #1180</li> <li>Replace <code>_</code> with <code>-</code> when creating environments from features by @wolfv in #1203</li> <li>Prevent duplicate direct dependencies in tree by @abkfenris in #1184</li> <li>Use project root directory instead of task.working_directory for base dir when hashing by @wolfv in #1202</li> <li>Do not leak env vars from bat scripts in cmd.exe by @wolfv in #1205</li> <li>Make file globbing behave more as expected by @wolfv in #1204</li> <li>Fix for using file::// in pyproject.toml dependencies by @tdejager in #1196</li> <li>Improve pypi version conversion in pyproject.toml dependencies by @wolfv in #1201</li> <li>Update to the latest rattler by @wolfv in #1235</li> </ul>"},{"location":"CHANGELOG/#breaking","title":"BREAKING","text":"<ul> <li><code>task = { cmd = \"task to run\", cwd = \"folder\", inputs = \"input.txt\", output = \"output.txt\"}</code> Where <code>input.txt</code> and <code>output.txt</code> where previously in <code>folder</code> they are now relative the project root. This changed in: #1202</li> <li><code>task = { cmd = \"task to run\", inputs = \"input.txt\"}</code> previously searched for all <code>input.txt</code> files now only for the ones in the project root. This changed in:  #1204</li> </ul>"},{"location":"CHANGELOG/#new-contributors_16","title":"New Contributors","text":"<ul> <li>@glemaitre made their first contribution in #1220</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0191-2024-04-11","title":"[0.19.1] - 2024-04-11","text":""},{"location":"CHANGELOG/#highlights_17","title":"\u2728 Highlights","text":"<p>This fixes the issue where pixi would generate broken environments/lockfiles when a mapping for a brand-new version of a package is missing.</p>"},{"location":"CHANGELOG/#changed_16","title":"Changed","text":"<ul> <li>Add fallback mechanism for missing mapping by @nichmor in #1166</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0190-2024-04-10","title":"[0.19.0] - 2024-04-10","text":""},{"location":"CHANGELOG/#highlights_18","title":"\u2728 Highlights","text":"<ul> <li>This release adds a new <code>pixi tree</code> command to show the dependency tree of the project.</li> <li>Pixi now persists the manifest and environment when activating a shell, so you can use pixi as if you are in that folder while in the shell.</li> </ul>"},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li><code>pixi tree</code> command to show dependency tree by @abkfenris in #1069</li> <li>Persistent shell manifests by @abkfenris in #1080</li> <li>Add to pypi in feature (<code>pixi add --feature test --pypi package</code>) by @ruben-arts in #1135</li> <li>Use new mapping by @nichmor in #888</li> <li><code>--no-progress</code> to disable all progress bars by @baszalmstra in #1105</li> <li>Create a table if channel is specified (<code>pixi add conda-forge::rattler-build</code>) by @baszalmstra in #1079</li> </ul>"},{"location":"CHANGELOG/#changed_17","title":"Changed","text":"<ul> <li>Add the project itself as an editable dependency by @olivier-lacroix in #1084</li> <li>Get <code>tool.pixi.project.name</code> from <code>project.name</code> by @olivier-lacroix in #1112</li> <li>Create <code>features</code> and <code>environments</code> from extras by @olivier-lacroix in #1077</li> <li>Pypi supports come out of Beta by @olivier-lacroix in #1120</li> <li>Enable to force <code>PIXI_ARCH</code> for pixi installation by @beenje in #1129</li> <li>Improve tool.pixi.project detection logic by @olivier-lacroix in #1127</li> <li>Add purls for packages if adding pypi dependencies by @nichmor in #1148</li> <li>Add env name if not default to <code>tree</code> and <code>list</code> commands by @ruben-arts in #1145</li> </ul>"},{"location":"CHANGELOG/#documentation_19","title":"Documentation","text":"<ul> <li>Add MODFLOW 6 to community docs by @Hofer-Julian in #1125</li> <li>Addition of ros2 tutorial by @ruben-arts in #1116</li> <li>Improve install script docs by @ruben-arts in #1136</li> <li>More structured table of content by @tdejager in #1142</li> </ul>"},{"location":"CHANGELOG/#fixed_23","title":"Fixed","text":"<ul> <li>Amend syntax in <code>conda-meta/history</code> to prevent <code>conda.history.History.parse()</code> error by @jaimergp in #1117</li> <li>Fix docker example and include <code>pyproject.toml</code> by @tdejager in #1121</li> </ul>"},{"location":"CHANGELOG/#new-contributors_17","title":"New Contributors","text":"<ul> <li>@abkfenris made their first contribution in #1069</li> <li>@beenje made their first contribution in #1129</li> <li>@jaimergp made their first contribution in #1117</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0180-2024-04-02","title":"[0.18.0] - 2024-04-02","text":""},{"location":"CHANGELOG/#highlights_19","title":"\u2728 Highlights","text":"<ul> <li>This release adds support for <code>pyproject.toml</code>, now pixi reads from the <code>[tool.pixi]</code> table.</li> <li>We now support editable PyPI dependencies, and PyPI source dependencies, including <code>git</code>, <code>path</code>, and <code>url</code> dependencies.</li> </ul> <p>[!TIP] These new features are part of the ongoing effort to make pixi more flexible, powerful, and comfortable for the python users. They are still in progress so expect more improvements on these features soon, so please report any issues you encounter and follow our next releases!</p>"},{"location":"CHANGELOG/#added_13","title":"Added","text":"<ul> <li>Support for <code>pyproject.toml</code> by @olivier-lacroix in #999</li> <li>Support for PyPI source dependencies by @tdejager in #985</li> <li>Support for editable PyPI dependencies by @tdejager in #1044</li> </ul>"},{"location":"CHANGELOG/#changed_18","title":"Changed","text":"<ul> <li><code>XDG_CONFIG_HOME</code> and <code>XDG_CACHE_HOME</code> compliance by @chawyehsu in #1050</li> <li>Build pixi for windows arm by @baszalmstra in #1053</li> <li>Platform literals by @baszalmstra in #1054</li> <li>Cli docs: --user is actually --username</li> <li>Fixed error in auth example (CLI docs) by @ytausch in #1076</li> </ul>"},{"location":"CHANGELOG/#documentation_20","title":"Documentation","text":"<ul> <li>Add lockfile update description in preparation for pixi update by @ruben-arts in #1073</li> <li><code>zsh</code> may be used for installation on macOS by @pya in #1091</li> <li>Fix typo in <code>pixi auth</code> documentation by @ytausch in #1076</li> <li>Add <code>rstudio</code> to the IDE integration docs by @wolfv in #1144</li> </ul>"},{"location":"CHANGELOG/#fixed_24","title":"Fixed","text":"<ul> <li>Test failure on riscv64 by @hack3ric in #1045</li> <li>Validation test was testing on a wrong pixi.toml by @ruben-arts in #1056</li> <li>Pixi list shows path and editable by @baszalmstra in #1100</li> <li>Docs ci by @ruben-arts in #1074</li> <li>Add error for unsupported pypi dependencies by @baszalmstra in #1052</li> <li>Interactively delete environment when it was relocated by @baszalmstra in #1102</li> <li>Allow solving for different platforms by @baszalmstra in #1101</li> <li>Don't allow extra keys in pypi requirements by @baszalmstra in #1104</li> <li>Solve when moving dependency from conda to pypi by @baszalmstra in #1099</li> </ul>"},{"location":"CHANGELOG/#new-contributors_18","title":"New Contributors","text":"<ul> <li>@pya made their first contribution in #1091</li> <li>@ytausch made their first contribution in #1076</li> <li>@hack3ric made their first contribution in #1045</li> <li>@olivier-lacroix made their first contribution in #999</li> <li>@henryiii made their first contribution in #1063</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0171-2024-03-21","title":"[0.17.1] - 2024-03-21","text":""},{"location":"CHANGELOG/#highlights_20","title":"\u2728 Highlights","text":"<p>A quick bug-fix release for <code>pixi list</code>.</p>"},{"location":"CHANGELOG/#documentation_21","title":"Documentation","text":"<ul> <li>Fix typo by @pavelzw in #1028</li> </ul>"},{"location":"CHANGELOG/#fixed_25","title":"Fixed","text":"<ul> <li>Remove the need for a python interpreter in <code>pixi list</code> by @baszalmstra in #1033</li> </ul>"},{"location":"CHANGELOG/#0170-2024-03-19","title":"[0.17.0] - 2024-03-19","text":""},{"location":"CHANGELOG/#highlights_21","title":"\u2728 Highlights","text":"<ul> <li>This release greatly improves <code>pixi global</code> commands, thanks to @chawyehsu!</li> <li>We now support global (or local) configuration for pixi's own behavior, including mirrors, and OCI registries.</li> <li>We support channel mirrors for corporate environments!</li> <li>Faster <code>task</code> execution thanks to caching \ud83d\ude80 Tasks that already executed successfully can be skipped based on the hash of the <code>inputs</code> and <code>outputs</code>.</li> <li>PyCharm and GitHub Actions integration thanks to @pavelzw \u2013 read more about it in the docs!</li> </ul>"},{"location":"CHANGELOG/#added_14","title":"Added","text":"<ul> <li>Add citation file by @ruben-arts in #908</li> <li>Add a pixi badge by @ruben-arts in #961</li> <li>Add deserialization of pypi source dependencies from toml by @ruben-arts and @wolf in #895 #984</li> <li>Implement mirror and OCI settings by @wolfv in #988</li> <li>Implement <code>inputs</code> and <code>outputs</code> hash based task skipping by @wolfv in #933</li> </ul>"},{"location":"CHANGELOG/#changed_19","title":"Changed","text":"<ul> <li>Refined global upgrade commands by @chawyehsu in #948</li> <li>Global upgrade supports matchspec by @chawyehsu in #962</li> <li>Improve <code>pixi search</code> with platform selection and making limit optional by @wolfv in #979</li> <li>Implement global config options by @wolfv in #960 #1015 #1019</li> <li>Update auth to use rattler cli by @kassoulait by @ruben-arts in #986</li> </ul>"},{"location":"CHANGELOG/#documentation_22","title":"Documentation","text":"<ul> <li>Remove cache: true from setup-pixi by @pavelzw in #950</li> <li>Add GitHub Actions documentation by @pavelzw in #955</li> <li>Add PyCharm documentation by @pavelzw in #974</li> <li>Mention <code>watch_file</code> in direnv usage by @pavelzw in #983</li> <li>Add tip to help users when no PROFILE file exists by @ruben-arts in #991</li> <li>Move yaml comments into mkdocs annotations by @pavelzw in #1003</li> <li>Fix --env and extend actions examples by @ruben-arts in #1005</li> <li>Add Wflow to projects built with pixi by @Hofer-Julian in #1006</li> <li>Removed <code>linenums</code> to avoid buggy visualization by @ruben-arts in #1002</li> <li>Fix typos by @pavelzw in #1016</li> </ul>"},{"location":"CHANGELOG/#fixed_26","title":"Fixed","text":"<ul> <li>Pypi dependencies not being removed by @tdejager in #952</li> <li>Permissions for lint pr by @ruben-arts in #852</li> <li>Install Windows executable with <code>install.sh</code> in Git Bash by @jdblischak in #966</li> <li>Proper scanning of the conda-meta folder for <code>json</code> entries by @wolfv in #971</li> <li>Global shim scripts for Windows by @wolfv in #975</li> <li>Correct fish prompt by @wolfv in #981</li> <li>Prefix_file rename by @ruben-arts in #959</li> <li>Conda transitive dependencies of pypi packages are properly extracted by @baszalmstra in #967</li> <li>Make tests more deterministic and use single * for glob expansion by @wolfv in #987</li> <li>Create conda-meta/history file by @pavelzw in #995</li> <li>Pypi dependency parsing was too lenient by @wolfv in #984</li> <li>Add reactivation of the environment in pixi shell by @wolfv in #982</li> <li>Add <code>tool</code> to strict json schema by @ruben-arts in #969</li> </ul>"},{"location":"CHANGELOG/#new-contributors_19","title":"New Contributors","text":"<ul> <li>@jdblischak made their first contribution in #966</li> <li>@kassoulait made their first contribution in #986</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0161-2024-03-11","title":"[0.16.1] - 2024-03-11","text":""},{"location":"CHANGELOG/#fixed_27","title":"Fixed","text":"<ul> <li>Parse lockfile matchspecs lenient, fixing bug introduced in <code>0.16.0</code> by @ruben-arts in #951</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0160-2024-03-09","title":"[0.16.0] - 2024-03-09","text":""},{"location":"CHANGELOG/#highlights_22","title":"\u2728 Highlights","text":"<ul> <li>This release removes <code>rip</code> and add <code>uv</code> as the PyPI resolver and installer.</li> </ul>"},{"location":"CHANGELOG/#added_15","title":"Added","text":"<ul> <li>Add tcsh install support by @obust in #898</li> <li>Add user agent to pixi http client by @baszalmstra in #892</li> <li>Add a schema for the pixi.toml by @ruben-arts in #936</li> </ul>"},{"location":"CHANGELOG/#changed_20","title":"Changed","text":"<ul> <li>Switch from rip to uv by @tdejager in #863</li> <li>Move uv options into context by @tdejager in #911</li> <li>Add Deltares projects to Community.md by @Hofer-Julian in #920</li> <li>Upgrade to uv 0.1.16, updated for changes in the API by @tdejager in #935</li> </ul>"},{"location":"CHANGELOG/#fixed_28","title":"Fixed","text":"<ul> <li>Made the uv re-install logic a bit more clear by @tdejager in #894</li> <li>Avoid duplicate pip dependency while importing environment.yaml by @sumanth-manchala in #890</li> <li>Handle custom channels when importing from env yaml by @sumanth-manchala in #901</li> <li>Pip editable installs getting uninstalled by @renan-r-santos in #902</li> <li>Highlight pypi deps in pixi list by @sumanth-manchala in #907</li> <li>Default to the default environment if possible by @ruben-arts in #921</li> <li>Switching channels by @baszalmstra in #923</li> <li>Use correct name of the channel on adding by @ruben-arts in #928</li> <li>Turn back on jlap for faster repodata fetching by @ruben-arts in #937</li> <li>Remove dists site-packages's when python interpreter changes by @tdejager in #896</li> </ul>"},{"location":"CHANGELOG/#new-contributors_20","title":"New Contributors","text":"<ul> <li>@obust made their first contribution in #898</li> <li>@renan-r-santos made their first contribution in #902</li> </ul> <p>Full Commit history</p>"},{"location":"CHANGELOG/#0152-2024-02-29","title":"[0.15.2] - 2024-02-29","text":""},{"location":"CHANGELOG/#changed_21","title":"Changed","text":"<ul> <li>Add more info to a failure of activation by @ruben-arts in #873</li> </ul>"},{"location":"CHANGELOG/#fixed_29","title":"Fixed","text":"<ul> <li>Improve global list UX when there is no global env dir created by @sumanth-manchala in #865</li> <li>Update rattler to <code>v0.19.0</code> by @AliPiccioniQC in #885</li> <li>Error on <code>pixi run</code> if platform is not supported by @ruben-arts in #878</li> </ul>"},{"location":"CHANGELOG/#new-contributors_21","title":"New Contributors","text":"<ul> <li>@sumanth-manchala made their first contribution in #865</li> <li>@AliPiccioniQC made their first contribution in #885</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0151-2024-02-26","title":"[0.15.1] - 2024-02-26","text":""},{"location":"CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Add prefix to project info json output by @baszalmstra in #859</li> </ul>"},{"location":"CHANGELOG/#changed_22","title":"Changed","text":"<ul> <li>New <code>pixi global list</code> display format by @chawyehsu in #723</li> <li>Add direnv usage by @pavelzw in #845</li> <li>Add docker example by @pavelzw in #846</li> <li>Install/remove multiple packages globally by @chawyehsu in #854</li> </ul>"},{"location":"CHANGELOG/#fixed_30","title":"Fixed","text":"<ul> <li>Prefix file in <code>init --import</code> by @ruben-arts in #855</li> <li>Environment and feature names in pixi info --json by @baszalmstra in #857</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0150-2024-02-23","title":"[0.15.0] - 2024-02-23","text":""},{"location":"CHANGELOG/#highlights_23","title":"\u2728 Highlights","text":"<ul> <li><code>[pypi-dependencies]</code> now get build in the created environment so it uses the conda installed build tools.</li> <li><code>pixi init --import env.yml</code> to import an existing conda environment file.</li> <li><code>[target.unix.dependencies]</code> to specify dependencies for unix systems instead of per platform.</li> </ul> <p>[!WARNING] This versions build failed, use <code>v0.15.1</code></p>"},{"location":"CHANGELOG/#added_17","title":"Added","text":"<ul> <li>pass environment variables during pypi resolution and install (#818)</li> <li>skip micromamba style selector lines and warn about them (#830)</li> <li>add import yml flag (#792)</li> <li>check duplicate dependencies (#717)</li> <li>(ci) check conventional PR title (#820)</li> <li>add <code>--feature</code> to <code>pixi add</code> (#803)</li> <li>add windows, macos, linux and unix to targets (#832)</li> </ul>"},{"location":"CHANGELOG/#fixed_31","title":"Fixed","text":"<ul> <li>cache and retry pypi name mapping (#839)</li> <li>check duplicates while adding dependencies (#829)</li> <li>logic <code>PIXI_NO_PATH_UPDATE</code> variable (#822)</li> </ul>"},{"location":"CHANGELOG/#other","title":"Other","text":"<ul> <li>add <code>mike</code> to the documentation and update looks (#809)</li> <li>add instructions for installing on Alpine Linux (#828)</li> <li>more error reporting in <code>self-update</code> (#823)</li> <li>disabled <code>jlap</code> for now (#836)</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0140-2024-02-15","title":"[0.14.0] - 2024-02-15","text":""},{"location":"CHANGELOG/#highlights_24","title":"\u2728 Highlights","text":"<p>Now, <code>solve-groups</code> can be used in <code>[environments]</code> to ensure dependency alignment across different environments without simultaneous installation. This feature is particularly beneficial for managing identical dependencies in <code>test</code> and <code>production</code> environments. Example configuration:</p> <p><pre><code>[environments]\ntest = { features = [\"prod\", \"test\"], solve-groups = [\"group1\"] }\nprod = { features = [\"prod\"], solve-groups = [\"group1\"] }\n</code></pre> This setup simplifies managing dependencies that must be consistent across <code>test</code> and <code>production</code>.</p>"},{"location":"CHANGELOG/#added_18","title":"Added","text":"<ul> <li>Add index field to pypi requirements by @vlad-ivanov-name in #784</li> <li>Add <code>-f</code>/<code>--feature</code> to the <code>pixi project platform</code> command by @ruben-arts in #785</li> <li>Warn user when unused features are defined by @ruben-arts in #762</li> <li>Disambiguate tasks interactive by @baszalmstra in #766</li> <li>Solve groups for conda by @baszalmstra in #783</li> <li>Pypi solve groups by @baszalmstra in #802</li> <li>Enable reflinks by @baszalmstra in #729</li> </ul>"},{"location":"CHANGELOG/#changed_23","title":"Changed","text":"<ul> <li>Add environment name to the progress by @ruben-arts in #788</li> <li>Set color scheme by @ruben-arts in #773</li> <li>Update lock on <code>pixi list</code> by @ruben-arts in #775</li> <li>Use default env if task available in it. by @ruben-arts in #772</li> <li>Color environment name in install step by @ruben-arts in #795</li> </ul>"},{"location":"CHANGELOG/#fixed_32","title":"Fixed","text":"<ul> <li>Running cuda env and using those tasks. by @ruben-arts in #764</li> <li>Make svg a gif by @ruben-arts in #782</li> <li>Fmt by @ruben-arts</li> <li>Check for correct platform in task env creation by @ruben-arts in #759</li> <li>Remove using source name by @ruben-arts in #765</li> <li>Auto-guessing of the shell in the <code>shell-hook</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/811</li> <li><code>sdist</code> with direct references by @nichmor in https://github.com/prefix-dev/pixi/pull/813</li> </ul>"},{"location":"CHANGELOG/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Add slim-trees to community projects by @pavelzw in #760</li> <li>Add test to default env in polarify example</li> <li>Add multiple machine example by @ruben-arts in #757</li> <li>Add more documentation on <code>environments</code> by @ruben-arts in #790</li> <li>Update rip and rattler by @wolfv in #798</li> <li>Rattler 0.18.0 by @baszalmstra in #805</li> <li>Rip 0.8.0 by @nichmor in #806</li> <li>Fix authentication path by @pavelzw in #796</li> <li>Initial addition of integration test by @ruben-arts in https://github.com/prefix-dev/pixi/pull/804</li> </ul>"},{"location":"CHANGELOG/#new-contributors_22","title":"New Contributors","text":"<ul> <li>@vlad-ivanov-name made their first contribution in #784</li> <li>@nichmor made their first contribution in #806</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0130-2024-02-01","title":"[0.13.0] - 2024-02-01","text":""},{"location":"CHANGELOG/#highlights_25","title":"\u2728 Highlights","text":"<p>This release is pretty crazy in amount of features! The major ones are: - We added support for multiple environments. :tada: Checkout the documentation - We added support for <code>sdist</code> installation, which greatly improves the amount of packages that can be installed from PyPI. :rocket:</p> <p>[!IMPORTANT]</p> <p>Renaming of <code>PIXI_PACKAGE_*</code> variables: <pre><code>PIXI_PACKAGE_ROOT -&gt; PIXI_PROJECT_ROOT\nPIXI_PACKAGE_NAME -&gt;  PIXI_PROJECT_NAME\nPIXI_PACKAGE_MANIFEST -&gt; PIXI_PROJECT_MANIFEST\nPIXI_PACKAGE_VERSION -&gt; PIXI_PROJECT_VERSION\nPIXI_PACKAGE_PLATFORMS -&gt; PIXI_ENVIRONMENT_PLATFORMS\n</code></pre> Check documentation here: https://pixi.sh/environment/</p> <p>[!IMPORTANT]</p> <p>The <code>.pixi/env/</code> folder has been moved to accommodate multiple environments. If you only have one environment it is now named <code>.pixi/envs/default</code>.</p>"},{"location":"CHANGELOG/#added_19","title":"Added","text":"<ul> <li>Add support for multiple environment:<ul> <li>Update to rattler lock v4 by @baszalmstra in #698</li> <li>Multi-env installation and usage by @baszalmstra in #721</li> <li>Update all environments in the lock-file when requesting an environment by @baszalmstra in #711</li> <li>Run tasks in the env they are defined by @baszalmstra in #731</li> <li><code>polarify</code> use-case as an example by @ruben-arts in #735</li> <li>Make environment name parsing strict by @ruben-arts in #673</li> <li>Use named environments (only \"default\" for now) by @ruben-arts in #674</li> <li>Use task graph instead of traversal by @baszalmstra in #725</li> <li>Multi env documentation by @ruben-arts in #703</li> <li><code>pixi info -e/--environment</code> option by @ruben-arts in #676</li> <li><code>pixi channel add -f/--feature</code> option by @ruben-arts in #700</li> <li><code>pixi channel remove -f/--feature</code> option by @ruben-arts in #706</li> <li><code>pixi remove -f/--feature</code> option by @ruben-arts in #680</li> <li><code>pixi task list -e/--environment</code> option by @ruben-arts in #694</li> <li><code>pixi task remove -f/--feature</code> option by @ruben-arts in #694</li> <li><code>pixi install -e/--environment</code> option by @ruben-arts in #722</li> </ul> </li> </ul> <ul> <li>Support for sdists in <code>pypi-dependencies</code> by @tdejager in #664</li> <li>Add pre-release support to <code>pypi-dependencies</code> by @tdejager in #716</li> </ul> <ul> <li>Support adding dependencies for project's unsupported platforms by @orhun in #668</li> <li>Add <code>pixi list</code> command by @hadim in #665</li> <li>Add <code>pixi shell-hook</code> command by @orhun in #672#679 #684</li> <li>Use env variable to configure locked, frozen and color by @hadim in #726</li> <li><code>pixi self-update</code> by @hadim in #675</li> <li>Add <code>PIXI_NO_PATH_UPDATE</code> for PATH update suppression by @chawyehsu in #692</li> <li>Set the cache directory by @ruben-arts in #683</li> </ul>"},{"location":"CHANGELOG/#changed_24","title":"Changed","text":"<ul> <li>Use consistent naming for tests module by @orhun in #678</li> <li>Install pixi and add to the path in docker example by @ruben-arts in #743</li> <li>Simplify the deserializer of <code>PyPiRequirement</code> by @orhun in #744</li> <li>Use <code>tabwriter</code> instead of <code>comfy_table</code> by @baszalmstra in #745</li> <li>Document environment variables by @ruben-arts in #746</li> </ul>"},{"location":"CHANGELOG/#fixed_33","title":"Fixed","text":"<ul> <li>Quote part of the task that has brackets (<code>[ or ]</code>) by @JafarAbdi in #677</li> <li>Package clobber and <code>__pycache__</code> removal issues by @wolfv in #573</li> <li>Non-global reqwest client by @tdejager in #693</li> <li>Fix broken pipe error during search by @orhun in #699</li> <li>Make <code>pixi search</code> result correct by @chawyehsu in #713</li> <li>Allow the tasks for all platforms to be shown in <code>pixi info</code> by @ruben-arts in #728</li> <li>Flaky tests while installing pypi dependencies by @baszalmstra in #732</li> <li>Linux install script by @mariusvniekerk in #737</li> <li>Download wheels in parallel to avoid deadlock by @baszalmstra in #752</li> </ul>"},{"location":"CHANGELOG/#new-contributors_23","title":"New Contributors","text":"<ul> <li>@JafarAbdi made their first contribution in #677</li> <li>@mariusvniekerk made their first contribution in #737</li> </ul> <p>Full commit history</p>"},{"location":"CHANGELOG/#0120-2024-01-15","title":"[0.12.0] - 2024-01-15","text":""},{"location":"CHANGELOG/#highlights_26","title":"\u2728 Highlights","text":"<ul> <li>Some great community contributions, <code>pixi global upgrade</code>, <code>pixi project version</code> commands, a <code>PIXI_HOME</code> variable.</li> <li>A ton of refactor work to prepare for the multi-environment feature.<ul> <li>Note that there are no extra environments created yet, but you can just specify them in the <code>pixi.toml</code> file already.</li> <li>Next we'll build the actual environments.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#added_20","title":"Added","text":"<ul> <li>Add <code>global upgrade</code> command to pixi by @trueleo in #614</li> <li>Add configurable <code>PIXI_HOME</code> by @chawyehsu in #627</li> <li>Add <code>--pypi</code> option to <code>pixi remove</code> by @marcelotrevisani in https://github.com/prefix-dev/pixi/pull/602</li> <li>PrioritizedChannels to specify channel priority by @ruben-arts in https://github.com/prefix-dev/pixi/pull/658</li> <li>Add <code>project version {major,minor,patch}</code> CLIs by @hadim in https://github.com/prefix-dev/pixi/pull/633</li> </ul>"},{"location":"CHANGELOG/#changed_25","title":"Changed","text":"<ul> <li>Refactored project model using targets, features and environments by @baszalmstra in https://github.com/prefix-dev/pixi/pull/616</li> <li>Move code from <code>Project</code> to <code>Environment</code> by @baszalmstra in #630</li> <li>Refactored <code>system-requirements</code> from Environment by @baszalmstra in #632</li> <li>Extract <code>activation.scripts</code> into Environment by @baszalmstra in #659</li> <li>Extract <code>pypi-dependencies</code> from Environment by @baszalmstra in https://github.com/prefix-dev/pixi/pull/656</li> <li>De-serialization of <code>features</code> and <code>environments</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/636</li> </ul>"},{"location":"CHANGELOG/#fixed_34","title":"Fixed","text":"<ul> <li>Make install.sh also work with wget if curl is not available by @wolfv in #644</li> <li>Use source build for rattler by @ruben-arts</li> <li>Check for pypi-dependencies before amending the pypi purls by @ruben-arts in #661</li> <li>Don't allow the use of reflinks by @ruben-arts in #662</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>Remove windows and unix system requirements by @baszalmstra in #635</li> </ul>"},{"location":"CHANGELOG/#documentation_23","title":"Documentation","text":"<ul> <li>Document the channel logic by @ruben-arts in https://github.com/prefix-dev/pixi/pull/610</li> <li>Update the instructions for installing on Arch Linux by @orhun in https://github.com/prefix-dev/pixi/pull/653</li> <li>Update Community.md by @KarelZe in https://github.com/prefix-dev/pixi/pull/654</li> <li>Replace contributions.md with contributing.md and make it more standardized by @ruben-arts in https://github.com/prefix-dev/pixi/pull/649</li> <li>Remove <code>windows</code> and <code>unix</code> system requirements by @baszalmstra in https://github.com/prefix-dev/pixi/pull/635</li> <li>Add <code>CODE_OF_CONDUCT.md</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/648</li> <li>Removed remaining .ps1 references by @bahugo in https://github.com/prefix-dev/pixi/pull/643</li> </ul>"},{"location":"CHANGELOG/#new-contributors_24","title":"New Contributors","text":"<ul> <li>@marcelotrevisani made their first contribution in https://github.com/prefix-dev/pixi/pull/602</li> <li>@trueleo made their first contribution in https://github.com/prefix-dev/pixi/pull/614</li> <li>@bahugo made their first contribution in https://github.com/prefix-dev/pixi/pull/643</li> <li>@KarelZe made their first contribution in https://github.com/prefix-dev/pixi/pull/654</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.11.0...v0.12.0</p>"},{"location":"CHANGELOG/#0111-2024-01-06","title":"[0.11.1] - 2024-01-06","text":""},{"location":"CHANGELOG/#fixed_35","title":"Fixed","text":"<ul> <li>Upgrading rattler to fix <code>pixi auth</code> in #642</li> </ul>"},{"location":"CHANGELOG/#0110-2024-01-05","title":"[0.11.0] - 2024-01-05","text":""},{"location":"CHANGELOG/#highlights_27","title":"\u2728 Highlights","text":"<ul> <li>Lots of important and preparations for the pypi <code>sdist</code> and multi environment feature</li> <li>Lots of new contributors that help <code>pixi</code> improve!</li> </ul>"},{"location":"CHANGELOG/#added_21","title":"Added","text":"<ul> <li>Add new commands for <code>pixi project {version|channel|platform|description}</code> by @hadim in #579</li> <li>Add dependabot.yml by @pavelzw in #606</li> </ul>"},{"location":"CHANGELOG/#changed_26","title":"Changed","text":"<ul> <li><code>winget-releaser</code> gets correct identifier by @ruben-arts in #561</li> <li>Task run code by @baszalmstra in #556</li> <li>No ps1 in activation scripts by @ruben-arts in #563</li> <li>Changed some names for clarity by @tdejager in #568</li> <li>Change font and make it dark mode by @ruben-arts in #576</li> <li>Moved pypi installation into its own module by @tdejager in #589</li> <li>Move alpha to beta feature and toggle it off with env var by @ruben-arts in #604</li> <li>Improve UX activation scripts by @ruben-arts in #560</li> <li>Add sanity check by @tdejager in #569</li> <li>Refactor manifest by @ruben-arts in #572</li> <li>Improve search by @Johnwillliam in #578</li> <li>Split pypi and conda solve steps by @tdejager in #601</li> </ul>"},{"location":"CHANGELOG/#fixed_36","title":"Fixed","text":"<ul> <li>Save file after lockfile is correctly updated by @ruben-arts in #555</li> <li>Limit the number of concurrent solves by @baszalmstra in #571</li> <li>Use project virtual packages in add command by @msegado in #609</li> <li>Improved mapped dependency by @ruben-arts in #574</li> </ul>"},{"location":"CHANGELOG/#documentation_24","title":"Documentation","text":"<ul> <li>Change font and make it dark mode by @ruben-arts in #576</li> <li>typo: no ps1 in activation scripts by @ruben-arts in #563</li> <li>Document adding CUDA to <code>system-requirements</code> by @ruben-arts in #595</li> <li>Multi env proposal documentation by @ruben-arts in #584</li> <li>Fix multiple typos in configuration.md by @SeaOtocinclus in #608</li> <li>Add multiple machines from one project example by @pavelzw in #605</li> </ul>"},{"location":"CHANGELOG/#new-contributors_25","title":"New Contributors","text":"<ul> <li>@hadim made their first contribution in #579</li> <li>@msegado made their first contribution in #609</li> <li>@Johnwillliam made their first contribution in #578</li> <li>@SeaOtocinclus made their first contribution in #608</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.10.0...v0.11.0</p>"},{"location":"CHANGELOG/#0100-2023-12-8","title":"[0.10.0] - 2023-12-8","text":""},{"location":"CHANGELOG/#highlights_28","title":"Highlights","text":"<ul> <li>Better <code>pypi-dependencies</code> support, now install even more of the pypi packages.</li> <li><code>pixi add --pypi</code> command to add a pypi package to your project.</li> </ul>"},{"location":"CHANGELOG/#added_22","title":"Added","text":"<ul> <li>Use range (<code>&gt;=1.2.3, &lt;1.3</code>) when adding requirement, instead of <code>1.2.3.*</code> by @baszalmstra in https://github.com/prefix-dev/pixi/pull/536</li> <li>Update <code>rip</code> to fix  by @tdejager in https://github.com/prefix-dev/pixi/pull/543<ul> <li>Better Bytecode compilation (<code>.pyc</code>) support by @baszalmstra</li> <li>Recognize <code>.data</code> directory <code>headers</code> by @baszalmstra</li> </ul> </li> <li>Also print arguments given to a pixi task by @ruben-arts in https://github.com/prefix-dev/pixi/pull/545</li> <li>Add <code>pixi add --pypi</code> command by @ruben-arts in https://github.com/prefix-dev/pixi/pull/539</li> </ul>"},{"location":"CHANGELOG/#fixed_37","title":"Fixed","text":"<ul> <li>space in global install path by @ruben-arts in https://github.com/prefix-dev/pixi/pull/513</li> <li>Glibc version/family parsing by @baszalmstra in https://github.com/prefix-dev/pixi/pull/535</li> <li>Use <code>build</code> and <code>host</code> specs while getting the best version by @ruben-arts in https://github.com/prefix-dev/pixi/pull/538</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>docs: add update manual by @ruben-arts in https://github.com/prefix-dev/pixi/pull/521</li> <li>add lightgbm demo by @partrita in https://github.com/prefix-dev/pixi/pull/492</li> <li>Update documentation link by @williamjamir in https://github.com/prefix-dev/pixi/pull/525</li> <li>Update Community.md by @jiaxiyang in https://github.com/prefix-dev/pixi/pull/527</li> <li>Add <code>winget</code> releaser by @ruben-arts in https://github.com/prefix-dev/pixi/pull/547</li> <li>Custom <code>rerun-sdk</code> example, force driven graph of <code>pixi.lock</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/548</li> <li>Better document pypi part by @ruben-arts in https://github.com/prefix-dev/pixi/pull/546</li> </ul>"},{"location":"CHANGELOG/#new-contributors_26","title":"New Contributors","text":"<ul> <li>@partrita made their first contribution in https://github.com/prefix-dev/pixi/pull/492</li> <li>@williamjamir made their first contribution in https://github.com/prefix-dev/pixi/pull/525</li> <li>@jiaxiyang made their first contribution in https://github.com/prefix-dev/pixi/pull/527</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.9.1...v0.10.0</p>"},{"location":"CHANGELOG/#091-2023-11-29","title":"[0.9.1] - 2023-11-29","text":""},{"location":"CHANGELOG/#highlights_29","title":"Highlights","text":"<ul> <li>PyPI's <code>scripts</code> are now fixed. For example: https://github.com/prefix-dev/pixi/issues/516</li> </ul>"},{"location":"CHANGELOG/#fixed_38","title":"Fixed","text":"<ul> <li>Remove attr (unused) and update all dependencies by @wolfv in https://github.com/prefix-dev/pixi/pull/510</li> <li>Remove empty folders on python uninstall by @baszalmstra in https://github.com/prefix-dev/pixi/pull/512</li> <li>Bump <code>rip</code> to add scripts by @baszalmstra in https://github.com/prefix-dev/pixi/pull/517</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.9.0...v0.9.1</p>"},{"location":"CHANGELOG/#090-2023-11-28","title":"[0.9.0] - 2023-11-28","text":""},{"location":"CHANGELOG/#highlights_30","title":"Highlights","text":"<ul> <li>You can now run <code>pixi remove</code>, <code>pixi rm</code> to remove a package from the environment</li> <li>Fix <code>pip install -e</code> issue that was created by release <code>v0.8.0</code> : https://github.com/prefix-dev/pixi/issues/507</li> </ul>"},{"location":"CHANGELOG/#added_23","title":"Added","text":"<ul> <li><code>pixi remove</code> command by @Wackyator in https://github.com/prefix-dev/pixi/pull/483</li> </ul>"},{"location":"CHANGELOG/#fixed_39","title":"Fixed","text":"<ul> <li>Install entrypoints for <code>[pypi-dependencies]</code> @baszalmstra in https://github.com/prefix-dev/pixi/pull/508</li> <li>Only uninstall pixi installed packages by @baszalmstra in https://github.com/prefix-dev/pixi/pull/509</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.8.0...v0.9.0</p>"},{"location":"CHANGELOG/#080-2023-11-27","title":"[0.8.0] - 2023-11-27","text":""},{"location":"CHANGELOG/#highlights_31","title":"Highlights","text":"<ul> <li>\ud83c\udf89\ud83d\udc0d<code>[pypi-dependencies]</code> ALPHA RELEASE\ud83d\udc0d\ud83c\udf89, you can now add PyPI dependencies to your pixi project.</li> <li>UX of <code>pixi run</code> has been improved with better errors and showing what task is run.</li> </ul> <p>[!NOTE] <code>[pypi-dependencies]</code> support is still incomplete, missing functionality is listed here: https://github.com/orgs/prefix-dev/projects/6. Our intent is not to have 100% feature parity with <code>pip</code>, our goal is that you only need <code>pixi</code> for both conda and pypi packages alike.</p>"},{"location":"CHANGELOG/#added_24","title":"Added","text":"<ul> <li>Bump <code>rattler</code> @ruben-arts in https://github.com/prefix-dev/pixi/pull/496</li> <li>Implement lock-file satisfiability with <code>pypi-dependencies</code> by @baszalmstra in https://github.com/prefix-dev/pixi/pull/494</li> <li>List pixi tasks when <code>command not found</code> is returned by @ruben-arts in https://github.com/prefix-dev/pixi/pull/488</li> <li>Show which command is run as a pixi task by @ruben-arts in https://github.com/prefix-dev/pixi/pull/491 &amp;&amp; https://github.com/prefix-dev/pixi/pull/493</li> <li>Add progress info to conda install by @baszalmstra in https://github.com/prefix-dev/pixi/pull/470</li> <li>Install pypi dependencies (alpha) by @baszalmstra in https://github.com/prefix-dev/pixi/pull/452</li> </ul>"},{"location":"CHANGELOG/#fixed_40","title":"Fixed","text":"<ul> <li>Add install scripts to <code>pixi.sh</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/458 &amp;&amp; https://github.com/prefix-dev/pixi/pull/459 &amp;&amp; https://github.com/prefix-dev/pixi/pull/460</li> <li>Fix <code>RECORD not found</code> issue by @baszalmstra in https://github.com/prefix-dev/pixi/pull/495</li> <li>Actually add to the <code>.gitignore</code> and give better errors by @ruben-arts in https://github.com/prefix-dev/pixi/pull/490</li> <li>Support macOS for <code>pypi-dependencies</code> by @baszalmstra in https://github.com/prefix-dev/pixi/pull/478</li> <li>Custom <code>pypi-dependencies</code> type by @ruben-arts in https://github.com/prefix-dev/pixi/pull/471</li> <li><code>pypi-dependencies</code> parsing errors by @ruben-arts in https://github.com/prefix-dev/pixi/pull/479</li> <li>Progress issues by @baszalmstra in https://github.com/prefix-dev/pixi/pull/4</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_2","title":"Miscellaneous","text":"<ul> <li>Example: <code>ctypes</code> by @liquidcarbon in https://github.com/prefix-dev/pixi/pull/441</li> <li>Mention the AUR package by @orhun in https://github.com/prefix-dev/pixi/pull/464</li> <li>Update <code>rerun</code> example by @ruben-arts in https://github.com/prefix-dev/pixi/pull/489</li> <li>Document <code>pypi-dependencies</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/481</li> <li>Ignore docs paths on rust workflow by @ruben-arts in https://github.com/prefix-dev/pixi/pull/482</li> <li>Fix flaky tests, run serially by @baszalmstra in https://github.com/prefix-dev/pixi/pull/477</li> </ul>"},{"location":"CHANGELOG/#new-contributors_27","title":"New Contributors","text":"<ul> <li>@liquidcarbon made their first contribution in https://github.com/prefix-dev/pixi/pull/441</li> <li>@orhun made their first contribution in https://github.com/prefix-dev/pixi/pull/464</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.7.0...v0.8.0</p>"},{"location":"CHANGELOG/#070-2023-11-14","title":"[0.7.0] - 2023-11-14","text":""},{"location":"CHANGELOG/#highlights_32","title":"Highlights","text":"<ul> <li>Channel priority: <code>channels = [\"conda-forge\", \"pytorch\"]</code> All packages found in conda-forge will not be taken from pytorch.</li> <li>Channel specific dependencies: <code>pytorch = { version=\"*\", channel=\"pytorch\"}</code></li> <li>Autocompletion on <code>pixi run &lt;TABTAB&gt;</code></li> <li>Moved all pixi documentation into this repo, try it with <code>pixi run docs</code>!</li> <li>Lots of new contributors!</li> </ul>"},{"location":"CHANGELOG/#added_25","title":"Added","text":"<ul> <li>Bump rattler to its newest version by @ruben-arts in https://github.com/prefix-dev/pixi/pull/395     * Some notable changes:         * Add channel priority (If a package is found in the first listed channel it will not be looked for in the other channels).         * Fix JLAP using wrong hash.         * Lockfile forward compatibility error.</li> <li>Add nushell support by @wolfv in https://github.com/prefix-dev/pixi/pull/360</li> <li>Autocomplete tasks on <code>pixi run</code> for <code>bash</code> and <code>zsh</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/390</li> <li>Add prefix location file to avoid copy error by @ruben-arts in https://github.com/prefix-dev/pixi/pull/422</li> <li>Channel specific dependencies <code>python = { version = \"*\" channel=\"conda-forge\" }</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/439</li> </ul>"},{"location":"CHANGELOG/#changed_27","title":"Changed","text":"<ul> <li><code>project.version</code> as optional field in the <code>pixi.toml</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/400</li> </ul>"},{"location":"CHANGELOG/#fixed_41","title":"Fixed","text":"<ul> <li>Deny unknown fields in <code>pixi.toml</code> to help users find errors by @ruben-arts in https://github.com/prefix-dev/pixi/pull/396</li> <li><code>install.sh</code> to create dot file if not present by @humphd in https://github.com/prefix-dev/pixi/pull/408</li> <li>Ensure order of repodata fetches by @baszalmstra in https://github.com/prefix-dev/pixi/pull/405</li> <li>Strip Linux binaries by @baszalmstra in https://github.com/prefix-dev/pixi/pull/414</li> <li>Sort <code>task list</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/431</li> <li>Fix <code>global install</code> path on windows by @ruben-arts in https://github.com/prefix-dev/pixi/pull/449</li> <li>Let <code>PIXI_BIN_PATH</code> use backslashes by @Hofer-Julian in https://github.com/prefix-dev/pixi/pull/442</li> <li>Print more informative error if created file is empty by @traversaro in https://github.com/prefix-dev/pixi/pull/447</li> </ul>"},{"location":"CHANGELOG/#docs","title":"Docs","text":"<ul> <li>Move to <code>mkdocs</code> with all documentation by @ruben-arts in https://github.com/prefix-dev/pixi/pull/435</li> <li>Fix typing errors by @FarukhS52 in https://github.com/prefix-dev/pixi/pull/426</li> <li>Add social cards to the pages by @ruben-arts in https://github.com/prefix-dev/pixi/pull/445</li> <li>Enhance README.md: Added Table of Contents, Grammar Improvements by @adarsh-jha-dev in https://github.com/prefix-dev/pixi/pull/421</li> <li>Adding conda-auth to community examples by @travishathaway in https://github.com/prefix-dev/pixi/pull/433</li> <li>Minor grammar correction by @tylere in https://github.com/prefix-dev/pixi/pull/406</li> <li>Make capitalization of tab titles consistent by @tylere in https://github.com/prefix-dev/pixi/pull/407</li> </ul>"},{"location":"CHANGELOG/#new-contributors_28","title":"New Contributors","text":"<ul> <li>@tylere made their first contribution in https://github.com/prefix-dev/pixi/pull/406</li> <li>@humphd made their first contribution in https://github.com/prefix-dev/pixi/pull/408</li> <li>@adarsh-jha-dev made their first contribution in https://github.com/prefix-dev/pixi/pull/421</li> <li>@FarukhS52 made their first contribution in https://github.com/prefix-dev/pixi/pull/426</li> <li>@travishathaway made their first contribution in https://github.com/prefix-dev/pixi/pull/433</li> <li>@traversaro made their first contribution in https://github.com/prefix-dev/pixi/pull/447</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.6.0...v0.7.0</p>"},{"location":"CHANGELOG/#060-2023-10-17","title":"[0.6.0] - 2023-10-17","text":""},{"location":"CHANGELOG/#highlights_33","title":"Highlights","text":"<p>This release fixes some bugs and adds the <code>--cwd</code> option to the tasks.</p>"},{"location":"CHANGELOG/#fixed_42","title":"Fixed","text":"<ul> <li>Improve shell prompts by @ruben-arts in https://github.com/prefix-dev/pixi/pull/385 https://github.com/prefix-dev/pixi/pull/388</li> <li>Change <code>--frozen</code> logic to error when there is no lockfile by @ruben-arts in https://github.com/prefix-dev/pixi/pull/373</li> <li>Don't remove the '.11' from 'python3.11' binary file name by @ruben-arts in https://github.com/prefix-dev/pixi/pull/366</li> </ul>"},{"location":"CHANGELOG/#changed_28","title":"Changed","text":"<ul> <li>Update <code>rerun</code> example to v0.9.1 by @ruben-arts in https://github.com/prefix-dev/pixi/pull/389</li> </ul>"},{"location":"CHANGELOG/#added_26","title":"Added","text":"<ul> <li>Add the current working directory (<code>--cwd</code>) in <code>pixi tasks</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/380</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.5.0...v0.6.0</p>"},{"location":"CHANGELOG/#050-2023-10-03","title":"[0.5.0] - 2023-10-03","text":""},{"location":"CHANGELOG/#highlights_34","title":"Highlights","text":"<p>We rebuilt <code>pixi shell</code>, fixing the fact that your <code>rc</code> file would overrule the environment activation.</p>"},{"location":"CHANGELOG/#fixed_43","title":"Fixed","text":"<ul> <li>Change how <code>shell</code> works and make activation more robust by @wolfv in https://github.com/prefix-dev/pixi/pull/316</li> <li>Documentation: use quotes in cli by @pavelzw in https://github.com/prefix-dev/pixi/pull/367</li> </ul>"},{"location":"CHANGELOG/#added_27","title":"Added","text":"<ul> <li>Create or append to the <code>.gitignore</code> and <code>.gitattributes</code> files by @ruben-arts in https://github.com/prefix-dev/pixi/pull/359</li> <li>Add <code>--locked</code> and <code>--frozen</code> to getting an up-to-date prefix by @ruben-arts in https://github.com/prefix-dev/pixi/pull/363</li> <li>Documentation: improvement/update by @ruben-arts in https://github.com/prefix-dev/pixi/pull/355</li> <li>Example: how to build a docker image using <code>pixi</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/353 &amp; https://github.com/prefix-dev/pixi/pull/365</li> <li>Update to the newest rattler by @baszalmstra in https://github.com/prefix-dev/pixi/pull/361</li> <li>Periodic <code>cargo upgrade --all --incompatible</code> by @wolfv in https://github.com/prefix-dev/pixi/pull/358</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.4.0...v0.5.0</p>"},{"location":"CHANGELOG/#040-2023-09-22","title":"[0.4.0] - 2023-09-22","text":""},{"location":"CHANGELOG/#highlights_35","title":"Highlights","text":"<p>This release adds the start of a new cli command <code>pixi project</code> which will allow users to interact with the project configuration from the command line.</p>"},{"location":"CHANGELOG/#fixed_44","title":"Fixed","text":"<ul> <li>Align with latest rattler version <code>0.9.0</code> by @ruben-arts in https://github.com/prefix-dev/pixi/pull/350</li> </ul>"},{"location":"CHANGELOG/#added_28","title":"Added","text":"<ul> <li>Add codespell (config, workflow) to catch typos + catch and fix some of those by @yarikoptic in https://github.com/prefix-dev/pixi/pull/329</li> <li>remove atty and use stdlib by @wolfv in https://github.com/prefix-dev/pixi/pull/337</li> <li><code>xtsci-dist</code> to Community.md by @HaoZeke in https://github.com/prefix-dev/pixi/pull/339</li> <li><code>ribasim</code> to Community.md by @Hofer-Julian in https://github.com/prefix-dev/pixi/pull/340</li> <li><code>LFortran</code> to Community.md by @wolfv in https://github.com/prefix-dev/pixi/pull/341</li> <li>Give tip to resolve virtual package issue by @ruben-arts in https://github.com/prefix-dev/pixi/pull/348</li> <li><code>pixi project channel add</code> subcommand by @baszalmstra and @ruben-arts in https://github.com/prefix-dev/pixi/pull/347</li> </ul>"},{"location":"CHANGELOG/#new-contributors_29","title":"New Contributors","text":"<ul> <li>@yarikoptic made their first contribution in https://github.com/prefix-dev/pixi/pull/329</li> <li>@HaoZeke made their first contribution in https://github.com/prefix-dev/pixi/pull/339</li> </ul> <p>Full Changelog: https://github.com/prefix-dev/pixi/compare/v0.3.0...v0.4.0</p>"},{"location":"CHANGELOG/#030-2023-09-11","title":"[0.3.0] - 2023-09-11","text":""},{"location":"CHANGELOG/#highlights_36","title":"Highlights","text":"<p>This releases fixes a lot of issues encountered by the community as well as some awesome community contributions like the addition of <code>pixi global list</code> and <code>pixi global remove</code>.</p>"},{"location":"CHANGELOG/#fixed_45","title":"Fixed","text":"<ul> <li>Properly detect Cuda on linux using our build binaries, by @baszalmstra (#290)</li> <li>Package names are now case-insensitive, by @baszalmstra (#285)</li> <li>Issue with starts-with and compatibility operator, by @tdejager (#296)</li> <li>Lock files are now consistently sorted, by @baszalmstra (#295 &amp; #307)</li> <li>Improved xonsh detection and powershell env-var escaping, by @wolfv (#307)</li> <li><code>system-requirements</code> are properly filtered by platform, by @ruben-arts (#299)</li> <li>Powershell completion install script, by @chawyehsu (#325)</li> <li>Simplified and improved shell quoting, by @baszalmstra (#313)</li> <li>Issue where platform specific subdirs were required, by @baszalmstra (#333)</li> <li><code>thread 'tokio-runtime-worker' has overflowed its stack</code> issue, by @baszalmstra (#28)</li> </ul>"},{"location":"CHANGELOG/#added_29","title":"Added","text":"<ul> <li>Certificates from the OS certificate store are now used, by @baszalmstra (#310)</li> <li><code>pixi global list</code> and <code>pixi global remove</code> commands, by @cjfuller (#318)</li> </ul>"},{"location":"CHANGELOG/#changed_29","title":"Changed","text":"<ul> <li><code>--manifest-path</code> must point to a <code>pixi.toml</code> file, by @baszalmstra (#324)</li> </ul>"},{"location":"CHANGELOG/#020-2023-08-22","title":"[0.2.0] - 2023-08-22","text":""},{"location":"CHANGELOG/#highlights_37","title":"Highlights","text":"<ul> <li>Added <code>pixi search</code> command to search for packages, by @Wackyator. (#244)</li> <li>Added target specific tasks, eg. <code>[target.win-64.tasks]</code>, by @ruben-arts. (#269)</li> <li>Flaky install caused by the download of packages, by @baszalmstra. (#281)</li> </ul>"},{"location":"CHANGELOG/#fixed_46","title":"Fixed","text":"<ul> <li>Install instructions, by @baszalmstra. (#258)</li> <li>Typo in getting started, by @RaulPL. (#266)</li> <li>Don't execute alias tasks, by @baszalmstra. (#274)</li> </ul>"},{"location":"CHANGELOG/#added_30","title":"Added","text":"<ul> <li>Rerun example, by @ruben-arts. (#236)</li> <li>Reduction of pixi's binary size, by @baszalmstra (#256)</li> <li>Updated pixi banner, including webp file for faster loading, by @baszalmstra. (#257)</li> <li>Set linguist attributes for <code>pixi.lock</code> automatically, by @spenserblack. (#265)</li> <li>Contribution manual for pixi, by @ruben-arts. (#268)</li> <li>GitHub issue templates, by @ruben-arts. (#271)</li> <li>Links to prefix.dev in readme, by @tdejager. (#279)</li> </ul>"},{"location":"CHANGELOG/#010-2023-08-11","title":"[0.1.0] - 2023-08-11","text":"<p>As this is our first Semantic Versioning release, we'll change from the prototype to the developing phase, as semver describes. A 0.x release could be anything from a new major feature to a breaking change where the 0.0.x releases will be bugfixes or small improvements.</p>"},{"location":"CHANGELOG/#highlights_38","title":"Highlights","text":"<ul> <li>Update to the latest rattler version, by @baszalmstra. (#249)</li> </ul>"},{"location":"CHANGELOG/#fixed_47","title":"Fixed","text":"<ul> <li>Only add shebang to activation scripts on <code>unix</code> platforms, by @baszalmstra. (#250)</li> <li>Use official crates.io releases for all dependencies, by @baszalmstra. (#252)</li> </ul>"},{"location":"CHANGELOG/#008-2023-08-01","title":"[0.0.8] - 2023-08-01","text":""},{"location":"CHANGELOG/#highlights_39","title":"Highlights","text":"<ul> <li>Much better error printing using <code>miette</code>, by @baszalmstra. (#211)</li> <li>You can now use pixi on <code>aarch64-linux</code>, by @pavelzw.  (#233)</li> <li>Use the Rust port of <code>libsolv</code> as the default solver, by @ruben-arts. (#209)</li> </ul>"},{"location":"CHANGELOG/#added_31","title":"Added","text":"<ul> <li>Add mention to <code>condax</code> in the docs, by @maresb. (#207)</li> <li>Add <code>brew</code> installation instructions, by @wolfv. (#208)</li> <li>Add <code>activation.scripts</code> to the <code>pixi.toml</code> to configure environment activation, by @ruben-arts. (#217)</li> <li>Add <code>pixi upload</code> command to upload packages to <code>prefix.dev</code>, by @wolfv. (#127)</li> <li>Add more metadata fields to the <code>pixi.toml</code>, by @wolfv. (#218)</li> <li>Add <code>pixi task list</code> to show all tasks in the project, by @tdejager. (#228)</li> <li>Add <code>--color</code> to configure the colors in the output, by @baszalmstra. (#243)</li> <li>Examples, ROS2 Nav2, JupyterLab and QGIS, by @ruben-arts.</li> </ul>"},{"location":"CHANGELOG/#fixed_48","title":"Fixed","text":"<ul> <li>Add trailing newline to <code>pixi.toml</code> and <code>.gitignore</code>, by @pavelzw. (#216)</li> <li>Deny unknown fields and rename license-file in <code>pixi.toml</code>, by @wolfv. (#220)</li> <li>Overwrite <code>PS1</code> variable when going into a <code>pixi shell</code>, by @ruben-arts. (#201)</li> </ul>"},{"location":"CHANGELOG/#changed_30","title":"Changed","text":"<ul> <li>Install environment when adding a dependency using <code>pixi add</code>, by @baszalmstra. (#213)</li> <li>Improve and speedup CI, by @baszalmstra. (#241)</li> </ul>"},{"location":"CHANGELOG/#007-2023-07-11","title":"[0.0.7] - 2023-07-11","text":""},{"location":"CHANGELOG/#highlights_40","title":"Highlights","text":"<ul> <li>Transitioned the <code>run</code> subcommand to use the <code>deno_task_shell</code> for improved cross-platform functionality. More details in the Deno Task Runner documentation.</li> <li>Added an <code>info</code> subcommand to retrieve system-specific information understood by <code>pixi</code>.</li> </ul>"},{"location":"CHANGELOG/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li><code>[commands]</code> in the <code>pixi.toml</code> is now called <code>[tasks]</code>. (#177)</li> </ul>"},{"location":"CHANGELOG/#added_32","title":"Added","text":"<ul> <li>The <code>pixi info</code> command to get more system information by @wolfv in (#158)</li> <li>Documentation on how to use the cli by @ruben-arts in (#160)</li> <li>Use the <code>deno_task_shell</code> to execute commands in <code>pixi run</code> by @baszalmstra in (#173)</li> <li>Use new solver backend from rattler by @baszalmstra in (#178)</li> <li>The <code>pixi command</code> command to the cli by @tdejager in (#177)</li> <li>Documentation on how to use the <code>pixi auth</code> command by @wolfv in (#183)</li> <li>Use the newest rattler 0.6.0 by @baszalmstra in (#185)</li> <li>Build with pixi section to the documentation by @tdejager in (#196)</li> </ul>"},{"location":"CHANGELOG/#fixed_49","title":"Fixed","text":"<ul> <li>Running tasks sequentially when using <code>depends_on</code> by @tdejager in (#161)</li> <li>Don't add <code>PATH</code> variable where it is already set by @baszalmstra in (#169)</li> <li>Fix README by @Hofer-Julian in (#182)</li> <li>Fix Ctrl+C signal in <code>pixi run</code> by @tdejager in (#190)</li> <li>Add the correct license information to the lockfiles by @wolfv in (#191)</li> </ul>"},{"location":"CHANGELOG/#006-2023-06-30","title":"[0.0.6] - 2023-06-30","text":""},{"location":"CHANGELOG/#highlights_41","title":"Highlights","text":"<p>Improving the reliability is important to us, so we added an integration testing framework, we can now test as close as possible to the CLI level using <code>cargo</code>.</p>"},{"location":"CHANGELOG/#added_33","title":"Added","text":"<ul> <li>An integration test harness, to test as close as possible to the user experience but in rust. (#138, #140, #156)</li> <li>Add different levels of dependencies in preparation for <code>pixi build</code>, allowing <code>host-</code> and <code>build-</code> <code>dependencies</code> (#149)</li> </ul>"},{"location":"CHANGELOG/#fixed_50","title":"Fixed","text":"<ul> <li>Use correct folder name on pixi init (#144)</li> <li>Fix windows cli installer (#152)</li> <li>Fix global install path variable (#147)</li> <li>Fix macOS binary notarization (#153)</li> </ul>"},{"location":"CHANGELOG/#005-2023-06-26","title":"[0.0.5] - 2023-06-26","text":"<p>Fixing Windows installer build in CI. (#145)</p>"},{"location":"CHANGELOG/#004-2023-06-26","title":"[0.0.4] - 2023-06-26","text":""},{"location":"CHANGELOG/#highlights_42","title":"Highlights","text":"<p>A new command, <code>auth</code> which can be used to authenticate the host of the package channels. A new command, <code>shell</code> which can be used to start a shell in the pixi environment of a project. A refactor of the <code>install</code> command which is changed to <code>global install</code> and the <code>install</code> command now installs a pixi project if you run it in the directory. Platform specific dependencies using <code>[target.linux-64.dependencies]</code> instead of <code>[dependencies]</code> in the <code>pixi.toml</code></p> <p>Lots and lots of fixes and improvements to make it easier for this user, where bumping to the new version of <code>rattler</code> helped a lot.</p>"},{"location":"CHANGELOG/#added_34","title":"Added","text":"<ul> <li>Platform specific dependencies and helpful error reporting on <code>pixi.toml</code> issues(#111)</li> <li>Windows installer, which is very useful for users that want to start using pixi on windows. (#114)</li> <li><code>shell</code> command to use the pixi environment without <code>pixi run</code>. (#116)</li> <li>Verbosity options using <code>-v, -vv, -vvv</code> (#118)</li> <li><code>auth</code> command to be able to login or logout of a host like <code>repo.prefix.dev</code> if you're using private channels. (#120)</li> <li>New examples: CPP sdl: #121, Opencv camera calibration #125</li> <li>Apple binary signing and notarization. (#137)</li> </ul>"},{"location":"CHANGELOG/#changed_31","title":"Changed","text":"<ul> <li><code>pixi install</code> moved to <code>pixi global install</code> and <code>pixi install</code> became the installation of a project using the <code>pixi.toml</code> (#124)</li> </ul>"},{"location":"CHANGELOG/#fixed_51","title":"Fixed","text":"<ul> <li><code>pixi run</code> uses default shell (#119)</li> <li><code>pixi add</code> command is fixed. (#132)</li> </ul> <ul> <li>Community issues fixed: #70, #72,  #90, #92, #94, #96</li> </ul>"}]}